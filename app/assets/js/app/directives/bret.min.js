/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var o=function(t,e,o,i,r){this._storageKey="bret_state",this.$interval=r,this.$element=o,this.$filter=i,this.$attrs=e,this.$scope=t};o.$inject=["$scope","$attrs","$element","$filter","$interval"],o.prototype.avg=12,o.prototype.rows=5,o.prototype.cols=5,o.prototype.dynamic=!1,o.prototype.random=!1,o.prototype.interval=1,o.prototype.$onInit=function(){this.init()},o.prototype.init=function(){this._initInternals(),this._initWatches(),this._initMatrix(),this._initBomb(),this._desist(),this.dynamic||this.start()},o.prototype.reset=function(){this._removeState(),this.init()},o.prototype.start=function(t){if(this.dynamic){var e=this,o=this.iterator.length;this._intIndex=t||0,this._intervalId=e.$interval(function(){var t=e.iterator[e._intIndex];e.update(t,!0),e._intIndex++,e._intIndex===o&&e.stop()},1e3*this.interval,o-this._intIndex)}this.started=!0,this._persist()},o.prototype.stop=function(){this.dynamic&&this._intervalId&&this.$interval.cancel(this._intervalId),this.stopped=!0,this._persist()},o.prototype.resolve=function(){for(var t=0;t<this.collection.length;t++)this.collection[t].$$resolved=!0;this.resolved=!0,this.onResolve(),this._persist()},o.prototype.update=function(t,e){var o=this.collection.indexOf(t);e?(o<0&&this.collection.push(t),t.$$active=!0):o>=0&&(this.collection.splice(o,1),t.$$active=!1),this._persist()},o.prototype.trackId=function(t){return t.row+"_"+t.col},o.prototype.isBomb=function(t){return e.equals(this.bomb,t)},o.prototype.hasBomb=function(){var t=this,e=this.$filter("filter")(this.collection,function(e){return t.isBomb(e)});return+(1===e.length)},o.prototype.getTotalBoxes=function(){return this.rows*this.cols},o.prototype.getCollectedBoxes=function(){return this.collection.length},o.prototype.getRemainingBoxes=function(){return this.getTotalBoxes()-this.getCollectedBoxes()},o.prototype._getColumn=function(t){var e=t.row-1,o=t.col-1;return this.matrix[e][o]},o.prototype._getState=function(){return"undefined"!=typeof sessionStorage?e.fromJson(sessionStorage.getItem(this._storageKey)):null},o.prototype._setState=function(t){"undefined"!=typeof sessionStorage&&sessionStorage.setItem(this._storageKey,e.toJson(t))},o.prototype._removeState=function(){"undefined"!=typeof sessionStorage&&sessionStorage.removeItem(this._storageKey)},o.prototype._persist=function(){},o.prototype._desist=function(){},o.prototype._initInternals=function(){this.collection=[],this.started=!1,this.stopped=!1,this.resolved=!1},o.prototype._initWatches=function(){},o.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var e=[],o=0;o<this.cols;o++){var i={row:t+1,col:o+1};e.push(i),this.dynamic&&(this.random?this._pushRandom(this.iterator,i):this.iterator.push(i))}this.matrix.push(e)}},o.prototype._initBomb=function(){var t=this._getRandom(0,this.rows-1),e=this._getRandom(0,this.cols-1);this.bomb=this.matrix[t][e]},o.prototype._getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},o.prototype._pushRandom=function(t,e){var o=this._getRandom(0,t.length);return t.push(t[o]),t[o]=e,t.length},o.prototype._shuffleArray=function(t){for(var e=t.length-1;e>0;e--){var o=this._getRandom(0,e),i=t[e];t[e]=t[o],t[o]=i}return t},e.module(t).directive("bret",function(){return{scope:{rows:"=?bretRows",cols:"=?bretCols",random:"=?bretRandom",dynamic:"=?bretDynamic",interval:"=?bretInterval",onResolve:"&bretOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"bretController",templateUrl:"assets/views/bret.html"}});var i=function(){};i.prototype.model=null,i.prototype.isActive=!1,i.prototype.isDisabled=!1,i.prototype.isClickable=!0,i.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},e.module(t).directive("bretCard",function(){return{scope:{model:"=bretCard",onToggle:"&bretCardOnToggle",isActive:"=?bretCardIsActive",isDisabled:"=?bretCardIsDisabled",isClickable:"=?bretCardIsClickable"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"bretCardController",templateUrl:"assets/views/bret-card.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
