/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular, UIkit */
(function(module, angular) {
  'use strict';

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var Modal = function($scope, $attrs, $element, $transclude) {
    this.$scope = $scope;
    this.$attrs = $attrs;
    this.$element = $element;
    this.$transclude = $transclude;

    this._element = null;
    this._modal = null;
    this._scope = null;
  };

  Modal.$inject = ['$scope', '$attrs', '$element', '$transclude'];

  //
  // PROPERTIES
  //

  /** @var {boolean} isVisible Flag for modal visibility. */
  Modal.prototype.isVisible = false;

  //
  // METHODS
  //

  /**
   * Registers UIkit callbacks and watches.
   *
   * @public
   * @method $onInit
   * @return {Void}
   */
  Modal.prototype.$onInit = function()
    {
      var me = this;

      // listeners
      this._onShow = function() {
        me.$scope.$evalAsync(me.onShow);
      };

      this._onShown = function() {
        me.$scope.$evalAsync(me.onShown);
      };

      this._onBeforeShow = function() {
        me.$scope.$evalAsync(me.onBeforeShow);
      };

      this._onHide = function() {
        me.$scope.$evalAsync(me.onHide);
      };

      this._onHidden = function() {
        me.$scope.$evalAsync(function(){
          me.isVisible = false;
          me.onHidden();
        });
      };

      this._onBeforeHide = function() {
        me.$scope.$evalAsync(me.onBeforeHide);
      };

      // watches
      this._unwatch = this.$scope.$watch(
        'modalController.isVisible',
        function(isVisible) {
          if (isVisible) {
            me.transclude();
            return;
          }

          me.destroy();
        }
      );
    };

  /**
   * Cleans up everything on destruction.
   *
   * @public
   * @method $onDestroy
   * @return {Void}
   */
  Modal.prototype.$onDestroy = function()
    {
      this._unwatch();
      this.destroy();
    };

  /**
   * Transcludes contents and shows modal.
   *
   * @public
   * @method render
   * @return {Void}
   */
  Modal.prototype.transclude = function() {
    var me = this;

    var transclude = function(clone, scope) {
      // save element and scope
      me._element = clone;
      me._scope = scope;

      // register UIKit listeners
      me._element.on('show', me._onShow);
      me._element.on('shown', me._onShown);
      me._element.on('beforeshow', me._onBeforeShow);

      me._element.on('hide', me._onHide);
      me._element.on('hidden', me._onHidden);
      me._element.on('beforeHide', me._onBeforeHide);

      // replace with actual element
      me.$element.append(clone);

      // create and show the modal
      me._modal = UIkit.modal(clone);
      me._modal.show();
    };

    this.$transclude(transclude);
  };

  /**
   * Destructs current modal transclusion from DOM.
   *
   * @public
   * @method $onDestroy
   * @return {Void}
   */
  Modal.prototype.destroy = function() {
    if (this._element !== null) {
      this._element.off('show', this._onShow);
      this._element.off('shown', this._onShown);
      this._element.off('beforeshow', this._onBeforeShow);

      this._element.off('hide', this._onHide);
      this._element.off('hidden', this._onHidden);
      this._element.off('beforeHide', this._onBeforeHide);

      this._element.remove();
      this._element = null;
    }

    if (this._scope !== null) {
      this._scope.$destroy();
      this._scope = null;
    }

    if (this._modal !== null) {
      this._modal.hide();
      this._modal = null;
    }
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('modal', function(){
    return {
      scope: {
        isVisible: '=?modal',
        onShow:'&modalOnShow',
        onHide:'&modalOnHide',
        onShown:'&modalOnShown',
        onHidden:'&modalOnHidden',
        onBeforeShow:'&modalOnBeforeShow',
        onBeforeHide:'&modalOnBeforeHide'
      },
      restrict: 'A',
      controller: Modal,
      transclude: 'element',
      bindToController: true,
      controllerAs: 'modalController'
    };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL21vZGFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC9kaXJlY3RpdmVzL21vZGFsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciwgVUlraXQgKi9cbihmdW5jdGlvbihtb2R1bGUsIGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgTW9kYWwgPSBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgJGVsZW1lbnQsICR0cmFuc2NsdWRlKSB7XG4gICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJHRyYW5zY2x1ZGUgPSAkdHJhbnNjbHVkZTtcblxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX21vZGFsID0gbnVsbDtcbiAgICB0aGlzLl9zY29wZSA9IG51bGw7XG4gIH07XG5cbiAgTW9kYWwuJGluamVjdCA9IFsnJHNjb3BlJywgJyRhdHRycycsICckZWxlbWVudCcsICckdHJhbnNjbHVkZSddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvKiogQHZhciB7Ym9vbGVhbn0gaXNWaXNpYmxlIEZsYWcgZm9yIG1vZGFsIHZpc2liaWxpdHkuICovXG4gIE1vZGFsLnByb3RvdHlwZS5pc1Zpc2libGUgPSBmYWxzZTtcblxuICAvL1xuICAvLyBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBVSWtpdCBjYWxsYmFja3MgYW5kIHdhdGNoZXMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCAkb25Jbml0XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBNb2RhbC5wcm90b3R5cGUuJG9uSW5pdCA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgICAvLyBsaXN0ZW5lcnNcbiAgICAgIHRoaXMuX29uU2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtZS4kc2NvcGUuJGV2YWxBc3luYyhtZS5vblNob3cpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fb25TaG93biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtZS4kc2NvcGUuJGV2YWxBc3luYyhtZS5vblNob3duKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX29uQmVmb3JlU2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtZS4kc2NvcGUuJGV2YWxBc3luYyhtZS5vbkJlZm9yZVNob3cpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fb25IaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1lLiRzY29wZS4kZXZhbEFzeW5jKG1lLm9uSGlkZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9vbkhpZGRlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtZS4kc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpe1xuICAgICAgICAgIG1lLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgIG1lLm9uSGlkZGVuKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fb25CZWZvcmVIaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1lLiRzY29wZS4kZXZhbEFzeW5jKG1lLm9uQmVmb3JlSGlkZSk7XG4gICAgICB9O1xuXG4gICAgICAvLyB3YXRjaGVzXG4gICAgICB0aGlzLl91bndhdGNoID0gdGhpcy4kc2NvcGUuJHdhdGNoKFxuICAgICAgICAnbW9kYWxDb250cm9sbGVyLmlzVmlzaWJsZScsXG4gICAgICAgIGZ1bmN0aW9uKGlzVmlzaWJsZSkge1xuICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgICAgIG1lLnRyYW5zY2x1ZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAvKipcbiAgICogQ2xlYW5zIHVwIGV2ZXJ5dGhpbmcgb24gZGVzdHJ1Y3Rpb24uXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCAkb25EZXN0cm95XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBNb2RhbC5wcm90b3R5cGUuJG9uRGVzdHJveSA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICB0aGlzLl91bndhdGNoKCk7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2NsdWRlcyBjb250ZW50cyBhbmQgc2hvd3MgbW9kYWwuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCByZW5kZXJcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIE1vZGFsLnByb3RvdHlwZS50cmFuc2NsdWRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1lID0gdGhpcztcblxuICAgIHZhciB0cmFuc2NsdWRlID0gZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gICAgICAvLyBzYXZlIGVsZW1lbnQgYW5kIHNjb3BlXG4gICAgICBtZS5fZWxlbWVudCA9IGNsb25lO1xuICAgICAgbWUuX3Njb3BlID0gc2NvcGU7XG5cbiAgICAgIC8vIHJlZ2lzdGVyIFVJS2l0IGxpc3RlbmVyc1xuICAgICAgbWUuX2VsZW1lbnQub24oJ3Nob3cnLCBtZS5fb25TaG93KTtcbiAgICAgIG1lLl9lbGVtZW50Lm9uKCdzaG93bicsIG1lLl9vblNob3duKTtcbiAgICAgIG1lLl9lbGVtZW50Lm9uKCdiZWZvcmVzaG93JywgbWUuX29uQmVmb3JlU2hvdyk7XG5cbiAgICAgIG1lLl9lbGVtZW50Lm9uKCdoaWRlJywgbWUuX29uSGlkZSk7XG4gICAgICBtZS5fZWxlbWVudC5vbignaGlkZGVuJywgbWUuX29uSGlkZGVuKTtcbiAgICAgIG1lLl9lbGVtZW50Lm9uKCdiZWZvcmVIaWRlJywgbWUuX29uQmVmb3JlSGlkZSk7XG5cbiAgICAgIC8vIHJlcGxhY2Ugd2l0aCBhY3R1YWwgZWxlbWVudFxuICAgICAgbWUuJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcblxuICAgICAgLy8gY3JlYXRlIGFuZCBzaG93IHRoZSBtb2RhbFxuICAgICAgbWUuX21vZGFsID0gVUlraXQubW9kYWwoY2xvbmUpO1xuICAgICAgbWUuX21vZGFsLnNob3coKTtcbiAgICB9O1xuXG4gICAgdGhpcy4kdHJhbnNjbHVkZSh0cmFuc2NsdWRlKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJ1Y3RzIGN1cnJlbnQgbW9kYWwgdHJhbnNjbHVzaW9uIGZyb20gRE9NLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uRGVzdHJveVxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgTW9kYWwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fZWxlbWVudC5vZmYoJ3Nob3cnLCB0aGlzLl9vblNob3cpO1xuICAgICAgdGhpcy5fZWxlbWVudC5vZmYoJ3Nob3duJywgdGhpcy5fb25TaG93bik7XG4gICAgICB0aGlzLl9lbGVtZW50Lm9mZignYmVmb3Jlc2hvdycsIHRoaXMuX29uQmVmb3JlU2hvdyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQub2ZmKCdoaWRlJywgdGhpcy5fb25IaWRlKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQub2ZmKCdoaWRkZW4nLCB0aGlzLl9vbkhpZGRlbik7XG4gICAgICB0aGlzLl9lbGVtZW50Lm9mZignYmVmb3JlSGlkZScsIHRoaXMuX29uQmVmb3JlSGlkZSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2NvcGUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Njb3BlLiRkZXN0cm95KCk7XG4gICAgICB0aGlzLl9zY29wZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21vZGFsICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2RhbC5oaWRlKCk7XG4gICAgICB0aGlzLl9tb2RhbCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuZGlyZWN0aXZlKCdtb2RhbCcsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGlzVmlzaWJsZTogJz0/bW9kYWwnLFxuICAgICAgICBvblNob3c6JyZtb2RhbE9uU2hvdycsXG4gICAgICAgIG9uSGlkZTonJm1vZGFsT25IaWRlJyxcbiAgICAgICAgb25TaG93bjonJm1vZGFsT25TaG93bicsXG4gICAgICAgIG9uSGlkZGVuOicmbW9kYWxPbkhpZGRlbicsXG4gICAgICAgIG9uQmVmb3JlU2hvdzonJm1vZGFsT25CZWZvcmVTaG93JyxcbiAgICAgICAgb25CZWZvcmVIaWRlOicmbW9kYWxPbkJlZm9yZUhpZGUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIGNvbnRyb2xsZXI6IE1vZGFsLFxuICAgICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ21vZGFsQ29udHJvbGxlcidcbiAgICB9O1xuICB9KTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
