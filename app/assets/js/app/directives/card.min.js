/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  // --------------------------------------------------
  // Card
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var CardContainer = function() {
  };

  CardContainer.$inject = ['$scope', '$element', '$attrs'];

  //
  // PROPERTIES
  //

  /** @var {array} cards Stack of registered cards. */
  CardContainer.prototype.cards = [];

  /** @var {boolean} canToggle If cards can be toggled. */
  CardContainer.prototype.canToggle = false;

  //
  // METHODS
  //

  /**
   * Adds a `card` directive to stack.
   *
   * @public
   * @method click
   * @return {Void}
   */
  CardContainer.prototype.add = function(card) {
    this.cards.push(card);
  };

  /**
   * Toggles card state if `canToggle` is true.
   *
   * @public
   * @method set
   * @return {boolean}
   */
  CardContainer.prototype.set = function(card) {
    if (card.selected && !this.canToggle) {
      return false;
    }

    // toggle current card's state
    var selected = !!card.selected;
    card.selected = selected ? null : true;

    // reset all other card states
    angular.forEach(this.cards, function(current) {
      if (current.id === card.id) {
        return;
      }

      current.selected = card.selected ? false : null;
    });

    return true;
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('cardContainer', function(){
    return {
      scope: {
        canToggle: '=?cardContainerCanToggle'
      },
      restrict: 'A',
      controller: CardContainer,
      bindToController: true,
      controllerAs: 'cardContainerController'
    };
  });

  // --------------------------------------------------
  // Card
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var Card = function($scope, $element, $attrs, $transclude) {
    this.$scope = $scope;
    this.$attrs = $attrs;
    this.$element = $element;

    this.id = this.$scope.$id;
    this.hasIcon = $transclude.isSlotFilled('icon');
  };

  Card.$inject = ['$scope', '$element', '$attrs', '$transclude'];

  //
  // PROPERTIES
  //

  /** @var {number} id Unique id of card. */
  Card.prototype.id = null;

  /** @var {mixed} data Passthrough data of card. */
  Card.prototype.data = null;

  /** @var {boolean} selected If card is selected. */
  Card.prototype.selected = null;

  /** @var {boolean} disabled If card is disabled. */
  Card.prototype.disabled = null;

  /** @var {boolean} hasIcon If card has `icon` slot filled. */
  Card.prototype.hasIcon = null;

  /** @var {boolean} isCheckbox If card should behave as checkbox. */
  Card.prototype.isCheckbox = false;

  //
  // METHODS
  //

  /**
   * Invokes the `cardOnClick` callback.
   *
   * @public
   * @method $onInit
   * @return {Void}
   */
  Card.prototype.$onInit = function() {
    if (!this.cardContainer) {
      return;
    }

    this.cardContainer.add(this);
  };

  /**
   * Invokes the `cardOnClick` callback.
   *
   * @public
   * @method click
   * @return {Void}
   */
  Card.prototype.click = function($event) {
    if (this.disabled) {
      return;
    }

    $event.stopPropagation();
    $event.preventDefault();

    if (this.cardContainer) {
      var changed = this.cardContainer.set(this);
      if (!changed) {
        return;
      }
    }

    this.onClick({
      data: this.data,
      selected: this.selected,
      disabled: this.disabled
    });
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('card', function(){
    return {
      scope: {
        data: '=?cardData',
        onClick: '&cardOnClick',
        selected: '=?cardSelected',
        disabled: '=?cardDisabled',
        isCheckbox: '=?cardIsCheckbox'
      },
      restrict: 'A',
      transclude: {
        text: 'cardText',
        title: 'cardTitle',
        icon: '?cardIcon',
        buttons: '?cardButtons'
      },
      controller: Card,
      bindToController: true,
      controllerAs: 'cardController',
      require:{
        cardContainer: '^?cardContainer',
      },
      templateUrl: 'views/directives/card.html'
    };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL2NhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvZGlyZWN0aXZlcy9jYXJkLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ2FyZFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgQ2FyZENvbnRhaW5lciA9IGZ1bmN0aW9uKCkge1xuICB9O1xuXG4gIENhcmRDb250YWluZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycyddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvKiogQHZhciB7YXJyYXl9IGNhcmRzIFN0YWNrIG9mIHJlZ2lzdGVyZWQgY2FyZHMuICovXG4gIENhcmRDb250YWluZXIucHJvdG90eXBlLmNhcmRzID0gW107XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IGNhblRvZ2dsZSBJZiBjYXJkcyBjYW4gYmUgdG9nZ2xlZC4gKi9cbiAgQ2FyZENvbnRhaW5lci5wcm90b3R5cGUuY2FuVG9nZ2xlID0gZmFsc2U7XG5cbiAgLy9cbiAgLy8gTUVUSE9EU1xuICAvL1xuXG4gIC8qKlxuICAgKiBBZGRzIGEgYGNhcmRgIGRpcmVjdGl2ZSB0byBzdGFjay5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGNsaWNrXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBDYXJkQ29udGFpbmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjYXJkKSB7XG4gICAgdGhpcy5jYXJkcy5wdXNoKGNhcmQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUb2dnbGVzIGNhcmQgc3RhdGUgaWYgYGNhblRvZ2dsZWAgaXMgdHJ1ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHNldFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgQ2FyZENvbnRhaW5lci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oY2FyZCkge1xuICAgIGlmIChjYXJkLnNlbGVjdGVkICYmICF0aGlzLmNhblRvZ2dsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHRvZ2dsZSBjdXJyZW50IGNhcmQncyBzdGF0ZVxuICAgIHZhciBzZWxlY3RlZCA9ICEhY2FyZC5zZWxlY3RlZDtcbiAgICBjYXJkLnNlbGVjdGVkID0gc2VsZWN0ZWQgPyBudWxsIDogdHJ1ZTtcblxuICAgIC8vIHJlc2V0IGFsbCBvdGhlciBjYXJkIHN0YXRlc1xuICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmNhcmRzLCBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICBpZiAoY3VycmVudC5pZCA9PT0gY2FyZC5pZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQuc2VsZWN0ZWQgPSBjYXJkLnNlbGVjdGVkID8gZmFsc2UgOiBudWxsO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gUkVHSVNUUllcbiAgLy9cbiAgYW5ndWxhci5tb2R1bGUobW9kdWxlKS5kaXJlY3RpdmUoJ2NhcmRDb250YWluZXInLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBjYW5Ub2dnbGU6ICc9P2NhcmRDb250YWluZXJDYW5Ub2dnbGUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIGNvbnRyb2xsZXI6IENhcmRDb250YWluZXIsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlckFzOiAnY2FyZENvbnRhaW5lckNvbnRyb2xsZXInXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ2FyZFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgQ2FyZCA9IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHRyYW5zY2x1ZGUpIHtcbiAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG5cbiAgICB0aGlzLmlkID0gdGhpcy4kc2NvcGUuJGlkO1xuICAgIHRoaXMuaGFzSWNvbiA9ICR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZCgnaWNvbicpO1xuICB9O1xuXG4gIENhcmQuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckdHJhbnNjbHVkZSddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvKiogQHZhciB7bnVtYmVyfSBpZCBVbmlxdWUgaWQgb2YgY2FyZC4gKi9cbiAgQ2FyZC5wcm90b3R5cGUuaWQgPSBudWxsO1xuXG4gIC8qKiBAdmFyIHttaXhlZH0gZGF0YSBQYXNzdGhyb3VnaCBkYXRhIG9mIGNhcmQuICovXG4gIENhcmQucHJvdG90eXBlLmRhdGEgPSBudWxsO1xuXG4gIC8qKiBAdmFyIHtib29sZWFufSBzZWxlY3RlZCBJZiBjYXJkIGlzIHNlbGVjdGVkLiAqL1xuICBDYXJkLnByb3RvdHlwZS5zZWxlY3RlZCA9IG51bGw7XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IGRpc2FibGVkIElmIGNhcmQgaXMgZGlzYWJsZWQuICovXG4gIENhcmQucHJvdG90eXBlLmRpc2FibGVkID0gbnVsbDtcblxuICAvKiogQHZhciB7Ym9vbGVhbn0gaGFzSWNvbiBJZiBjYXJkIGhhcyBgaWNvbmAgc2xvdCBmaWxsZWQuICovXG4gIENhcmQucHJvdG90eXBlLmhhc0ljb24gPSBudWxsO1xuXG4gIC8qKiBAdmFyIHtib29sZWFufSBpc0NoZWNrYm94IElmIGNhcmQgc2hvdWxkIGJlaGF2ZSBhcyBjaGVja2JveC4gKi9cbiAgQ2FyZC5wcm90b3R5cGUuaXNDaGVja2JveCA9IGZhbHNlO1xuXG4gIC8vXG4gIC8vIE1FVEhPRFNcbiAgLy9cblxuICAvKipcbiAgICogSW52b2tlcyB0aGUgYGNhcmRPbkNsaWNrYCBjYWxsYmFjay5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kICRvbkluaXRcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIENhcmQucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuY2FyZENvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2FyZENvbnRhaW5lci5hZGQodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZXMgdGhlIGBjYXJkT25DbGlja2AgY2FsbGJhY2suXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBjbGlja1xuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgQ2FyZC5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICh0aGlzLmNhcmRDb250YWluZXIpIHtcbiAgICAgIHZhciBjaGFuZ2VkID0gdGhpcy5jYXJkQ29udGFpbmVyLnNldCh0aGlzKTtcbiAgICAgIGlmICghY2hhbmdlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vbkNsaWNrKHtcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIHNlbGVjdGVkOiB0aGlzLnNlbGVjdGVkLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWRcbiAgICB9KTtcbiAgfTtcblxuICAvL1xuICAvLyBSRUdJU1RSWVxuICAvL1xuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmRpcmVjdGl2ZSgnY2FyZCcsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGRhdGE6ICc9P2NhcmREYXRhJyxcbiAgICAgICAgb25DbGljazogJyZjYXJkT25DbGljaycsXG4gICAgICAgIHNlbGVjdGVkOiAnPT9jYXJkU2VsZWN0ZWQnLFxuICAgICAgICBkaXNhYmxlZDogJz0/Y2FyZERpc2FibGVkJyxcbiAgICAgICAgaXNDaGVja2JveDogJz0/Y2FyZElzQ2hlY2tib3gnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHtcbiAgICAgICAgdGV4dDogJ2NhcmRUZXh0JyxcbiAgICAgICAgdGl0bGU6ICdjYXJkVGl0bGUnLFxuICAgICAgICBpY29uOiAnP2NhcmRJY29uJyxcbiAgICAgICAgYnV0dG9uczogJz9jYXJkQnV0dG9ucydcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBDYXJkLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2NhcmRDb250cm9sbGVyJyxcbiAgICAgIHJlcXVpcmU6e1xuICAgICAgICBjYXJkQ29udGFpbmVyOiAnXj9jYXJkQ29udGFpbmVyJyxcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FyZC5odG1sJ1xuICAgIH07XG4gIH0pO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
