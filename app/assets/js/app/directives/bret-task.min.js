/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t,o){"use strict";var i=function(t,o,i,e,s,r){this.$interval=s,this.$element=i,this.$filter=e,this.$attrs=o,this.$scope=t,this.random=r};i.$inject=["$scope","$attrs","$element","$filter","$interval","random"],i.prototype.avg=12,i.prototype.rows=5,i.prototype.cols=5,i.prototype.interval=1,i.prototype.random=!1,i.prototype.dynamic=!1,i.prototype.totalBoxes=0,i.prototype.stopped=!1,i.prototype.started=!1,i.prototype.hasBomb=!1,i.prototype.resolved=!1,i.prototype.remainingBoxes=0,i.prototype.collectedBoxes=0,i.prototype.$onInit=function(){this.init()},i.prototype.init=function(){this._initInternals(),this._initMatrix(),this._initBomb(),this._desist(),this.dynamic||this.start()},i.prototype.reset=function(){this._removeState(),this.init()},i.prototype.start=function(t){if(this.dynamic){var o=this,i=this.iterator.length;this._intIndex=t||0,this._intervalId=o.$interval(function(){var t=o.iterator[o._intIndex];o.update(t,!0),o._intIndex++,o._intIndex===i&&o.stop()},1e3*this.interval,i-this._intIndex)}this.started=!0,this._persist()},i.prototype.stop=function(){this.dynamic&&this._intervalId&&this.$interval.cancel(this._intervalId),this.stopped=!0,this._persist()},i.prototype.resolve=function(){for(var t=0;t<this.collection.length;t++)this.collection[t].$$resolved=!0;this.resolved=!0,this.onResolve(),this._persist()},i.prototype.update=function(t,o){var i=this.collection.indexOf(t);o?(i<0&&(this.collection.push(t),this.collectedBoxes++),t.$$active=!0):i>=0&&(this.collection.splice(i,1),t.$$active=!1,this.collectedBoxes--),this.isBomb(t)&&(this.hasBomb=!0);var e=this.totalBoxes,s=this.collectedBoxes;this.remainingBoxes=e-s,this._persist()},i.prototype.trackId=function(t){return t.row+"_"+t.col},i.prototype.isBomb=function(t){return o.equals(this.bomb,t)},i.prototype._getColumn=function(t){var o=t.row-1,i=t.col-1;return this.matrix[o][i]},i.prototype._getState=function(){return null},i.prototype._setState=function(){},i.prototype._removeState=function(){},i.prototype._persist=function(){},i.prototype._desist=function(){},i.prototype._initInternals=function(){this.collection=[],this.hasBomb=!1,this.started=!1,this.stopped=!1,this.resolved=!1,this.collectedBoxes=0,this.remainingBoxes=0,this.totalBoxes=this.rows*this.cols},i.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var o=[],i=0;i<this.cols;i++){var e={row:t+1,col:i+1};o.push(e),this.dynamic&&(this.random?this.random.push(this.iterator,e):this.iterator.push(e))}this.matrix.push(o)}},i.prototype._initBomb=function(){var t=this.random.between(0,this.rows-1),o=this.random.between(0,this.cols-1);this.bomb=this.matrix[t][o]},o.module(t).directive("bombTask",function(){return{scope:{avg:"=?bombTaskAvg",rows:"=?bombTaskRows",cols:"=?bombTaskCols",random:"=?bombTaskRandom",dynamic:"=?bombTaskDynamic",interval:"=?bombTaskInterval",onResolve:"&bombTaskOnResolve"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"bombTaskController",templateUrl:"views/directives/bomb-task.html"}});var e=function(){};e.prototype.model=null,e.prototype.isActive=!1,e.prototype.isDisabled=!1,e.prototype.isClickable=!0,e.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},o.module(t).directive("bombTaskCard",function(){return{scope:{model:"=bombTaskCard",onToggle:"&bombTaskCardOnToggle",isActive:"=?bombTaskCardIsActive",isDisabled:"=?bombTaskCardIsDisabled",isClickable:"=?bombTaskCardIsClickable"},restrict:"A",transclude:!0,controller:e,bindToController:!0,controllerAs:"bombTaskCardController",templateUrl:"views/directives/bomb-task-card.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL2JyZXQtdGFzay5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJhbmd1bGFyIiwiQm9tYlRhc2siLCIkc2NvcGUiLCIkYXR0cnMiLCIkZWxlbWVudCIsIiRmaWx0ZXIiLCIkaW50ZXJ2YWwiLCJyYW5kb20iLCJ0aGlzIiwiJGluamVjdCIsInByb3RvdHlwZSIsImF2ZyIsInJvd3MiLCJjb2xzIiwiaW50ZXJ2YWwiLCJkeW5hbWljIiwidG90YWxCb3hlcyIsInN0b3BwZWQiLCJzdGFydGVkIiwiaGFzQm9tYiIsInJlc29sdmVkIiwicmVtYWluaW5nQm94ZXMiLCJjb2xsZWN0ZWRCb3hlcyIsIiRvbkluaXQiLCJpbml0IiwiX2luaXRJbnRlcm5hbHMiLCJfaW5pdE1hdHJpeCIsIl9pbml0Qm9tYiIsIl9kZXNpc3QiLCJzdGFydCIsInJlc2V0IiwiX3JlbW92ZVN0YXRlIiwiaW5kZXgiLCJtZSIsIm1heCIsIml0ZXJhdG9yIiwibGVuZ3RoIiwiX2ludEluZGV4IiwiX2ludGVydmFsSWQiLCJpdGVtIiwidXBkYXRlIiwic3RvcCIsIl9wZXJzaXN0IiwiY2FuY2VsIiwicmVzb2x2ZSIsImkiLCJjb2xsZWN0aW9uIiwiJCRyZXNvbHZlZCIsIm9uUmVzb2x2ZSIsImNvbHVtbiIsImFjdGl2ZSIsImluZGV4T2YiLCJwdXNoIiwiJCRhY3RpdmUiLCJzcGxpY2UiLCJpc0JvbWIiLCJ0b3RhbCIsImNvbGxlY3RlZCIsInRyYWNrSWQiLCJyb3ciLCJjb2wiLCJlcXVhbHMiLCJib21iIiwiX2dldENvbHVtbiIsImRhdGEiLCJtYXRyaXgiLCJfZ2V0U3RhdGUiLCJfc2V0U3RhdGUiLCJjb2x1bW5zIiwiaiIsImJldHdlZW4iLCJkaXJlY3RpdmUiLCJzY29wZSIsInJlc3RyaWN0IiwidHJhbnNjbHVkZSIsImNvbnRyb2xsZXIiLCJiaW5kVG9Db250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJCb21iVGFza0NhcmQiLCJtb2RlbCIsImlzQWN0aXZlIiwiaXNEaXNhYmxlZCIsImlzQ2xpY2thYmxlIiwidG9nZ2xlIiwib25Ub2dnbGUiLCJzdGF0ZSIsIkFOR1VMQVJfTU9EVUxFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztDQVNBLFNBQVVBLEVBQVFDLEdBQ2hCLFlBT0EsSUFBSUMsR0FBVyxTQUFTQyxFQUFRQyxFQUFRQyxFQUFVQyxFQUFTQyxFQUFXQyxHQUdwRUMsS0FBS0YsVUFBWUEsRUFDakJFLEtBQUtKLFNBQVdBLEVBQ2hCSSxLQUFLSCxRQUFVQSxFQUNmRyxLQUFLTCxPQUFTQSxFQUNkSyxLQUFLTixPQUFTQSxFQUVkTSxLQUFLRCxPQUFTQSxFQUdoQk4sR0FBU1EsU0FBVyxTQUFVLFNBQVUsV0FBWSxVQUFXLFlBQWEsVUFFNUVSLEVBQVNTLFVBQVVDLElBQU0sR0FDekJWLEVBQVNTLFVBQVVFLEtBQU8sRUFDMUJYLEVBQVNTLFVBQVVHLEtBQU8sRUFDMUJaLEVBQVNTLFVBQVVJLFNBQVcsRUFDOUJiLEVBQVNTLFVBQVVILFFBQVMsRUFDNUJOLEVBQVNTLFVBQVVLLFNBQVUsRUFFN0JkLEVBQVNTLFVBQVVNLFdBQWEsRUFDaENmLEVBQVNTLFVBQVVPLFNBQVUsRUFDN0JoQixFQUFTUyxVQUFVUSxTQUFVLEVBQzdCakIsRUFBU1MsVUFBVVMsU0FBVSxFQUM3QmxCLEVBQVNTLFVBQVVVLFVBQVcsRUFDOUJuQixFQUFTUyxVQUFVVyxlQUFpQixFQUNwQ3BCLEVBQVNTLFVBQVVZLGVBQWlCLEVBRXBDckIsRUFBU1MsVUFBVWEsUUFBVSxXQUMzQmYsS0FBS2dCLFFBR1B2QixFQUFTUyxVQUFVYyxLQUFPLFdBQ3hCaEIsS0FBS2lCLGlCQUNMakIsS0FBS2tCLGNBQ0xsQixLQUFLbUIsWUFFTG5CLEtBQUtvQixVQUVBcEIsS0FBS08sU0FDUlAsS0FBS3FCLFNBSVQ1QixFQUFTUyxVQUFVb0IsTUFBUSxXQUN6QnRCLEtBQUt1QixlQUVMdkIsS0FBS2dCLFFBR1B2QixFQUFTUyxVQUFVbUIsTUFBUSxTQUFTRyxHQUNsQyxHQUFJeEIsS0FBS08sUUFBUyxDQUNoQixHQUFJa0IsR0FBS3pCLEtBQ0wwQixFQUFNMUIsS0FBSzJCLFNBQVNDLE1BRXhCNUIsTUFBSzZCLFVBQVlMLEdBQVMsRUFDMUJ4QixLQUFLOEIsWUFBY0wsRUFBRzNCLFVBQ3BCLFdBRUUsR0FBSWlDLEdBQU9OLEVBQUdFLFNBQVNGLEVBQUdJLFVBQzFCSixHQUFHTyxPQUFPRCxHQUFLLEdBRWZOLEVBQUdJLFlBQ0NKLEVBQUdJLFlBQVlILEdBQ2pCRCxFQUFHUSxRQUlPLElBQWRqQyxLQUFLTSxTQUNMb0IsRUFBTTFCLEtBQUs2QixXQUlmN0IsS0FBS1UsU0FBVSxFQUNmVixLQUFLa0MsWUFHUHpDLEVBQVNTLFVBQVUrQixLQUFPLFdBQ3BCakMsS0FBS08sU0FBV1AsS0FBSzhCLGFBQ3ZCOUIsS0FBS0YsVUFBVXFDLE9BQU9uQyxLQUFLOEIsYUFHN0I5QixLQUFLUyxTQUFVLEVBQ2ZULEtBQUtrQyxZQUdQekMsRUFBU1MsVUFBVWtDLFFBQVUsV0FDM0IsSUFBSyxHQUFJQyxHQUFFLEVBQUdBLEVBQUVyQyxLQUFLc0MsV0FBV1YsT0FBUVMsSUFDdENyQyxLQUFLc0MsV0FBV0QsR0FBR0UsWUFBYSxDQUdsQ3ZDLE1BQUtZLFVBQVcsRUFDaEJaLEtBQUt3QyxZQUNMeEMsS0FBS2tDLFlBR1B6QyxFQUFTUyxVQUFVOEIsT0FBUyxTQUFTUyxFQUFRQyxHQUMzQyxHQUFJbEIsR0FBUXhCLEtBQUtzQyxXQUFXSyxRQUFRRixFQUVoQ0MsSUFDRWxCLEVBQU0sSUFDUnhCLEtBQUtzQyxXQUFXTSxLQUFLSCxHQUNyQnpDLEtBQUtjLGtCQUdQMkIsRUFBT0ksVUFBVyxHQUVkckIsR0FBTyxJQUNUeEIsS0FBS3NDLFdBQVdRLE9BQU90QixFQUFNLEdBQzdCaUIsRUFBT0ksVUFBVyxFQUNsQjdDLEtBQUtjLGtCQUlMZCxLQUFLK0MsT0FBT04sS0FDZHpDLEtBQUtXLFNBQVUsRUFHakIsSUFBSXFDLEdBQVFoRCxLQUFLUSxXQUNieUMsRUFBWWpELEtBQUtjLGNBQ3JCZCxNQUFLYSxlQUFpQm1DLEVBQVFDLEVBRTlCakQsS0FBS2tDLFlBR1B6QyxFQUFTUyxVQUFVZ0QsUUFBVSxTQUFTVCxHQUNwQyxNQUFPQSxHQUFPVSxJQUFNLElBQU1WLEVBQU9XLEtBR25DM0QsRUFBU1MsVUFBVTZDLE9BQVMsU0FBU04sR0FDbkMsTUFBT2pELEdBQVE2RCxPQUFPckQsS0FBS3NELEtBQUtiLElBR2xDaEQsRUFBU1MsVUFBVXFELFdBQWEsU0FBU0MsR0FDdkMsR0FBSUwsR0FBTUssRUFBS0wsSUFBTSxFQUNqQkMsRUFBTUksRUFBS0osSUFBTSxDQUVyQixPQUFPcEQsTUFBS3lELE9BQU9OLEdBQUtDLElBRzFCM0QsRUFBU1MsVUFBVXdELFVBQVksV0FPN0IsTUFBTyxPQUdUakUsRUFBU1MsVUFBVXlELFVBQVksYUFRL0JsRSxFQUFTUyxVQUFVcUIsYUFBZSxhQVFsQzlCLEVBQVNTLFVBQVVnQyxTQUFXLGFBb0I5QnpDLEVBQVNTLFVBQVVrQixRQUFVLGFBOEM3QjNCLEVBQVNTLFVBQVVlLGVBQWlCLFdBQ2xDakIsS0FBS3NDLGNBRUx0QyxLQUFLVyxTQUFVLEVBQ2ZYLEtBQUtVLFNBQVUsRUFDZlYsS0FBS1MsU0FBVSxFQUNmVCxLQUFLWSxVQUFXLEVBRWhCWixLQUFLYyxlQUFpQixFQUN0QmQsS0FBS2EsZUFBaUIsRUFDdEJiLEtBQUtRLFdBQWFSLEtBQUtJLEtBQU9KLEtBQUtLLE1BR3JDWixFQUFTUyxVQUFVZ0IsWUFBYyxXQUMvQmxCLEtBQUt5RCxVQUNMekQsS0FBSzJCLFdBRUwsS0FBSyxHQUFJVSxHQUFFLEVBQUdBLEVBQUVyQyxLQUFLSSxLQUFNaUMsSUFBSyxDQUc5QixJQUFLLEdBRER1QixNQUNLQyxFQUFFLEVBQUdBLEVBQUU3RCxLQUFLSyxLQUFNd0QsSUFBTSxDQUMvQixHQUFJTCxJQUNGTCxJQUFLZCxFQUFFLEVBQ1BlLElBQUtTLEVBQUUsRUFHVEQsR0FBUWhCLEtBQUtZLEdBRVR4RCxLQUFLTyxVQUNGUCxLQUFLRCxPQUdSQyxLQUFLRCxPQUFPNkMsS0FBSzVDLEtBQUsyQixTQUFTNkIsR0FGL0J4RCxLQUFLMkIsU0FBU2lCLEtBQUtZLElBT3pCeEQsS0FBS3lELE9BQU9iLEtBQUtnQixLQUlyQm5FLEVBQVNTLFVBQVVpQixVQUFZLFdBQzdCLEdBQUlnQyxHQUFNbkQsS0FBS0QsT0FBTytELFFBQVEsRUFBRTlELEtBQUtJLEtBQUssR0FDdENnRCxFQUFNcEQsS0FBS0QsT0FBTytELFFBQVEsRUFBRTlELEtBQUtLLEtBQUssRUFFMUNMLE1BQUtzRCxLQUFPdEQsS0FBS3lELE9BQU9OLEdBQUtDLElBSS9CNUQsRUFBUUQsT0FBT0EsR0FBUXdFLFVBQVUsV0FBVyxXQUMxQyxPQUNFQyxPQUNFN0QsSUFBSyxnQkFDTEMsS0FBTSxpQkFDTkMsS0FBTSxpQkFDTk4sT0FBUSxtQkFDUlEsUUFBUyxvQkFDVEQsU0FBVSxxQkFDVmtDLFVBQVcsc0JBRWJ5QixTQUFVLElBQ1ZDLFlBQVksRUFDWkMsV0FBWTFFLEVBQ1oyRSxrQkFBa0IsRUFDbEJDLGFBQWMscUJBQ2RDLFlBQWEsb0NBU2pCLElBQUlDLEdBQWUsWUFHbkJBLEdBQWFyRSxVQUFVc0UsTUFBUSxLQUUvQkQsRUFBYXJFLFVBQVV1RSxVQUFXLEVBRWxDRixFQUFhckUsVUFBVXdFLFlBQWEsRUFFcENILEVBQWFyRSxVQUFVeUUsYUFBYyxFQUVyQ0osRUFBYXJFLFVBQVUwRSxPQUFTLFlBQzFCNUUsS0FBSzBFLFlBQWUxRSxLQUFLMkUsY0FJN0IzRSxLQUFLeUUsVUFBWXpFLEtBQUt5RSxTQUV0QnpFLEtBQUs2RSxVQUNITCxNQUFNeEUsS0FBS3dFLE1BQ1hNLE1BQU05RSxLQUFLeUUsYUFLZmpGLEVBQVFELE9BQU9BLEdBQVF3RSxVQUFVLGVBQWdCLFdBQy9DLE9BQ0VDLE9BQ0VRLE1BQU0sZ0JBQ05LLFNBQVMsd0JBQ1RKLFNBQVMseUJBQ1RDLFdBQVcsMkJBQ1hDLFlBQVksNkJBRWRWLFNBQVUsSUFDVkMsWUFBWSxFQUNaQyxXQUFZSSxFQUNaSCxrQkFBa0IsRUFDbEJDLGFBQWMseUJBQ2RDLFlBQWEsMkNBSWhCUyxlQUFnQnZGIiwiZmlsZSI6ImFwcC9kaXJlY3RpdmVzL2JyZXQtdGFzay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIgKi9cbihmdW5jdGlvbihtb2R1bGUsIGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEJvbWJUYXNrXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gY29udHJvbGxlclxuICB2YXIgQm9tYlRhc2sgPSBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgJGVsZW1lbnQsICRmaWx0ZXIsICRpbnRlcnZhbCwgcmFuZG9tKSB7XG4gICAgLy8gdGhpcy5fc3RvcmFnZUtleSA9ICdib21iX3Rhc2tfc3RhdGUnO1xuXG4gICAgdGhpcy4kaW50ZXJ2YWwgPSAkaW50ZXJ2YWw7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG5cbiAgICB0aGlzLnJhbmRvbSA9IHJhbmRvbTtcbiAgfTtcblxuICBCb21iVGFzay4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRmaWx0ZXInLCAnJGludGVydmFsJywgJ3JhbmRvbSddO1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5hdmcgPSAxMjtcbiAgQm9tYlRhc2sucHJvdG90eXBlLnJvd3MgPSA1O1xuICBCb21iVGFzay5wcm90b3R5cGUuY29scyA9IDU7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5pbnRlcnZhbCA9IDE7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yYW5kb20gPSBmYWxzZTtcbiAgQm9tYlRhc2sucHJvdG90eXBlLmR5bmFtaWMgPSBmYWxzZTtcblxuICBCb21iVGFzay5wcm90b3R5cGUudG90YWxCb3hlcyA9IDA7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5zdG9wcGVkID0gZmFsc2U7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5zdGFydGVkID0gZmFsc2U7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5oYXNCb21iID0gZmFsc2U7XG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yZXNvbHZlZCA9IGZhbHNlO1xuICBCb21iVGFzay5wcm90b3R5cGUucmVtYWluaW5nQm94ZXMgPSAwO1xuICBCb21iVGFzay5wcm90b3R5cGUuY29sbGVjdGVkQm94ZXMgPSAwO1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG5cbiAgQm9tYlRhc2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9pbml0SW50ZXJuYWxzKCk7XG4gICAgdGhpcy5faW5pdE1hdHJpeCgpO1xuICAgIHRoaXMuX2luaXRCb21iKCk7XG5cbiAgICB0aGlzLl9kZXNpc3QoKTtcblxuICAgIGlmICghdGhpcy5keW5hbWljKSB7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3JlbW92ZVN0YXRlKCk7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICBCb21iVGFzay5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICB2YXIgbWF4ID0gdGhpcy5pdGVyYXRvci5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX2ludEluZGV4ID0gaW5kZXggfHwgMDtcbiAgICAgIHRoaXMuX2ludGVydmFsSWQgPSBtZS4kaW50ZXJ2YWwoXG4gICAgICAgIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICB2YXIgaXRlbSA9IG1lLml0ZXJhdG9yW21lLl9pbnRJbmRleF07XG4gICAgICAgICAgbWUudXBkYXRlKGl0ZW0sdHJ1ZSk7XG5cbiAgICAgICAgICBtZS5faW50SW5kZXgrKztcbiAgICAgICAgICBpZiAobWUuX2ludEluZGV4PT09bWF4KSB7XG4gICAgICAgICAgICBtZS5zdG9wKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuaW50ZXJ2YWwqMTAwMCwgLy8gPSBmcm9tIHNlY29uZHNcbiAgICAgICAgbWF4IC0gdGhpcy5faW50SW5kZXggLy8gPSBtYXggaXRlcmF0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgfTtcblxuICBCb21iVGFzay5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmR5bmFtaWMgJiYgdGhpcy5faW50ZXJ2YWxJZCkge1xuICAgICAgdGhpcy4kaW50ZXJ2YWwuY2FuY2VsKHRoaXMuX2ludGVydmFsSWQpO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgdGhpcy5fcGVyc2lzdCgpO1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaT0wOyBpPHRoaXMuY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5jb2xsZWN0aW9uW2ldLiQkcmVzb2x2ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlO1xuICAgIHRoaXMub25SZXNvbHZlKCk7XG4gICAgdGhpcy5fcGVyc2lzdCgpO1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihjb2x1bW4sIGFjdGl2ZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuY29sbGVjdGlvbi5pbmRleE9mKGNvbHVtbik7XG5cbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBpZiAoaW5kZXg8MCnCoHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnB1c2goY29sdW1uKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0ZWRCb3hlcysrO1xuICAgICAgfVxuXG4gICAgICBjb2x1bW4uJCRhY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5kZXg+PTApIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnNwbGljZShpbmRleCwxKTtcbiAgICAgICAgY29sdW1uLiQkYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29sbGVjdGVkQm94ZXMtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0JvbWIoY29sdW1uKSkge1xuICAgICAgdGhpcy5oYXNCb21iID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgdG90YWwgPSB0aGlzLnRvdGFsQm94ZXM7XG4gICAgdmFyIGNvbGxlY3RlZCA9IHRoaXMuY29sbGVjdGVkQm94ZXM7XG4gICAgdGhpcy5yZW1haW5pbmdCb3hlcyA9IHRvdGFsIC0gY29sbGVjdGVkO1xuXG4gICAgdGhpcy5fcGVyc2lzdCgpO1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS50cmFja0lkID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgcmV0dXJuIGNvbHVtbi5yb3cgKyAnXycgKyBjb2x1bW4uY29sO1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5pc0JvbWIgPSBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICByZXR1cm4gYW5ndWxhci5lcXVhbHModGhpcy5ib21iLGNvbHVtbik7XG4gIH07XG5cbiAgQm9tYlRhc2sucHJvdG90eXBlLl9nZXRDb2x1bW4gPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIHJvdyA9IGRhdGEucm93IC0gMTtcbiAgICB2YXIgY29sID0gZGF0YS5jb2wgLSAxO1xuXG4gICAgcmV0dXJuIHRoaXMubWF0cml4W3Jvd11bY29sXTtcbiAgfTtcblxuICBCb21iVGFzay5wcm90b3R5cGUuX2dldFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgLypcbiAgICBpZiAodHlwZW9mIHNlc3Npb25TdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGFuZ3VsYXIuZnJvbUpzb24oc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0aGlzLl9zdG9yYWdlS2V5KSk7XG4gICAgfVxuICAgICovXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBCb21iVGFzay5wcm90b3R5cGUuX3NldFN0YXRlID0gZnVuY3Rpb24oLypkYXRhKi8pIHtcbiAgICAvKlxuICAgIGlmICh0eXBlb2Ygc2Vzc2lvblN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHRoaXMuX3N0b3JhZ2VLZXksYW5ndWxhci50b0pzb24oZGF0YSkpO1xuICAgIH1cbiAgICAqL1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5fcmVtb3ZlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAvKlxuICAgIGlmICh0eXBlb2Ygc2Vzc2lvblN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuX3N0b3JhZ2VLZXkpO1xuICAgIH1cbiAgICAqL1xuICB9O1xuXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5fcGVyc2lzdCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgYm9tYjogdGhpcy5ib21iLFxuICAgICAgc3RhcnRlZDogdGhpcy5zdGFydGVkLFxuICAgICAgc3RvcHBlZDogdGhpcy5zdG9wcGVkLFxuICAgICAgcmVzb2x2ZWQ6IHRoaXMucmVzb2x2ZWQsXG4gICAgICBjb2xsZWN0aW9uOiB0aGlzLmNvbGxlY3Rpb25cbiAgICB9O1xuXG4gICAgaWYoIHRoaXMuZHluYW1pYyApXG4gICAge1xuICAgICAgc3RhdGUuaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yO1xuICAgICAgc3RhdGUuX2ludEluZGV4ID0gdGhpcy5faW50SW5kZXg7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0U3RhdGUoc3RhdGUpO1xuICAgICovXG4gIH07XG5cbiAgQm9tYlRhc2sucHJvdG90eXBlLl9kZXNpc3QgPSBmdW5jdGlvbigpIHtcbiAgICAvKlxuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2dldFN0YXRlKCk7XG4gICAgaWYgKHN0YXRlID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5ib21iID0gdGhpcy5fZ2V0Q29sdW1uKHN0YXRlLmJvbWIpO1xuXG4gICAgdmFyIGNvbHVtbjtcblxuICAgIGlmKCBzdGF0ZS5pdGVyYXRvciApXG4gICAge1xuICAgICAgdGhpcy5pdGVyYXRvciA9IFtdO1xuICAgICAgZm9yKCB2YXIgaT0wO2k8c3RhdGUuaXRlcmF0b3IubGVuZ3RoO2krKyApXG4gICAgICB7XG4gICAgICAgIGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihcbiAgICAgICAgICBzdGF0ZS5pdGVyYXRvcltpXVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuaXRlcmF0b3IucHVzaChjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciggdmFyIGo9MDtqPHN0YXRlLmNvbGxlY3Rpb24ubGVuZ3RoO2orKyApIHtcbiAgICAgIGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihcbiAgICAgICAgc3RhdGUuY29sbGVjdGlvbltqXVxuICAgICAgKTtcblxuICAgICAgdGhpcy51cGRhdGUoY29sdW1uLHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5zdGFydGVkKSB7XG4gICAgICB0aGlzLnN0YXJ0KHN0YXRlLl9pbnRJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnN0b3BwZWQpIHtcbiAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5yZXNvbHZlZCkge1xuICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgfVxuICAgICovXG4gIH07XG5cbiAgQm9tYlRhc2sucHJvdG90eXBlLl9pbml0SW50ZXJuYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb2xsZWN0aW9uID0gW107XG5cbiAgICB0aGlzLmhhc0JvbWIgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmNvbGxlY3RlZEJveGVzID0gMDtcbiAgICB0aGlzLnJlbWFpbmluZ0JveGVzID0gMDtcbiAgICB0aGlzLnRvdGFsQm94ZXMgPSB0aGlzLnJvd3MgKiB0aGlzLmNvbHM7XG4gIH07XG5cbiAgQm9tYlRhc2sucHJvdG90eXBlLl9pbml0TWF0cml4ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tYXRyaXggPSBbXTtcbiAgICB0aGlzLml0ZXJhdG9yID0gW107XG5cbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5yb3dzOyBpKyspIHtcblxuICAgICAgdmFyIGNvbHVtbnMgPSBbXTtcbiAgICAgIGZvciggdmFyIGo9MDsgajx0aGlzLmNvbHM7IGorKyApIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgcm93OiBpKzEsXG4gICAgICAgICAgY29sOiBqKzFcbiAgICAgICAgfTtcblxuICAgICAgICBjb2x1bW5zLnB1c2goZGF0YSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgIGlmICghdGhpcy5yYW5kb20pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlcmF0b3IucHVzaChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yYW5kb20ucHVzaCh0aGlzLml0ZXJhdG9yLGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm1hdHJpeC5wdXNoKGNvbHVtbnMpO1xuICAgIH1cbiAgfTtcblxuICBCb21iVGFzay5wcm90b3R5cGUuX2luaXRCb21iID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJvdyA9IHRoaXMucmFuZG9tLmJldHdlZW4oMCx0aGlzLnJvd3MtMSk7XG4gICAgdmFyIGNvbCA9IHRoaXMucmFuZG9tLmJldHdlZW4oMCx0aGlzLmNvbHMtMSk7XG5cbiAgICB0aGlzLmJvbWIgPSB0aGlzLm1hdHJpeFtyb3ddW2NvbF07XG4gIH07XG5cbiAgLy8gY29udHJvbGxlclxuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmRpcmVjdGl2ZSgnYm9tYlRhc2snLGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGF2ZzogJz0/Ym9tYlRhc2tBdmcnLFxuICAgICAgICByb3dzOiAnPT9ib21iVGFza1Jvd3MnLFxuICAgICAgICBjb2xzOiAnPT9ib21iVGFza0NvbHMnLFxuICAgICAgICByYW5kb206ICc9P2JvbWJUYXNrUmFuZG9tJyxcbiAgICAgICAgZHluYW1pYzogJz0/Ym9tYlRhc2tEeW5hbWljJyxcbiAgICAgICAgaW50ZXJ2YWw6ICc9P2JvbWJUYXNrSW50ZXJ2YWwnLFxuICAgICAgICBvblJlc29sdmU6ICcmYm9tYlRhc2tPblJlc29sdmUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBCb21iVGFzayxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyQXM6ICdib21iVGFza0NvbnRyb2xsZXInLFxuICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2JvbWItdGFzay5odG1sJ1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEJvbWJUYXNrIENhcmRcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBjb250cm9sbGVyXG4gIHZhciBCb21iVGFza0NhcmQgPSBmdW5jdGlvbigpe1xuICB9O1xuXG4gIEJvbWJUYXNrQ2FyZC5wcm90b3R5cGUubW9kZWwgPSBudWxsO1xuXG4gIEJvbWJUYXNrQ2FyZC5wcm90b3R5cGUuaXNBY3RpdmUgPSBmYWxzZTtcblxuICBCb21iVGFza0NhcmQucHJvdG90eXBlLmlzRGlzYWJsZWQgPSBmYWxzZTtcblxuICBCb21iVGFza0NhcmQucHJvdG90eXBlLmlzQ2xpY2thYmxlID0gdHJ1ZTtcblxuICBCb21iVGFza0NhcmQucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQgfHwgIXRoaXMuaXNDbGlja2FibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gIXRoaXMuaXNBY3RpdmU7XG5cbiAgICB0aGlzLm9uVG9nZ2xlKHtcbiAgICAgIG1vZGVsOnRoaXMubW9kZWwsXG4gICAgICBzdGF0ZTp0aGlzLmlzQWN0aXZlXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gcmVnaXN0cnlcbiAgYW5ndWxhci5tb2R1bGUobW9kdWxlKS5kaXJlY3RpdmUoJ2JvbWJUYXNrQ2FyZCcsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG1vZGVsOic9Ym9tYlRhc2tDYXJkJyxcbiAgICAgICAgb25Ub2dnbGU6JyZib21iVGFza0NhcmRPblRvZ2dsZScsXG4gICAgICAgIGlzQWN0aXZlOic9P2JvbWJUYXNrQ2FyZElzQWN0aXZlJyxcbiAgICAgICAgaXNEaXNhYmxlZDonPT9ib21iVGFza0NhcmRJc0Rpc2FibGVkJyxcbiAgICAgICAgaXNDbGlja2FibGU6Jz0/Ym9tYlRhc2tDYXJkSXNDbGlja2FibGUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBCb21iVGFza0NhcmQsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlckFzOiAnYm9tYlRhc2tDYXJkQ29udHJvbGxlcicsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvYm9tYi10YXNrLWNhcmQuaHRtbCdcbiAgICB9O1xuICB9KTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
