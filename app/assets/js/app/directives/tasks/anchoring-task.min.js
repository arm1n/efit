/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  // --------------------------------------------------
  // AnchoringTask
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var AnchoringTask = function($scope, $element, $attrs, $injector) {
    var type = $injector.get('TYPE_ANCHORING');
    var user = $injector.get('user');

    this.$scope = $scope;
    this.$attrs = $attrs;
    this.$element = $element;
    this.$injector = $injector;

    this.task = user.getTaskByType(type);
    this.group = user.getGroupAsString();
  };

  AnchoringTask.$inject = ['$scope','$element','$attrs', '$injector'];

  //
  // PROPERTIES
  //

  // SERVER

  /** @var {object} task Task's resource from server. */
  AnchoringTask.prototype.task = null;

  // GAMEPLAY

  /** @var {number} choice Currently selected user answer. */
  AnchoringTask.prototype.choice = null;

  /** @var {string} group Current user's group assignment. */
  AnchoringTask.prototype.group = false;

  /** @var {boolean} resolved If player has resolved the game. */
  AnchoringTask.prototype.resolved = false;

  //
  // METHODS
  //

  /**
   * Proxies to `init()` if controller's ready.
   * Sets up event source for listening to
   *
   * @public
   * @method $onInit
   * @return {void}
   */
  AnchoringTask.prototype.$onInit = function() {
    this.init();
  };

  /**
   * Retrieves result payload for server.
   *
   * @public
   * @method getPayload
   * @return {object}
   */
  AnchoringTask.prototype.getPayload = function() {
    var user = this.$injector.get('user');

    return {
      task: this.task,
      json: {
        group: user.group,
        choice: this.choice
      }
    };
  };

  /**
   * Whether or not task is currently locked.
   *
   * @public
   * @method isLocked
   * @return {boolean}
   */
  AnchoringTask.prototype.isLocked = function() {
    if (this.task === null) {
      return true;
    }

    return !this.task.isActive;
  };

  /**
   * Whether or not task can be sent to server.
   *
   * @public
   * @method canResolve
   * @return {boolean}
   */
  AnchoringTask.prototype.canResolve = function() {
    var user = this.$injector.get('user');
    if (!user.isUser()) {
      return false;
    }

    if (this.isLocked()) {
      return false;
    }

    if (this.resolved) {
      return false;
    }

    if (!this.choice) {
      return false;
    }

    return true;
  };

  /**
   * Sets up initial state.
   *
   * @public
   * @method init
   * @return {void}
   */
  AnchoringTask.prototype.init = function() {
    this.resolved = false;
  };

  /**
   * Resets initial state.
   *
   * @public
   * @method reset
   * @return {void}
   */
  AnchoringTask.prototype.reset = function(){
    this.init();
  };

  /**
   * Description.
   *
   * @public
   * @method update
   * @param {number} choice
   * @param {number} selected
   * @return {void}
   */
  AnchoringTask.prototype.update = function(choice, selected){
    this.choice = selected ? choice : null;
  };

  /**
   * Sets `resolved` flag. Calls `onResolve`
   * callback with JSON result for consumer.
   *
   * @public
   * @method resolve
   * @return {void}
   */
  AnchoringTask.prototype.resolve = function(){
    var $q = this.$injector.get('$q');


    var result = this.onResolve({
      payload: this.getPayload()
    });

    var me = this;
    var successCallback = function() {
      me.resolved = true;
    };
    var failureCallback = function() {

    };

    var promise = $q.when(result);
    promise.then(
      successCallback,
      failureCallback
    );

    return promise;
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('anchoringTask', function(){
    return {
      scope: {
        onResolve: '&anchoringTaskOnResolve'
      },
      restrict: 'A',
      transclude: true,
      controller: AnchoringTask,
      bindToController: true,
      controllerAs: 'anchoringTaskController',
      templateUrl: 'views/directives/tasks/anchoring-task.html'
    };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL3Rhc2tzL2FuY2hvcmluZy10YXNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvZGlyZWN0aXZlcy90YXNrcy9hbmNob3JpbmctdGFzay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIgKi9cbihmdW5jdGlvbihtb2R1bGUsIGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEFuY2hvcmluZ1Rhc2tcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL1xuICAvLyBDT05UUk9MTEVSXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIEFuY2hvcmluZ1Rhc2sgPSBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRpbmplY3Rvcikge1xuICAgIHZhciB0eXBlID0gJGluamVjdG9yLmdldCgnVFlQRV9BTkNIT1JJTkcnKTtcbiAgICB2YXIgdXNlciA9ICRpbmplY3Rvci5nZXQoJ3VzZXInKTtcblxuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcblxuICAgIHRoaXMudGFzayA9IHVzZXIuZ2V0VGFza0J5VHlwZSh0eXBlKTtcbiAgICB0aGlzLmdyb3VwID0gdXNlci5nZXRHcm91cEFzU3RyaW5nKCk7XG4gIH07XG5cbiAgQW5jaG9yaW5nVGFzay4kaW5qZWN0ID0gWyckc2NvcGUnLCckZWxlbWVudCcsJyRhdHRycycsICckaW5qZWN0b3InXTtcblxuICAvL1xuICAvLyBQUk9QRVJUSUVTXG4gIC8vXG5cbiAgLy8gU0VSVkVSXG5cbiAgLyoqIEB2YXIge29iamVjdH0gdGFzayBUYXNrJ3MgcmVzb3VyY2UgZnJvbSBzZXJ2ZXIuICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLnRhc2sgPSBudWxsO1xuXG4gIC8vIEdBTUVQTEFZXG5cbiAgLyoqIEB2YXIge251bWJlcn0gY2hvaWNlIEN1cnJlbnRseSBzZWxlY3RlZCB1c2VyIGFuc3dlci4gKi9cbiAgQW5jaG9yaW5nVGFzay5wcm90b3R5cGUuY2hvaWNlID0gbnVsbDtcblxuICAvKiogQHZhciB7c3RyaW5nfSBncm91cCBDdXJyZW50IHVzZXIncyBncm91cCBhc3NpZ25tZW50LiAqL1xuICBBbmNob3JpbmdUYXNrLnByb3RvdHlwZS5ncm91cCA9IGZhbHNlO1xuXG4gIC8qKiBAdmFyIHtib29sZWFufSByZXNvbHZlZCBJZiBwbGF5ZXIgaGFzIHJlc29sdmVkIHRoZSBnYW1lLiAqL1xuICBBbmNob3JpbmdUYXNrLnByb3RvdHlwZS5yZXNvbHZlZCA9IGZhbHNlO1xuXG4gIC8vXG4gIC8vIE1FVEhPRFNcbiAgLy9cblxuICAvKipcbiAgICogUHJveGllcyB0byBgaW5pdCgpYCBpZiBjb250cm9sbGVyJ3MgcmVhZHkuXG4gICAqIFNldHMgdXAgZXZlbnQgc291cmNlIGZvciBsaXN0ZW5pbmcgdG9cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kICRvbkluaXRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIHJlc3VsdCBwYXlsb2FkIGZvciBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBnZXRQYXlsb2FkXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLmdldFBheWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlciA9IHRoaXMuJGluamVjdG9yLmdldCgndXNlcicpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRhc2s6IHRoaXMudGFzayxcbiAgICAgIGpzb246IHtcbiAgICAgICAgZ3JvdXA6IHVzZXIuZ3JvdXAsXG4gICAgICAgIGNob2ljZTogdGhpcy5jaG9pY2VcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0YXNrIGlzIGN1cnJlbnRseSBsb2NrZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBpc0xvY2tlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgQW5jaG9yaW5nVGFzay5wcm90b3R5cGUuaXNMb2NrZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50YXNrID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMudGFzay5pc0FjdGl2ZTtcbiAgfTtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGFzayBjYW4gYmUgc2VudCB0byBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBjYW5SZXNvbHZlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBBbmNob3JpbmdUYXNrLnByb3RvdHlwZS5jYW5SZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVzZXIgPSB0aGlzLiRpbmplY3Rvci5nZXQoJ3VzZXInKTtcbiAgICBpZiAoIXVzZXIuaXNVc2VyKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0xvY2tlZCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY2hvaWNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgaW5pdGlhbCBzdGF0ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGluaXRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBpbml0aWFsIHN0YXRlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgcmVzZXRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24uXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNob2ljZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2VsZWN0ZWRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEFuY2hvcmluZ1Rhc2sucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGNob2ljZSwgc2VsZWN0ZWQpe1xuICAgIHRoaXMuY2hvaWNlID0gc2VsZWN0ZWQgPyBjaG9pY2UgOiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGByZXNvbHZlZGAgZmxhZy4gQ2FsbHMgYG9uUmVzb2x2ZWBcbiAgICogY2FsbGJhY2sgd2l0aCBKU09OIHJlc3VsdCBmb3IgY29uc3VtZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCByZXNvbHZlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBBbmNob3JpbmdUYXNrLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgJHEgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRxJyk7XG5cblxuICAgIHZhciByZXN1bHQgPSB0aGlzLm9uUmVzb2x2ZSh7XG4gICAgICBwYXlsb2FkOiB0aGlzLmdldFBheWxvYWQoKVxuICAgIH0pO1xuXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBtZS5yZXNvbHZlZCA9IHRydWU7XG4gICAgfTtcbiAgICB2YXIgZmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICB9O1xuXG4gICAgdmFyIHByb21pc2UgPSAkcS53aGVuKHJlc3VsdCk7XG4gICAgcHJvbWlzZS50aGVuKFxuICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuZGlyZWN0aXZlKCdhbmNob3JpbmdUYXNrJywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgb25SZXNvbHZlOiAnJmFuY2hvcmluZ1Rhc2tPblJlc29sdmUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBBbmNob3JpbmdUYXNrLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2FuY2hvcmluZ1Rhc2tDb250cm9sbGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90YXNrcy9hbmNob3JpbmctdGFzay5odG1sJ1xuICAgIH07XG4gIH0pO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
