/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  // --------------------------------------------------
  // AbstractTask
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var AbstractTask = function($scope, $elemnt, $attrs, $injector) {
    var type = $injector.get('TYPE_XXX');
    var user = $injector.get('user');

    this.$injector = $injector;
    this.task = user.getTaskByType(type);
  };

  AbstractTask.$inject = ['$scope','$element','$attrs', '$injector'];

  // SERVER

  /** @var {object} task Task's resource from server. */
  AbstractTask.prototype.task = null;

  // GAMEPLAY

  /** @var {boolean} resolved If player has resolved the game. */
  AbstractTask.prototype.resolved = false;

  // SETTINGS

  /** @var {boolean} setting Description. */
  AbstractTask.prototype.setting = null;

  //
  // METHODS
  //

  /**
   * Proxies to `init()` if controller's ready.
   *
   * @public
   * @method $onInit
   * @return {void}
   */
  AbstractTask.prototype.$onInit = function() {
    this.init();
  };

  /**
   * Retrieves result payload for server.
   *
   * @public
   * @method getPayload
   * @return {void}
   */
  AbstractTask.prototype.getPayload = function() {
    return {
      task: this.task,
      json: {
      }
    };
  };

  /**
   * Whether or not task is currently locked.
   *
   * @public
   * @method isLocked
   * @return {boolean}
   */
  AbstractTask.prototype.isLocked = function() {
    if (this.task === null) {
      return true;
    }

    return !this.task.isActive;
  };

  /**
   * Whether or not task can be sent to server.
   *
   * @public
   * @method canResolve
   * @return {boolean}
   */
  AbstractTask.prototype.canResolve = function() {
    var user = this.$injector.get('user');
    if (!user.isUser()) {
      return false;
    }

    if (this.isLocked()) {
      return false;
    }

    if (this.resolved) {
      return false;
    }

    return true;
  };

  /**
   * Sets up initial state.
   *
   * @public
   * @method init
   * @return {void}
   */
  AbstractTask.prototype.init = function() {
    this.resolved = false;
  };

  /**
   * Resets initial state.
   *
   * @public
   * @method reset
   * @return {void}
   */
  AbstractTask.prototype.reset = function(){
    this.init();
  };

  /**
   * Description.
   *
   * @public
   * @method update
   * @return {void}
   */
  AbstractTask.prototype.update = function(){
    this.resolve();
  };

  /**
   * Sets `resolved` flag. Calls `onResolve`
   * callback with JSON result for consumer.
   *
   * @public
   * @method resolve
   * @return {void}
   */
  AbstractTask.prototype.resolve = function(){
    var $q = this.$injector.get('$q');

    var result = this.onResolve({
      payload: this.getPayload()
    });

    var me = this;
    var successCallback = function() {
      me.resolved = true;
    };
    var failureCallback = function() {

    };

    var promise = $q.when(result);
    promise.then(
      successCallback,
      failureCallback
    );

    return promise;
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('abstractTask', function(){
    return {
      scope: {
        onResolve: '&abstractTaskOnResolve'
      },
      restrict: 'A',
      transclude: true,
      controller: AbstractTask,
      bindToController: true,
      controllerAs: 'abstractTaskController',
      templateUrl: 'views/directives/tasks/abstract-task.html'
    };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL3Rhc2tzL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwL2RpcmVjdGl2ZXMvdGFza3MvdGVtcGxhdGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIEFOR1VMQVJfTU9EVUxFLCBhbmd1bGFyICovXG4oZnVuY3Rpb24obW9kdWxlLCBhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBBYnN0cmFjdFRhc2tcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL1xuICAvLyBDT05UUk9MTEVSXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIEFic3RyYWN0VGFzayA9IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1udCwgJGF0dHJzLCAkaW5qZWN0b3IpIHtcbiAgICB2YXIgdHlwZSA9ICRpbmplY3Rvci5nZXQoJ1RZUEVfWFhYJyk7XG4gICAgdmFyIHVzZXIgPSAkaW5qZWN0b3IuZ2V0KCd1c2VyJyk7XG5cbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcbiAgICB0aGlzLnRhc2sgPSB1c2VyLmdldFRhc2tCeVR5cGUodHlwZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RUYXNrLiRpbmplY3QgPSBbJyRzY29wZScsJyRlbGVtZW50JywnJGF0dHJzJywgJyRpbmplY3RvciddO1xuXG4gIC8vIFNFUlZFUlxuXG4gIC8qKiBAdmFyIHtvYmplY3R9IHRhc2sgVGFzaydzIHJlc291cmNlIGZyb20gc2VydmVyLiAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLnRhc2sgPSBudWxsO1xuXG4gIC8vIEdBTUVQTEFZXG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHJlc29sdmVkIElmIHBsYXllciBoYXMgcmVzb2x2ZWQgdGhlIGdhbWUuICovXG4gIEFic3RyYWN0VGFzay5wcm90b3R5cGUucmVzb2x2ZWQgPSBmYWxzZTtcblxuICAvLyBTRVRUSU5HU1xuXG4gIC8qKiBAdmFyIHtib29sZWFufSBzZXR0aW5nIERlc2NyaXB0aW9uLiAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLnNldHRpbmcgPSBudWxsO1xuXG4gIC8vXG4gIC8vIE1FVEhPRFNcbiAgLy9cblxuICAvKipcbiAgICogUHJveGllcyB0byBgaW5pdCgpYCBpZiBjb250cm9sbGVyJ3MgcmVhZHkuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCAkb25Jbml0XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIHJlc3VsdCBwYXlsb2FkIGZvciBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBnZXRQYXlsb2FkXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLmdldFBheWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFzazogdGhpcy50YXNrLFxuICAgICAganNvbjoge1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRhc2sgaXMgY3VycmVudGx5IGxvY2tlZC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGlzTG9ja2VkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLmlzTG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGFzayA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnRhc2suaXNBY3RpdmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRhc2sgY2FuIGJlIHNlbnQgdG8gc2VydmVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgY2FuUmVzb2x2ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgQWJzdHJhY3RUYXNrLnByb3RvdHlwZS5jYW5SZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVzZXIgPSB0aGlzLiRpbmplY3Rvci5nZXQoJ3VzZXInKTtcbiAgICBpZiAoIXVzZXIuaXNVc2VyKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0xvY2tlZCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyB1cCBpbml0aWFsIHN0YXRlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgaW5pdFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgQWJzdHJhY3RUYXNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgaW5pdGlhbCBzdGF0ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHJlc2V0XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBBYnN0cmFjdFRhc2sucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24uXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEFic3RyYWN0VGFzay5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnJlc29sdmUoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBgcmVzb2x2ZWRgIGZsYWcuIENhbGxzIGBvblJlc29sdmVgXG4gICAqIGNhbGxiYWNrIHdpdGggSlNPTiByZXN1bHQgZm9yIGNvbnN1bWVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgcmVzb2x2ZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgQWJzdHJhY3RUYXNrLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgJHEgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRxJyk7XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5vblJlc29sdmUoe1xuICAgICAgcGF5bG9hZDogdGhpcy5nZXRQYXlsb2FkKClcbiAgICB9KTtcblxuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgbWUucmVzb2x2ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgfTtcblxuICAgIHZhciBwcm9taXNlID0gJHEud2hlbihyZXN1bHQpO1xuICAgIHByb21pc2UudGhlbihcbiAgICAgIHN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgIGZhaWx1cmVDYWxsYmFja1xuICAgICk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICAvL1xuICAvLyBSRUdJU1RSWVxuICAvL1xuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmRpcmVjdGl2ZSgnYWJzdHJhY3RUYXNrJywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgb25SZXNvbHZlOiAnJmFic3RyYWN0VGFza09uUmVzb2x2ZSdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IEFic3RyYWN0VGFzayxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyQXM6ICdhYnN0cmFjdFRhc2tDb250cm9sbGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90YXNrcy9hYnN0cmFjdC10YXNrLmh0bWwnXG4gICAgfTtcbiAgfSk7XG5cbn0pKEFOR1VMQVJfTU9EVUxFLCBhbmd1bGFyKTtcbiJdfQ==
