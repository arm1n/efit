/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  var HttpInterceptor = function($injector)
    {
      this.$injector = $injector;
      this._urls = {};
    };

  /** @var {Array.<string>} $inject Dependencies to be injected by Angular. */
  HttpInterceptor.$inject = ['$injector'];

  /**
   * Gets latest response from $http.
   */
  HttpInterceptor.prototype.getLastSuccessResponse = function()
    {
      return this._lastSuccessResponse;
    };

  /**
   * Gets latest error from $http.
   */
  HttpInterceptor.prototype.getLastErrorResponse = function()
    {
      return this._lastErrorResponse;
    };

  /**
   * Gets latest response from $http.
   */
  HttpInterceptor.prototype.getLastResponse = function()
    {
      return this._lastResponse;
    };

  /**
   * Returns a hash of all requested urls.
   */
  HttpInterceptor.prototype.getUrls = function()
    {
      return this._urls;
    };

  /**
   * Intercepts $http request's config before invocation.
   * @param {object} config
   * @return {object} config
   */
  HttpInterceptor.prototype.request = function(config)
    {
      var appState = this.$injector.get('appState');

      // set app state to busy
      appState.httpBusy = true;

      // save url in internal cache
      this._setUrl(config);

      // common headers
      config.headers['X-Requested-With'] = 'XMLHttpRequest';

      // custom settings
      /*
      switch(config.method)
      {
        case 'POST':
        case 'PUT':
          var $httpParamSerializer = this.$injector.get('$httpParamSerializer');
          config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
          config.data = $httpParamSerializer(config.data);
          break;

        default:
      }
      */

      // JWT authorization
      var successCallback = function(token) {
        if (token) {
          config.headers.Authorization = 'Bearer ' + token;
        }

        return config;
      };

      var failureCallback = function() {
        return config;
      };

      if (config.skipAuthorization) {
        return config;
      }

      var jwtToken = this._getJWTToken(config);
      var $q = this.$injector.get('$q');
      return $q.when(jwtToken).then(
        successCallback,
        failureCallback
      );
    };

  /**
   * Intercepts $http request error's config before invocation.
   * @param {object} config
   * @return {object} config
   */
  HttpInterceptor.prototype.requestError = function(rejection)
    {
      var appState = this.$injector.get('appState');
      var $q = this.$injector.get('$q');

      appState.httpBusy = false;

      return $q.reject(rejection);
    };

  /**
   * Intercepts $http response before forwarding.
   * @param {object} config
   * @return {object} config
   */
  HttpInterceptor.prototype.response = function(response)
    {
      var appState = this.$injector.get('appState');

      this._setLastSuccessResponse(response);
      this._setLastResponse(response);

      appState.httpBusy = false;

      return response;
    };

  /**
   * Intercepts $http error response before forwarding.
   * @param {object} config
   * @return {object} config
   */
  HttpInterceptor.prototype.responseError = function(rejection)
    {
      var appState = this.$injector.get('appState');
      var $q = this.$injector.get('$q');

      this._showGlobalErrorMessage(rejection);
      this._setLastErrorResponse(rejection);
      this._setLastResponse(rejection);

      appState.httpBusy = false;

      return $q.reject(rejection);
    };

  /**
   * Sets fully qualified url with query string for a request.
   * This is useful to manage Angular's $cacheFactory for $http.
   * @param {object} config
   */
  HttpInterceptor.prototype._setUrl = function(config)
    {
      var $httpParamSerializer = this.$injector.get('$httpParamSerializer');
      var params = $httpParamSerializer(config.params);
      var url = config.url + (
        params ?
          '?' + params :
          ''
      );

      this._urls[url] = true;
    };

  /**
   * @ignore
   */
  HttpInterceptor.prototype._setLastResponse = function(responseOrRejection)
    {
      this._lastResponse = responseOrRejection;
    };

  /**
   * @ignore
   */
  HttpInterceptor.prototype._setLastErrorResponse = function(rejection)
    {
      this._lastErrorResponse = rejection;
    };

  /**
   * @ignore
   */
  HttpInterceptor.prototype._setLastSuccessResponse = function(response)
    {
      this._lastSuccessResponse = response;
    };

  /**
   * @ignore
   */
  HttpInterceptor.prototype._showGlobalErrorMessage = function(rejection)
  {
    var notification = this.$injector.get('notification');
    var i18n = this.$injector.get('i18n');

    var config = rejection.config || {};
    if (config.skipGlobalErrorMessage) {
      return;
    }

    var data = rejection.data || {};
    if (!data.message) {
      return;
    }

    notification.error(i18n.get(data.message));
  };

  /**
   * @ignore
   */
  HttpInterceptor.prototype._getJWTToken = function() {
    var auth = this.$injector.get('auth');
    var jwt = this.$injector.get('jwt');

    // a) no token available in storage
    var token = jwt.getToken();
    if (!token) {
      return null;
    }

    // b) token is still valid, check for
    // refresh if it expires in 5 minutes
    if (jwt.isExpired(token, 600)) {
      var successCallback = function() {
        return jwt.getToken();
      };

      var failureCallback = function() {
        return null;
      };

      return auth.refresh().then(
        successCallback,
        failureCallback
      );
    }

    // c) use current token
    return jwt.getToken();
  };

  //
  // REGISTRY
  //
  angular.module(module).factory('httpInterceptor',['$injector',function($injector){

      var httpInterceptor = $injector.instantiate(HttpInterceptor);

      return { // important: $http service invokes this methods with global scope!
        getUrls: function(){ return httpInterceptor.getUrls(); },
        getLastResponse: function(){ return httpInterceptor.getLastResponse(); },
        getLastErrorResponse: function(){ return httpInterceptor.getLastErrorResponse(); },
        getLastSuccessResponse: function(){ return httpInterceptor.getLastSuccessResponse(); },
        request: function(config){ return httpInterceptor.request(config); },
        response: function(response){ return httpInterceptor.response(response); },
        requestError: function(rejection){ return httpInterceptor.responseError(rejection); },
        responseError: function(rejection){ return httpInterceptor.responseError(rejection); }
      };
    }]);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9odHRwLWludGVyY2VwdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvc2VydmljZXMvaHR0cC1pbnRlcmNlcHRvci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIgKi9cbihmdW5jdGlvbihtb2R1bGUsIGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBIdHRwSW50ZXJjZXB0b3IgPSBmdW5jdGlvbigkaW5qZWN0b3IpXG4gICAge1xuICAgICAgdGhpcy4kaW5qZWN0b3IgPSAkaW5qZWN0b3I7XG4gICAgICB0aGlzLl91cmxzID0ge307XG4gICAgfTtcblxuICAvKiogQHZhciB7QXJyYXkuPHN0cmluZz59ICRpbmplY3QgRGVwZW5kZW5jaWVzIHRvIGJlIGluamVjdGVkIGJ5IEFuZ3VsYXIuICovXG4gIEh0dHBJbnRlcmNlcHRvci4kaW5qZWN0ID0gWyckaW5qZWN0b3InXTtcblxuICAvKipcbiAgICogR2V0cyBsYXRlc3QgcmVzcG9uc2UgZnJvbSAkaHR0cC5cbiAgICovXG4gIEh0dHBJbnRlcmNlcHRvci5wcm90b3R5cGUuZ2V0TGFzdFN1Y2Nlc3NSZXNwb25zZSA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICByZXR1cm4gdGhpcy5fbGFzdFN1Y2Nlc3NSZXNwb25zZTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIGxhdGVzdCBlcnJvciBmcm9tICRodHRwLlxuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JSZXNwb25zZSA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICByZXR1cm4gdGhpcy5fbGFzdEVycm9yUmVzcG9uc2U7XG4gICAgfTtcblxuICAvKipcbiAgICogR2V0cyBsYXRlc3QgcmVzcG9uc2UgZnJvbSAkaHR0cC5cbiAgICovXG4gIEh0dHBJbnRlcmNlcHRvci5wcm90b3R5cGUuZ2V0TGFzdFJlc3BvbnNlID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgIHJldHVybiB0aGlzLl9sYXN0UmVzcG9uc2U7XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGhhc2ggb2YgYWxsIHJlcXVlc3RlZCB1cmxzLlxuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5nZXRVcmxzID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgIHJldHVybiB0aGlzLl91cmxzO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdHMgJGh0dHAgcmVxdWVzdCdzIGNvbmZpZyBiZWZvcmUgaW52b2NhdGlvbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ1xuICAgKiBAcmV0dXJuIHtvYmplY3R9IGNvbmZpZ1xuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKVxuICAgIHtcbiAgICAgIHZhciBhcHBTdGF0ZSA9IHRoaXMuJGluamVjdG9yLmdldCgnYXBwU3RhdGUnKTtcblxuICAgICAgLy8gc2V0IGFwcCBzdGF0ZSB0byBidXN5XG4gICAgICBhcHBTdGF0ZS5odHRwQnVzeSA9IHRydWU7XG5cbiAgICAgIC8vIHNhdmUgdXJsIGluIGludGVybmFsIGNhY2hlXG4gICAgICB0aGlzLl9zZXRVcmwoY29uZmlnKTtcblxuICAgICAgLy8gY29tbW9uIGhlYWRlcnNcbiAgICAgIGNvbmZpZy5oZWFkZXJzWydYLVJlcXVlc3RlZC1XaXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xuXG4gICAgICAvLyBjdXN0b20gc2V0dGluZ3NcbiAgICAgIC8qXG4gICAgICBzd2l0Y2goY29uZmlnLm1ldGhvZClcbiAgICAgIHtcbiAgICAgICAgY2FzZSAnUE9TVCc6XG4gICAgICAgIGNhc2UgJ1BVVCc6XG4gICAgICAgICAgdmFyICRodHRwUGFyYW1TZXJpYWxpemVyID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckaHR0cFBhcmFtU2VyaWFsaXplcicpO1xuICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgICAgIGNvbmZpZy5kYXRhID0gJGh0dHBQYXJhbVNlcmlhbGl6ZXIoY29uZmlnLmRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgICAqL1xuXG4gICAgICAvLyBKV1QgYXV0aG9yaXphdGlvblxuICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyB0b2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICBpZiAoY29uZmlnLnNraXBBdXRob3JpemF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG5cbiAgICAgIHZhciBqd3RUb2tlbiA9IHRoaXMuX2dldEpXVFRva2VuKGNvbmZpZyk7XG4gICAgICB2YXIgJHEgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRxJyk7XG4gICAgICByZXR1cm4gJHEud2hlbihqd3RUb2tlbikudGhlbihcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICAgICk7XG4gICAgfTtcblxuICAvKipcbiAgICogSW50ZXJjZXB0cyAkaHR0cCByZXF1ZXN0IGVycm9yJ3MgY29uZmlnIGJlZm9yZSBpbnZvY2F0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnXG4gICAqIEByZXR1cm4ge29iamVjdH0gY29uZmlnXG4gICAqL1xuICBIdHRwSW50ZXJjZXB0b3IucHJvdG90eXBlLnJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uKHJlamVjdGlvbilcbiAgICB7XG4gICAgICB2YXIgYXBwU3RhdGUgPSB0aGlzLiRpbmplY3Rvci5nZXQoJ2FwcFN0YXRlJyk7XG4gICAgICB2YXIgJHEgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRxJyk7XG5cbiAgICAgIGFwcFN0YXRlLmh0dHBCdXN5ID0gZmFsc2U7XG5cbiAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcmNlcHRzICRodHRwIHJlc3BvbnNlIGJlZm9yZSBmb3J3YXJkaW5nLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnXG4gICAqIEByZXR1cm4ge29iamVjdH0gY29uZmlnXG4gICAqL1xuICBIdHRwSW50ZXJjZXB0b3IucHJvdG90eXBlLnJlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpXG4gICAge1xuICAgICAgdmFyIGFwcFN0YXRlID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdhcHBTdGF0ZScpO1xuXG4gICAgICB0aGlzLl9zZXRMYXN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIHRoaXMuX3NldExhc3RSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFwcFN0YXRlLmh0dHBCdXN5ID0gZmFsc2U7XG5cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcmNlcHRzICRodHRwIGVycm9yIHJlc3BvbnNlIGJlZm9yZSBmb3J3YXJkaW5nLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnXG4gICAqIEByZXR1cm4ge29iamVjdH0gY29uZmlnXG4gICAqL1xuICBIdHRwSW50ZXJjZXB0b3IucHJvdG90eXBlLnJlc3BvbnNlRXJyb3IgPSBmdW5jdGlvbihyZWplY3Rpb24pXG4gICAge1xuICAgICAgdmFyIGFwcFN0YXRlID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdhcHBTdGF0ZScpO1xuICAgICAgdmFyICRxID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckcScpO1xuXG4gICAgICB0aGlzLl9zaG93R2xvYmFsRXJyb3JNZXNzYWdlKHJlamVjdGlvbik7XG4gICAgICB0aGlzLl9zZXRMYXN0RXJyb3JSZXNwb25zZShyZWplY3Rpb24pO1xuICAgICAgdGhpcy5fc2V0TGFzdFJlc3BvbnNlKHJlamVjdGlvbik7XG5cbiAgICAgIGFwcFN0YXRlLmh0dHBCdXN5ID0gZmFsc2U7XG5cbiAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGZ1bGx5IHF1YWxpZmllZCB1cmwgd2l0aCBxdWVyeSBzdHJpbmcgZm9yIGEgcmVxdWVzdC5cbiAgICogVGhpcyBpcyB1c2VmdWwgdG8gbWFuYWdlIEFuZ3VsYXIncyAkY2FjaGVGYWN0b3J5IGZvciAkaHR0cC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ1xuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5fc2V0VXJsID0gZnVuY3Rpb24oY29uZmlnKVxuICAgIHtcbiAgICAgIHZhciAkaHR0cFBhcmFtU2VyaWFsaXplciA9IHRoaXMuJGluamVjdG9yLmdldCgnJGh0dHBQYXJhbVNlcmlhbGl6ZXInKTtcbiAgICAgIHZhciBwYXJhbXMgPSAkaHR0cFBhcmFtU2VyaWFsaXplcihjb25maWcucGFyYW1zKTtcbiAgICAgIHZhciB1cmwgPSBjb25maWcudXJsICsgKFxuICAgICAgICBwYXJhbXMgP1xuICAgICAgICAgICc/JyArIHBhcmFtcyA6XG4gICAgICAgICAgJydcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX3VybHNbdXJsXSA9IHRydWU7XG4gICAgfTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5fc2V0TGFzdFJlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2VPclJlamVjdGlvbilcbiAgICB7XG4gICAgICB0aGlzLl9sYXN0UmVzcG9uc2UgPSByZXNwb25zZU9yUmVqZWN0aW9uO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEh0dHBJbnRlcmNlcHRvci5wcm90b3R5cGUuX3NldExhc3RFcnJvclJlc3BvbnNlID0gZnVuY3Rpb24ocmVqZWN0aW9uKVxuICAgIHtcbiAgICAgIHRoaXMuX2xhc3RFcnJvclJlc3BvbnNlID0gcmVqZWN0aW9uO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEh0dHBJbnRlcmNlcHRvci5wcm90b3R5cGUuX3NldExhc3RTdWNjZXNzUmVzcG9uc2UgPSBmdW5jdGlvbihyZXNwb25zZSlcbiAgICB7XG4gICAgICB0aGlzLl9sYXN0U3VjY2Vzc1Jlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgfTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgSHR0cEludGVyY2VwdG9yLnByb3RvdHlwZS5fc2hvd0dsb2JhbEVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uKHJlamVjdGlvbilcbiAge1xuICAgIHZhciBub3RpZmljYXRpb24gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ25vdGlmaWNhdGlvbicpO1xuICAgIHZhciBpMThuID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdpMThuJyk7XG5cbiAgICB2YXIgY29uZmlnID0gcmVqZWN0aW9uLmNvbmZpZyB8fMKge307XG4gICAgaWYgKGNvbmZpZy5za2lwR2xvYmFsRXJyb3JNZXNzYWdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSByZWplY3Rpb24uZGF0YSB8fMKge307XG4gICAgaWYgKCFkYXRhLm1lc3NhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub3RpZmljYXRpb24uZXJyb3IoaTE4bi5nZXQoZGF0YS5tZXNzYWdlKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEh0dHBJbnRlcmNlcHRvci5wcm90b3R5cGUuX2dldEpXVFRva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGF1dGggPSB0aGlzLiRpbmplY3Rvci5nZXQoJ2F1dGgnKTtcbiAgICB2YXIgand0ID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdqd3QnKTtcblxuICAgIC8vIGEpIG5vIHRva2VuIGF2YWlsYWJsZSBpbiBzdG9yYWdlXG4gICAgdmFyIHRva2VuID0gand0LmdldFRva2VuKCk7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gYikgdG9rZW4gaXMgc3RpbGwgdmFsaWQsIGNoZWNrIGZvclxuICAgIC8vIHJlZnJlc2ggaWYgaXQgZXhwaXJlcyBpbiA1IG1pbnV0ZXNcbiAgICBpZiAoand0LmlzRXhwaXJlZCh0b2tlbiwgNjAwKSkge1xuICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gand0LmdldFRva2VuKCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGF1dGgucmVmcmVzaCgpLnRoZW4oXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGMpIHVzZSBjdXJyZW50IHRva2VuXG4gICAgcmV0dXJuIGp3dC5nZXRUb2tlbigpO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuZmFjdG9yeSgnaHR0cEludGVyY2VwdG9yJyxbJyRpbmplY3RvcicsZnVuY3Rpb24oJGluamVjdG9yKXtcblxuICAgICAgdmFyIGh0dHBJbnRlcmNlcHRvciA9ICRpbmplY3Rvci5pbnN0YW50aWF0ZShIdHRwSW50ZXJjZXB0b3IpO1xuXG4gICAgICByZXR1cm4geyAvLyBpbXBvcnRhbnQ6ICRodHRwIHNlcnZpY2UgaW52b2tlcyB0aGlzIG1ldGhvZHMgd2l0aCBnbG9iYWwgc2NvcGUhXG4gICAgICAgIGdldFVybHM6IGZ1bmN0aW9uKCl7IHJldHVybiBodHRwSW50ZXJjZXB0b3IuZ2V0VXJscygpOyB9LFxuICAgICAgICBnZXRMYXN0UmVzcG9uc2U6IGZ1bmN0aW9uKCl7IHJldHVybiBodHRwSW50ZXJjZXB0b3IuZ2V0TGFzdFJlc3BvbnNlKCk7IH0sXG4gICAgICAgIGdldExhc3RFcnJvclJlc3BvbnNlOiBmdW5jdGlvbigpeyByZXR1cm4gaHR0cEludGVyY2VwdG9yLmdldExhc3RFcnJvclJlc3BvbnNlKCk7IH0sXG4gICAgICAgIGdldExhc3RTdWNjZXNzUmVzcG9uc2U6IGZ1bmN0aW9uKCl7IHJldHVybiBodHRwSW50ZXJjZXB0b3IuZ2V0TGFzdFN1Y2Nlc3NSZXNwb25zZSgpOyB9LFxuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbihjb25maWcpeyByZXR1cm4gaHR0cEludGVyY2VwdG9yLnJlcXVlc3QoY29uZmlnKTsgfSxcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uKHJlc3BvbnNlKXsgcmV0dXJuIGh0dHBJbnRlcmNlcHRvci5yZXNwb25zZShyZXNwb25zZSk7IH0sXG4gICAgICAgIHJlcXVlc3RFcnJvcjogZnVuY3Rpb24ocmVqZWN0aW9uKXsgcmV0dXJuIGh0dHBJbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKHJlamVjdGlvbik7IH0sXG4gICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uKHJlamVjdGlvbil7IHJldHVybiBodHRwSW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcihyZWplY3Rpb24pOyB9XG4gICAgICB9O1xuICAgIH1dKTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
