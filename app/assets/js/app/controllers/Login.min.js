/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

 /**
  * @constructor
  */
  var Login = function($scope, $injector) {
    this.$injector = $injector;
    this.$scope = $scope;
  };

  Login.$inject = ['$scope', '$injector'];

  //
  // PROPERTIES
  //

  /** @var {RegExp} userpattern Regular expression for `username` property. */
  Login.prototype.userpattern = /^[a-z][a-z](?:0[1-9]|[12]\d|3[01])[A-Z]\d$/;

  /** @var {string} username User name for authentication. */
  Login.prototype.username = 'admin';//'ru17O1';
  Login.prototype.password = 'test';

  /** @var {string} workshop Optional workshop id for authentication. */
  Login.prototype.workshop = null;

  //
  // METHODS
  //

  /**
   * Signs a user in with personal code to gather JWT.
   *
   * @public
   * @method signin
   * @return {Void}
   */
  Login.prototype.signin = function()
    {
      var notification = this.$injector.get('notification');
      var $state = this.$injector.get('$state');
      var auth = this.$injector.get('auth');
      var i18n = this.$injector.get('i18n');

      var form = this.$scope.loginForm;
      if (form.$invalid) {
        return;
      }

      var me = this;

      var successCallback = function()
      {
        var message = i18n.get('You are logged in now!');
        notification.success(message);
        $state.go('frontend');
      };

      var failureCallback = function(response)
      {
        form.code.$setValidity('server', false);
      };

      auth
        .login({
          username: this.username
        }).then(
          successCallback,
          failureCallback
        );
    };

  /**
   * Signs a user up with personal code and workshop.
   *
   * @public
   * @method signup
   * @return {Void}
   */
  Login.prototype.signup = function()
    {
      /*
      var notification = this.$injector.get('notification');
      var $state = this.$injector.get('$state');
      var auth = this.$injector.get('auth');
      var i18n = this.$injector.get('i18n');

      var form = this.$scope.loginForm;
      if (form.$invalid) {
        return;
      }

      var me = this;

      var successCallback = function()
      {
        var message = i18n.get('You are logged in now!');
        notification.success(message);
        $state.go('index');
      };

      var failureCallback = function(response)
      {
        form.code.$setValidity('server', false);
        me.errorCode = response.data.error ||Â 'UNKNOWN_SERVER_ERROR';
      };

      auth
        .login({
          username: this.username
        }).then(
          successCallback,
          failureCallback
        );
      */
    };

  /**
   * Signs an admin in with username and password.
   *
   * @public
   * @method login
   * @return {Void}
   */
  Login.prototype.login = function()
    {
      var notification = this.$injector.get('notification');
      var $state = this.$injector.get('$state');
      var auth = this.$injector.get('auth');
      var i18n = this.$injector.get('i18n');

      var form = this.$scope.loginForm;
      if (form.$invalid) {
        return;
      }

      var successCallback = function()
      {
        var message = i18n.get('You are logged in now!');
        notification.success(message);
        $state.go('frontend');
      };

      var failureCallback = function(response)
      {
        // noop
      };

      auth
        .login({
          username: this.username,
          password: this.password
        }).then(
          successCallback,
          failureCallback
        );
    };

  angular.module(module).controller('LoginController', Login);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9jb250cm9sbGVycy9sb2dpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwL2NvbnRyb2xsZXJzL2xvZ2luLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAvKipcbiAgKiBAY29uc3RydWN0b3JcbiAgKi9cbiAgdmFyIExvZ2luID0gZnVuY3Rpb24oJHNjb3BlLCAkaW5qZWN0b3IpIHtcbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcbiAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgfTtcblxuICBMb2dpbi4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGluamVjdG9yJ107XG5cbiAgLy9cbiAgLy8gUFJPUEVSVElFU1xuICAvL1xuXG4gIC8qKiBAdmFyIHtSZWdFeHB9IHVzZXJwYXR0ZXJuIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgYHVzZXJuYW1lYCBwcm9wZXJ0eS4gKi9cbiAgTG9naW4ucHJvdG90eXBlLnVzZXJwYXR0ZXJuID0gL15bYS16XVthLXpdKD86MFsxLTldfFsxMl1cXGR8M1swMV0pW0EtWl1cXGQkLztcblxuICAvKiogQHZhciB7c3RyaW5nfSB1c2VybmFtZSBVc2VyIG5hbWUgZm9yIGF1dGhlbnRpY2F0aW9uLiAqL1xuICBMb2dpbi5wcm90b3R5cGUudXNlcm5hbWUgPSAnYWRtaW4nOy8vJ3J1MTdPMSc7XG4gIExvZ2luLnByb3RvdHlwZS5wYXNzd29yZCA9ICd0ZXN0JztcblxuICAvKiogQHZhciB7c3RyaW5nfSB3b3Jrc2hvcCBPcHRpb25hbCB3b3Jrc2hvcCBpZCBmb3IgYXV0aGVudGljYXRpb24uICovXG4gIExvZ2luLnByb3RvdHlwZS53b3Jrc2hvcCA9IG51bGw7XG5cbiAgLy9cbiAgLy8gTUVUSE9EU1xuICAvL1xuXG4gIC8qKlxuICAgKiBTaWducyBhIHVzZXIgaW4gd2l0aCBwZXJzb25hbCBjb2RlIHRvIGdhdGhlciBKV1QuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBzaWduaW5cbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIExvZ2luLnByb3RvdHlwZS5zaWduaW4gPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IHRoaXMuJGluamVjdG9yLmdldCgnbm90aWZpY2F0aW9uJyk7XG4gICAgICB2YXIgJHN0YXRlID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckc3RhdGUnKTtcbiAgICAgIHZhciBhdXRoID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdhdXRoJyk7XG4gICAgICB2YXIgaTE4biA9IHRoaXMuJGluamVjdG9yLmdldCgnaTE4bicpO1xuXG4gICAgICB2YXIgZm9ybSA9IHRoaXMuJHNjb3BlLmxvZ2luRm9ybTtcbiAgICAgIGlmIChmb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpMThuLmdldCgnWW91IGFyZSBsb2dnZWQgaW4gbm93IScpO1xuICAgICAgICBub3RpZmljYXRpb24uc3VjY2VzcyhtZXNzYWdlKTtcbiAgICAgICAgJHN0YXRlLmdvKCdmcm9udGVuZCcpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAgICAge1xuICAgICAgICBmb3JtLmNvZGUuJHNldFZhbGlkaXR5KCdzZXJ2ZXInLCBmYWxzZSk7XG4gICAgICB9O1xuXG4gICAgICBhdXRoXG4gICAgICAgIC5sb2dpbih7XG4gICAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlcm5hbWVcbiAgICAgICAgfSkudGhlbihcbiAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgICAgICk7XG4gICAgfTtcblxuICAvKipcbiAgICogU2lnbnMgYSB1c2VyIHVwIHdpdGggcGVyc29uYWwgY29kZSBhbmQgd29ya3Nob3AuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBzaWdudXBcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIExvZ2luLnByb3RvdHlwZS5zaWdudXAgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgLypcbiAgICAgIHZhciBub3RpZmljYXRpb24gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ25vdGlmaWNhdGlvbicpO1xuICAgICAgdmFyICRzdGF0ZSA9IHRoaXMuJGluamVjdG9yLmdldCgnJHN0YXRlJyk7XG4gICAgICB2YXIgYXV0aCA9IHRoaXMuJGluamVjdG9yLmdldCgnYXV0aCcpO1xuICAgICAgdmFyIGkxOG4gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ2kxOG4nKTtcblxuICAgICAgdmFyIGZvcm0gPSB0aGlzLiRzY29wZS5sb2dpbkZvcm07XG4gICAgICBpZiAoZm9ybS4kaW52YWxpZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtZSA9IHRoaXM7XG5cbiAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gaTE4bi5nZXQoJ1lvdSBhcmUgbG9nZ2VkIGluIG5vdyEnKTtcbiAgICAgICAgbm90aWZpY2F0aW9uLnN1Y2Nlc3MobWVzc2FnZSk7XG4gICAgICAgICRzdGF0ZS5nbygnaW5kZXgnKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmYWlsdXJlQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXNwb25zZSlcbiAgICAgIHtcbiAgICAgICAgZm9ybS5jb2RlLiRzZXRWYWxpZGl0eSgnc2VydmVyJywgZmFsc2UpO1xuICAgICAgICBtZS5lcnJvckNvZGUgPSByZXNwb25zZS5kYXRhLmVycm9yIHx8wqAnVU5LTk9XTl9TRVJWRVJfRVJST1InO1xuICAgICAgfTtcblxuICAgICAgYXV0aFxuICAgICAgICAubG9naW4oe1xuICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lXG4gICAgICAgIH0pLnRoZW4oXG4gICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgIGZhaWx1cmVDYWxsYmFja1xuICAgICAgICApO1xuICAgICAgKi9cbiAgICB9O1xuXG4gIC8qKlxuICAgKiBTaWducyBhbiBhZG1pbiBpbiB3aXRoIHVzZXJuYW1lIGFuZCBwYXNzd29yZC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGxvZ2luXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBMb2dpbi5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IHRoaXMuJGluamVjdG9yLmdldCgnbm90aWZpY2F0aW9uJyk7XG4gICAgICB2YXIgJHN0YXRlID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckc3RhdGUnKTtcbiAgICAgIHZhciBhdXRoID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdhdXRoJyk7XG4gICAgICB2YXIgaTE4biA9IHRoaXMuJGluamVjdG9yLmdldCgnaTE4bicpO1xuXG4gICAgICB2YXIgZm9ybSA9IHRoaXMuJHNjb3BlLmxvZ2luRm9ybTtcbiAgICAgIGlmIChmb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpMThuLmdldCgnWW91IGFyZSBsb2dnZWQgaW4gbm93IScpO1xuICAgICAgICBub3RpZmljYXRpb24uc3VjY2VzcyhtZXNzYWdlKTtcbiAgICAgICAgJHN0YXRlLmdvKCdmcm9udGVuZCcpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAgICAge1xuICAgICAgICAvLyBub29wXG4gICAgICB9O1xuXG4gICAgICBhdXRoXG4gICAgICAgIC5sb2dpbih7XG4gICAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlcm5hbWUsXG4gICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihcbiAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgICAgICk7XG4gICAgfTtcblxuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmNvbnRyb2xsZXIoJ0xvZ2luQ29udHJvbGxlcicsIExvZ2luKTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
