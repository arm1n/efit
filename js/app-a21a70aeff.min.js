!function(t,e){"use strict";var o="eFit",n=e.module(o,["ngSanitize","ngMessages","ngResource","ui.router","eFit.views","eFit.config"]);n.config(["$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","$templateRequestProvider","$resourceProvider","$qProvider","VIEWS_PATH",function(t,o,n,i,s,r,a,c){t.html5Mode(!1),t.hashPrefix("!"),i.interceptors.push("httpInterceptor"),a.errorOnUnhandledRejections(!1),r.defaults.actions={get:{method:"GET"},list:{method:"GET",isArray:!0},update:{method:"PATCH"},create:{method:"POST"},"delete":{method:"DELETE"}},o.decorator("views",function(t,o){var n={},i=o(t);return e.forEach(i,function(e,o){var i=o.match(/([^@]+)\@/),s=i?"/"+i[1]:"",r=t.name.replace(/\./g,"/"),a=e.templateUrl||[c,r,s,".html"].join("");e.templateUrl=a,n[o]=e}),n}),s.httpOptions({skipAuthorization:!0}),o.state("main",{url:"","abstract":!0,resolve:{translations:["i18n",function(t){return t.load("de",{skipAuthorization:!0})}]},template:'<div id="main" data-ui-view=""></div>'}),o.state("frontend",{parent:"main",url:"/",resolve:{current:["user","$state","$q",function(t,e,o){var n=t.load().$promise;return n["catch"](function(t){e.go("login.frontend")})}]},data:{role:["ROLE_USER","ROLE_ADMIN","ROLE_SUPER_ADMIN"]},views:{"navbar@frontend":{},"home@frontend":{},"topics@frontend":{},"financial-knowledge@frontend":{},"financial-knowledge/interest-task@frontend":{},"financial-knowledge/diversification-task@frontend":{},"consumer-behaviour@frontend":{},"consumer-behaviour/bomb-task@frontend":{},"consumer-behaviour/anchoring-task@frontend":{},"consumer-behaviour/mental-bookkeeping-task@frontend":{},"consumer-behaviour/framing-task@frontend":{},"self-control@frontend":{},"self-control/savings-target-task@frontend":{},"self-control/savings-supported-task@frontend":{},"self-control/self-commitment-task@frontend":{},"self-control/procrastination-task@frontend":{},"status@frontend":{},"contact@frontend":{controller:"ContactController",controllerAs:"contactController"},"footer@frontend":{},"offcanvas@":{controller:"FrontendController",controllerAs:"frontendController"},"@":{controller:"FrontendController",controllerAs:"frontendController"}}}),o.state("backend",{parent:"main",url:"/admin",data:{role:["ROLE_ADMIN","ROLE_SUPER_ADMIN"]},resolve:{isSuperAdmin:["auth","$state","$q",function(t,e,o){var n=o.defer(),i=function(){n.resolve(!0)},s=function(){n.resolve(!1)};t.hasRole("ROLE_SUPER_ADMIN").then(i,s);return n.promise}]},redirectTo:"backend.workshops",views:{"main@backend":{},"navbar@backend":{},"footer@backend":{},"offcanvas@":{controller:"BackendController",controllerAs:"backendController"},"@":{controller:"BackendController",controllerAs:"backendController"}}}),o.state("backend.workshops",{url:"?{expand:int}",data:{role:["ROLE_ADMIN","ROLE_SUPER_ADMIN"]},resolve:{workshops:["Workshop",function(t){return t.list().$promise}]},params:{expand:{value:null,dynamic:!0}},controller:"WorkshopController",controllerAs:"workshopController"}),o.state("backend.admins",{url:"/trainer",data:{role:"ROLE_SUPER_ADMIN",redirects:{ROLE_ADMIN:"backend"}},resolve:{admins:["Admin",function(t){return t.list().$promise}]},controller:"AdminController",controllerAs:"adminController"}),o.state("login",{url:"/login",parent:"main","abstract":!0,redirectTo:"login.frontend.index"}),o.state("login.frontend",{url:"/app",data:{redirects:{ROLE_USER:"frontend"}},redirectTo:"login.frontend.index",controller:"LoginFrontendController",controllerAs:"loginFrontendController"}),o.state("login.frontend.index",{url:""}),o.state("login.frontend.signup",{url:"/schule"}),o.state("login.frontend.signin",{url:"/zuhause"}),o.state("login.backend",{url:"/admin",data:{redirects:{ROLE_ADMIN:"backend",ROLE_SUPER_ADMIN:"backend"}},controller:"LoginBackendController",controllerAs:"loginBackendController"}),n.otherwise("/")}]),n.run(["$injector",function(t){var o=t.get("$transitions"),n=t.get("$rootScope"),i=t.get("appState"),s=t.get("$state"),r=t.get("auth"),a=function(t){i.routerBusy=!0;var o=t.to(),n=o.data||{},a=n.role||null,c=n.redirects||{};if(null===a){var l=r.getUser();if(null===l)return;var u=l.roles||[];for(a in c)if(u.indexOf(a)>=0){var h=c[a];return s.target(h)}return!0}e.isArray(a)||(a=[a]);var p=function(){return!0},d=function(){switch(a[0]){case"ROLE_ADMIN":case"ROLE_SUPER_ADMIN":return s.target("login.backend");default:return s.target("login.frontend")}};return r.hasRole(a).then(p,d)},c=function(){i.routerBusy=!1},l=function(t){n.state=t.to(),i.routerBusy=!1};n.$watch(function(){return i.isBusy()},function(t){n.isBusy=t,n.httpBusy=i.httpBusy,n.routerBusy=i.routerBusy}),o.onError({},c),o.onStart({},a),o.onSuccess({},l),FastClick.attach(document.body)}]),t.ANGULAR_MODULE=o}(window,angular),function(t,e){"use strict";var o=function(t){this.$injector=t,this._urls={}};o.$inject=["$injector"],o.prototype.getLastSuccessResponse=function(){return this._lastSuccessResponse},o.prototype.getLastErrorResponse=function(){return this._lastErrorResponse},o.prototype.getLastResponse=function(){return this._lastResponse},o.prototype.getUrls=function(){return this._urls},o.prototype.request=function(t){var e=this.$injector.get("appState");e.httpBusy=!0,this._setUrl(t),t.headers["X-Requested-With"]="XMLHttpRequest";var o=function(e){return e&&(t.headers.Authorization="Bearer "+e),t},n=function(){return t};if(t.skipAuthorization)return t;var i=this._getJWTToken(t),s=this.$injector.get("$q");return s.when(i).then(o,n)},o.prototype.requestError=function(t){var e=this.$injector.get("appState"),o=this.$injector.get("$q");return e.httpBusy=!1,o.reject(t)},o.prototype.response=function(t){var e=this.$injector.get("appState");return this._setLastSuccessResponse(t),this._setLastResponse(t),e.httpBusy=!1,t},o.prototype.responseError=function(t){var e=this.$injector.get("appState"),o=this.$injector.get("$q");return this._showGlobalErrorMessage(t),this._setLastErrorResponse(t),this._setLastResponse(t),e.httpBusy=!1,o.reject(t)},o.prototype._setUrl=function(t){var e=this.$injector.get("$httpParamSerializer"),o=e(t.params),n=t.url+(o?"?"+o:"");this._urls[n]=!0},o.prototype._setLastResponse=function(t){this._lastResponse=t},o.prototype._setLastErrorResponse=function(t){this._lastErrorResponse=t},o.prototype._setLastSuccessResponse=function(t){this._lastSuccessResponse=t},o.prototype._showGlobalErrorMessage=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=t.config||{};if(!n.skipGlobalErrorMessage){var i=t.data||{};i.message&&e.error(o.get(i.message))}},o.prototype._getJWTToken=function(){var t=this.$injector.get("auth"),e=this.$injector.get("jwt"),o=e.getToken();if(!o)return null;if(e.isExpired(o,600)){var n=function(){return e.getToken()},i=function(){return null};return t.refresh().then(n,i)}return e.getToken()},e.module(t).factory("httpInterceptor",["$injector",function(t){var e=t.instantiate(o);return{getUrls:function(){return e.getUrls()},getLastResponse:function(){return e.getLastResponse()},getLastErrorResponse:function(){return e.getLastErrorResponse()},getLastSuccessResponse:function(){return e.getLastSuccessResponse()},request:function(t){return e.request(t)},response:function(t){return e.response(t)},requestError:function(t){return e.responseError(t)},responseError:function(t){return e.responseError(t)}}}])}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(){};o.$inject=[],o.prototype.notify=function(t,e,o){return e=e||"default",o=o||{},o.message=t,o.status=e,UIkit.notification(o)},o.prototype.success=function(t,e){this.notify(t,"success",e)},o.prototype.primary=function(t,e){this.notify(t,"primary",e)},o.prototype.error=function(t,e){this.notify(t,"danger",e)},o.prototype.warning=function(t,e){this.notify(t,"warning",e)},o.prototype.closeAll=function(){UIkit.notification.closeAll()},e.module(t).service("notification",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t};o.$inject=["$injector"],o.prototype.httpBusy=!1,o.prototype.routerBusy=!1,o.prototype.isBusy=function(){return this.httpBusy||this.routeBusy},e.module(t).service("appState",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t};o.$inject=["$injector"],o.prototype.animationEndEvent=function(){var t=document.createElement("div"),e={WebkitAnimation:"webkitAnimationEnd",MozTAnimation:"animationend",animation:"animationend"};for(var o in e){var n=t.style[o];if(void 0!==n)return e[o]}return null}(),o.prototype.transitionEndEvent=function(){var t=document.createElement("div"),e={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(var o in e){var n=t.style[o];if(void 0!==n)return e[o]}return null}(),o.prototype.translate=function(t,o,n){var i=this.$injector.get("string"),s=e.isUndefined(n)?i.sprintf("translate(%spx,%spx)",t,o):i.sprintf("translate3d(%spx,%spx,%spx)",t,o,n);return{webkitTransform:s,mozTransform:s,msTransform:s,oTransform:s,transform:s}},o.prototype.requestAnimationFrame=function(){for(var t=0,e=["ms","moz","webkit","o"],o=0;o<e.length&&!window.requestAnimationFrame;o++)window.requestAnimationFrame=window[e[o]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[o]+"CancelAnimationFrame"]||window[e[o]+"CancelRequestAnimationFrame"];return window.requestAnimationFrame||(window.requestAnimationFrame=function(e){var o=(new Date).getTime(),n=Math.max(0,16-(o-t)),i=function(){e(o+n)},s=window.setTimeout(i,n);return t=o+n,s}),window.requestAnimationFrame.bind(window)}(),o.prototype.cancelAnimationFrame=function(){return window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)}),window.cancelAnimationFrame.bind(window)}(),e.module(t).service("animation",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(){this._spareRandomCache=null};o.$inject=[],o.prototype.between=function(t,e){t="undefined"!=typeof t?t:0,e="undefined"!=typeof e?e:1;var o=e-t+1,n=Math.random();return Math.floor(n*o+t)},o.prototype.gaussian=function(t,e){e="undefined"!=typeof e?e:1,t="undefined"!=typeof t?t:0;var o=this._spareRandomCache;if(null!==this._spareRandomCache)return this._spareRandomCache=null,t+e*o;var n,i,s;do n=2*Math.random()-1,i=2*Math.random()-1,s=n*n+i*i;while(s>=1||0===s);var r=Math.sqrt(-2*Math.log(s)/s);return this._spareRandomCache=i*r,t+e*n*r},o.prototype.pick=function(t){return t[this.between(0,t.length-1)]},o.prototype.push=function(t,e){var o=this.between(0,t.length-1);return t.push(t[o]),t[o]=e,t.length},o.prototype.shuffle=function(t){for(var e=t.length-1;e>0;e--){var o=this.between(0,e),n=t[e];t[e]=t[o],t[o]=n}return t},e.module(t).service("random",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(){};o.$inject=[],o.prototype.sprintf=function(t,o){e.isArray(o)||(o=[].slice.call(arguments,1));for(var n=0;n<o.length;n++)t=t.replace(/%s/,o[n]);return t},o.prototype.truncate=function(t,e){return e=e||20,t.length<=e?t:t.substring(0,e)+"..."},o.prototype.trim=function(t){return t.replace(/^\s+|\s+$/g,"")},o.prototype.toCamel=function(t){return t.replace(/([-_][a-z])/g,function(t){return t.toUpperCase().replace(/[-_]/,"")})},o.prototype.toSpinal=function(t){return t.replace(/([A-Z]|_[a-z])/g,function(t){return"-"+t.toLowerCase().replace(/_/,"")})},o.prototype.toSnake=function(t){return t.replace(/([A-Z]|-[a-z])/g,function(t){return"_"+t.toLowerCase().replace(/-/,"")})},e.module(t).service("string",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t};o.MODE_COOKIES="COOKIES",o.MODE_STORAGE="STORAGE",o.$inject=["$injector"],o.prototype.getProxy=function(t){switch(t){case o.MODE_COOKIES:return this._getCookieProxy();case o.MODE_STORAGE:return this._getLocalStorageProxy();default:return this.supportsLocalStorage()?this._getLocalStorageProxy():this._getCookieProxy()}},o.prototype.supportsLocalStorage=function(){var t=this.$injector.get("$window"),e=t.localStorage,o="__local__storage__feature__test",n="__local__storage__feature__test";try{e.setItem(o,n),e.removeItem(o)}catch(i){return!1}return!0},o.prototype._encode=function(t){try{t=JSON.stringify(t)}catch(e){t=void 0}return encodeURIComponent(t)},o.prototype._decode=function(t){var e;switch(typeof t){case"string":e=decodeURIComponent(t);try{e=JSON.parse(e)}catch(o){}break;default:e=void 0}return"undefined"===e&&(e=void 0),void 0===e&&(e=null),e},o.prototype._getCookieProxy=function(){var t=this.$injector.get("$document"),e=this,o=function(o){var n={},i=t.cookie.split("; ");if(1===i.length&&""===i[0])return n;for(var s=0;s<i.length;s++){var r=i[s].split("=");o?n[r[0]]=e._decode(r[1]):n[r[0]]=r[1]}return n},n=function(o,n,i,s,r,a){n=e._encode(n);try{var c=new Date(i);if(isNaN(c)){var l=i;throw i=void 0,new Error('storage.js: "'+l+'" cannot be converted to date string!')}i=c.toUTCString()}catch(u){}i=!!i&&i;var h=o+"="+n;h+=i?";expires="+i:"",h+=s?";domain="+s:"",h+=r?";path="+r:"",h+=a?";secure":"",t.cookie=h},i=function(t){var n=o(!1);return n.hasOwnProperty(t)?e._decode(n[t]):null},s=function(){return o(!0)},r=function(t){n(t,"",-1)},a=function(){for(var t in s())r(t)};return{getItem:i,getAllItems:s,setItem:n,removeItem:r,removeAllItems:a}},o.prototype._getLocalStorageProxy=function(){var t=this.$injector.get("$window"),e=t.localStorage,o=this,n=function(t,n){n=o._encode(n),e.setItem(t,n)},i=function(t){var n=e.getItem(t);return o._decode(n)},s=function(){for(var t={},o=0;o<e.length;o++){var n=e.key(o);t[n]=i(n)}return t},r=function(t){e.removeItem(t)},a=function(){e.clear()};return{getItem:i,getAllItems:s,setItem:n,removeItem:r,removeAllItems:a}},e.module(t).service("storage",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t};o.$inject=["$injector"],o.prototype.signup=function(t,o,n){var i=this.$injector.get("$http");o=o||"frontend",n=n||{};var s=this,r=function(t){s._saveToken(t.data)},a=function(){},c=this._getSignupUrl(o),l=i.post(c,{_username:t.username,_password:t.password},e.extend(n||{}));return l.then(r,a),l},o.prototype.signin=function(t,o,n){var i=this.$injector.get("$http");o=o||"frontend",n=n||{};var s=this,r=function(t){s._saveToken(t.data)},a=function(){},c=this._getSigninUrl(o),l=i.post(c,{_username:t.username,_password:t.password},e.extend(n||{},{skipAuthorization:!0}));return l.then(r,a),l},o.prototype.signout=function(t){var e=this.$injector.get("$http"),o=this.$injector.get("user"),n=this.$injector.get("jwt"),i=function(){n.invalidate(),o.unload()},s=function(){};return e.get(this._getSignoutUrl(),t||{}).then(i,s)},o.prototype.refresh=function(t){var o=this.$injector.get("$http"),n=this.$injector.get("jwt"),i=this,s=function(t){return i._saveToken(t.data),t},r=function(t){return t},a=o.post(this._getRefereshUrl(),{refresh_token:n.getRefreshToken()},e.extend(t||{},{skipAuthorization:!0}));return a.then(s,r)},o.prototype.getUser=function(t){t=t||!1;var e=this.$injector.get("jwt"),o=e.getToken();return o?!t&&e.isExpired()?null:e.decode(o):null},o.prototype.hasRole=function(t){var o=this.$injector.get("jwt"),n=this.$injector.get("$q"),i=n.defer(),s=i.promise,r=e.isArray(t);if(r&&0===t.length)return i.reject(null),s;if(!t)return i.reject(null),s;var a=this.getUser(!0);if(null===a)return i.reject(null),s;var c=function(o){var n=o.roles||[];e.isString(t)&&(t=[t]);for(var s=!1,r=0;r<t.length;r++)if(n.indexOf(t[r])>=0){s=!0;break}return s?void i.resolve():void i.reject()};if(!o.isExpired())return c(a),s;var l=this,u=function(){a=l.getUser(),c(a)},h=function(){i.reject()};return this.refresh().then(u,h),s},o.prototype._saveToken=function(t){var e=this.$injector.get("jwt");e.setRefreshToken(t.refresh_token),e.setToken(t.token)},o.prototype._getSigninUrl=function(t){var e=this.$injector.get("API_URL");switch(t){case"backend":case"frontend":return e+"/auth/"+t+"/signin";default:throw new Error("Unknown firewall name: "+t)}},o.prototype._getSignupUrl=function(t){var e=this.$injector.get("API_URL");switch(t){case"frontend":return e+"/auth/"+t+"/signup";case"backend":throw new Error("Not implemented yet!");default:throw new Error("Unknown firewall name: "+t)}},o.prototype._getRefereshUrl=function(){var t=this.$injector.get("API_URL");return t+"/auth/refresh"},o.prototype._getSignoutUrl=function(){var t=this.$injector.get("API_URL");return t+"/signout"},e.module(t).service("auth",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.translations={},this.$injector=t,this.setLocale(this._detectLocale())};o.$inject=["$injector"],o.prototype.locales={de:!0},o.prototype.defaultLocale="de",o.prototype.load=function(t,e){if(t=t||this.getLocale(),e=e||{},!this.translations[t]){var o=this.$injector.get("$http"),n=this.$injector.get("$log"),i=this,s=this._getJSONUrl(t),r=function(e){i.translations[t]=e.data},a=function(){n.error("Could not load translations!")};return o.get(s,e).then(r,a)}},o.prototype.setLocale=function(t){return this.locales[t]?void(this.locale=t):void(this.locale=this.defaultLocale)},o.prototype.getLocale=function(){return this.locale},o.prototype.get=function(t){var e,o=this.$injector.get("string"),n=[].slice.call(arguments,1),i=this.getLocale();try{e=this.translations[i][t]}catch(s){}return o.sprintf(e||t,n)},o.prototype._getJSONUrl=function(t){return"json/"+t+".json"},o.prototype._detectLocale=function(){var t,e=this.$injector.get("$window").navigator,o=/android.*\W(\w\w)-(\w\w)\W/i;return e&&e.userAgent&&(t=e.userAgent.match(o))&&(t=t[1]),!t&&e&&(e.language?t=e.language:e.userLanguage?t=e.userLanguage:e.systemLanguage?t=e.systemLanguage:e.browserLanguage&&(t=e.browserLanguage)),t?t.substr(0,2):this.defaultLocale},e.module(t).service("i18n",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){this.$injector=t,this.storage=e.getProxy()};o.$inject=["$injector","storage"],o.prototype.tokenKey="NAksNyshI3",o.prototype.refreshKey="i08BFNG9t5",o.prototype.invalidate=function(){this.removeRefreshToken(),this.removeToken()},o.prototype.getToken=function(){return this.storage.getItem(this.tokenKey)},o.prototype.setToken=function(t){this.storage.setItem(this.tokenKey,t)},o.prototype.removeToken=function(){this.storage.removeItem(this.tokenKey)},o.prototype.getRefreshToken=function(){return this.storage.getItem(this.refreshKey)},o.prototype.setRefreshToken=function(t){this.storage.setItem(this.refreshKey,t)},o.prototype.removeRefreshToken=function(){this.storage.removeItem(this.refreshKey)},o.prototype.getExpirationDate=function(t){var e=this.$injector.get("$log");if(t=t||this.getToken(),!t)return e.error("No token given or available!"),null;var o=this.decode(t);if("undefined"==typeof o.exp)return e.error("No `exp` property available!"),null;var n=new Date(0);return n.setUTCSeconds(o.exp),n},o.prototype.isExpired=function(t,e){e=e||0,t=t||this.getToken();var o=this.getExpirationDate(t);if(null===o)return!0;var n=(new Date).valueOf();return e=n+1e3*e,o=o.valueOf(),o<=e},o.prototype.decode=function(t){var o=this.$injector.get("$log");try{var n=t.split(".");if(3!==n.length)throw new Error("JWT must have 3 parts!");var i=this._base64Decode(n[1]);if(!i)throw new Error("Cannot decode the token!");return e.fromJson(i)}catch(s){return o.error(s),null}},o.prototype._base64Decode=function(t){var e=this.$injector.get("$window"),o=this.$injector.get("$log"),n=t.replace(/-/g,"+").replace(/_/g,"/");try{switch(n.length%4){case 0:break;case 2:n+="==";break;case 3:n+="=";break;default:throw new Error("Illegal base64url code!")}}catch(i){return o.error(i),""}var s=e.atob(n),r=e.escape(s);return e.decodeURIComponent(r)},e.module(t).service("jwt",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t,this._states=[t.get("STATE_BEGINNER"),t.get("STATE_AMATEUR"),t.get("STATE_ADVANCED"),t.get("STATE_EXPERT")],this._eventSource=null,this._results=[],this._payload={},this._pending={},this._tasks={}};o.$inject=["$injector"],o.prototype.state=null,o.prototype.group=null,o.prototype.tickets=null,o.prototype.load=function(){var t=this.$injector.get("User"),e=this.$injector.get("jwt"),o=this,n=function(t){o._payload=t.toJSON(),o._initTickets(),o._initState(),o._initGroup(),o.isUser()&&(o._initWatches(),o._initTasks(),o._initPending(),o._initResults(),o._initSSE())},i=function(t){e.invalidate()},s=t.current();return s.$promise.then(n,i),s},o.prototype.unload=function(){var t=this.$injector.get("sse");this._eventSource&&t.removeSource(this._eventSource),this._unwatchTickets&&this._unwatchTickets(),this._unwatchState&&this._unwatchState(),this._eventSource=null,this._results=[],this._payload={},this._pending={},this._tasks={},this.tickets=null,this.state=null,this.group=null},o.prototype.update=function(t){this._payload=t.user,this._addResult(t),this._initTickets(),this._initState(),this._initGroup()},o.prototype.isUser=function(){return this.hasRole("ROLE_USER")},o.prototype.isAdmin=function(){return this.hasRole("ROLE_ADMIN")},o.prototype.isSuperAdmin=function(){return this.hasRole("ROLE_SUPER_ADMIN")},o.prototype.isInWorkshop=function(){return!this.isUser()||this._payload.workshop.isActive},o.prototype.hasRole=function(t){e.isArray(t)||(t=[t]);for(var o=this._payload.roles||[],n=0;n<t.length;n++)if(o.indexOf(t[n])>=0)return!0;return!1},o.prototype.getTasks=function(){return this._tasks},o.prototype.getTaskByType=function(t){return this._tasks[t]||null},o.prototype.getPendingByType=function(t){return this._pending[t]||null},o.prototype.getGroupAsString=function(){switch(this.group){case this.$injector.get("GROUP_A"):return"GROUP_A";case this.$injector.get("GROUP_B"):return"GROUP_B";default:return null}},o.prototype.getStateAsString=function(){switch(this.state){case this.$injector.get("STATE_AMATEUR"):return"STATE_AMATEUR";case this.$injector.get("STATE_ADVANCED"):return"STATE_ADVANCED";case this.$injector.get("STATE_EXPERT"):return"STATE_EXPERT";default:return"STATE_BEGINNER"}},o.prototype._initState=function(){var t=this.$injector.get("STATE_BEGINNER");this.state=this._payload.state||t},o.prototype._initGroup=function(){this.group=this._payload.group||null},o.prototype._initTickets=function(){var t=this._payload.tickets;this.tickets=t||[]},o.prototype._initWatches=function(){var t=this.$injector.get("notification"),e=this.$injector.get("$rootScope"),o=this.$injector.get("i18n"),n=this,i=function(){return n.state},s=function(e,i){e!==i&&t.success(o.get("Congratulations, you have reached the state %s!",o.get(n.getStateAsString())))},r=function(){return n.tickets},a=function(e,n){if(e!==n){var i=n&&n.length,s=e&&e.length,r=s-i;if(!(r<0)){var a=1===r?o.get("Congratulations, you have earned 1 new ticket!"):o.get("Congratulations, you have earned %s new tickets!",r);t.primary(a)}}};this._unwatchTickets=e.$watchCollection(r,a),this._unwatchState=e.$watch(i,s)},o.prototype._initSSE=function(){var t=this.$injector.get("$rootScope"),o=this.$injector.get("API_URL"),n=this.$injector.get("sse"),i=this._payload.workshop;if(i.isActive){var s=this,r=function(o){t.$evalAsync(function(){e.forEach(o,function(t){var e=Date.parse(t.updatedAt),o=s._tasks[t.type];o.isActive=!!t.isActive,isNaN(e)||(t.updatedAt=e)})})},a=o+"/sse/workshop/"+i.id+"/tasks",c={onMessage:r,sleep:1};this._eventSource=n.addSource(a,c)}},o.prototype._initTasks=function(){var t=this._payload.workshop;if(t){var o=this;e.forEach(t.tasks,function(t){o._tasks[t.type]=t})}},o.prototype._initPending=function(){var t=this._payload.pending;if(t){var o=this;e.forEach(t,function(t){o._pending[t.task.type]=t})}},o.prototype._initResults=function(){var t=this._addResult.bind(this),o=this._payload.results||[];e.forEach(o,t)},o.prototype._addResult=function(t){var e=this.getTaskByType(t.task.type);if(null!==e){var o=e.$$results||0;e.$$results=o+1}this._results.push(t)},e.module(t).service("user",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t};o.$inject=["$injector"],o.prototype.send=function(t,e){var o=this.$injector.get("notification"),n=this.$injector.get("$http"),i=this.$injector.get("i18n"),s=function(){o.success(i.get("Your email has been sent!"))},r=function(){},a=n.post(this._getPostUrl(),{_name:t.name,_mail:t.email,_subject:t.subject,_message:t.message},e||{});return a.then(s,r),a},o.prototype._getPostUrl=function(){var t=this.$injector.get("API_URL");return t+"/mail"},e.module(t).service("mail",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t,this._sources={}};o.$inject=["$injector"],o.prototype.addSource=function(t,o){o=o||{},o.retry=o.retry||null,o.event=o.event||null,o.sleep=o.sleep||null,o.onError=o.onError||function(){},o.onMessage=o.onMessage||function(){},t=this._buildUrl(t,o);var n=new EventSource(t);return n.onmessage=function(t){var n=e.fromJson(t.data);o.onMessage.call(this,n,t)},n.onerror=function(t){o.onError.call(this,t)},this._sources[t]=n,n},o.prototype.removeSource=function(t){delete this._sources[t.url],t.close()},o.prototype._buildUrl=function(t,e){var o=this.$injector.get("jwt"),n=o.getToken();return t=t+"?bearer="+n,e.event&&(t+="&event="+e.event),e.sleep&&(t+="&sleep="+e.sleep),e.retry&&(t+="&retry="+e.retry),t},e.module(t).service("sse",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(){};o.$inject=["$scope","$element","$attrs"],o.prototype.cards=[],o.prototype.canToggle=!1,o.prototype.add=function(t){this.cards.push(t)},o.prototype.set=function(t){if(t.selected&&!this.canToggle)return!1;var o=!!t.selected;return t.selected=!o||null,e.forEach(this.cards,function(e){e.id!==t.id&&(e.selected=!t.selected&&null)}),!0},e.module(t).directive("cardContainer",function(){return{scope:{canToggle:"=?cardContainerCanToggle"},restrict:"A",controller:o,bindToController:!0,controllerAs:"cardContainerController"}});var n=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.id=this.$scope.$id,this.hasIcon=n.isSlotFilled("icon")};n.$inject=["$scope","$element","$attrs","$transclude"],n.prototype.id=null,n.prototype.data=null,n.prototype.selected=null,n.prototype.disabled=null,n.prototype.hasIcon=null,n.prototype.isCheckbox=!1,n.prototype.$onInit=function(){this.cardContainer&&this.cardContainer.add(this)},n.prototype.click=function(t){if(!this.disabled){if(t.stopPropagation(),t.preventDefault(),this.cardContainer){var e=this.cardContainer.set(this);if(!e)return}this.onClick({data:this.data,selected:this.selected,disabled:this.disabled})}},e.module(t).directive("card",function(){return{scope:{data:"=?cardData",onClick:"&cardOnClick",selected:"=?cardSelected",disabled:"=?cardDisabled",isCheckbox:"=?cardIsCheckbox"},restrict:"A",transclude:{text:"cardText",title:"cardTitle",icon:"?cardIcon",buttons:"?cardButtons"},controller:n,bindToController:!0,controllerAs:"cardController",require:{cardContainer:"^?cardContainer"},templateUrl:"views/directives/card.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n,this._chart=null};o.$inject=["$scope","$attrs","$element","$injector"],o.prototype.data=[],o.prototype.$onInit=function(){var t=this._getOptions(),e={labels:this._getLabels(),series:this._getData()};this._render(e,t)},o.prototype.$onDestroy=function(){null!==this._chart&&(this._chart.detach(),this._chart=null)},o.prototype._getData=function(){var t,o=this.$injector.get("GROUP_A"),n=this.$injector.get("GROUP_B"),i=this,s={},r=[];switch(i.task.type){case i.$injector.get("TYPE_ANCHORING"):case i.$injector.get("TYPE_MENTAL_BOOKKEEPING"):s[o]={choice1:0,choice2:0,count:0},s[n]={choice1:0,choice2:0,count:0},t=function(t){var e=t.json.group;switch(t.json.choice){case 1:s[e].choice1++;break;case 2:s[e].choice2++}s[e].count++},e.forEach(this.results,t);var a=s[o],c=s[n];r.push([a.choice1/a.count,c.choice1/c.count]),r.push([a.choice2/a.count,c.choice2/c.count]);break;case i.$injector.get("TYPE_PROCRASTINATION"):var l="SPLIT",u="ALL";s[l]={success:0,failure:0,count:0},s[u]={success:0,failure:0,count:0},t=function(t){var e=t.json.mode;t.json.success?s[e].success++:s[e].failure++,s[e].count++},e.forEach(this.results,t);var h=s[l],p=s[u];r.push([h.success/h.count,p.success/p.count]),r.push([h.failure/h.count,p.failure/p.count])}return r},o.prototype._getLabels=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):case this.$injector.get("TYPE_MENTAL_BOOKKEEPING"):return[t.get("GROUP_A"),t.get("GROUP_B")];case this.$injector.get("TYPE_PROCRASTINATION"):return[t.get("ALL"),t.get("SPLIT")];default:return[]}},o.prototype._getOptions=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):case this.$injector.get("TYPE_MENTAL_BOOKKEEPING"):return{seriesBarDistance:15,chartPadding:{top:50,left:0,right:0,bottom:0},axisY:{labelInterpolationFnc:function(t){return 100*t+"%"},ticks:[0,.2,.4,.6,.8,1],type:Chartist.FixedScaleAxis,high:1,low:0},plugins:[Chartist.plugins.legend({legendNames:[t.get("Choice 1"),t.get("Choice 2")]})]};case this.$injector.get("TYPE_PROCRASTINATION"):return{seriesBarDistance:15,chartPadding:{top:50,left:0,right:0,bottom:0},axisY:{labelInterpolationFnc:function(t){return 100*t+"%"},ticks:[0,.2,.4,.6,.8,1],type:Chartist.FixedScaleAxis,high:1,low:0},plugins:[Chartist.plugins.legend({legendNames:[t.get("Target reached"),t.get("Target dismissed")]})]};default:return{}}},o.prototype._render=function(t,e){var o=this.$injector.get("$timeout");this.$element.addClass("ct-chart");var n=this.$element.get(0),i=this,s=function(){switch(i.task.type){case i.$injector.get("TYPE_ANCHORING"):case i.$injector.get("TYPE_MENTAL_BOOKKEEPING"):case i.$injector.get("TYPE_PROCRASTINATION"):i._chart=new Chartist.Bar(n,t,e)}};o(s,100)},e.module(t).directive("chart",function(){return{scope:{task:"=?chartTask",results:"=?chartResults"},restrict:"A",controller:o,bindToController:!0,controllerAs:"chartController"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$transclude=n,this._element=null,this._modal=null,this._scope=null};o.$inject=["$scope","$attrs","$element","$transclude"],o.prototype.isVisible=!1,o.prototype.$onInit=function(){var t=this;this._onShow=function(){t.$scope.$evalAsync(t.onShow)},this._onShown=function(){t.$scope.$evalAsync(t.onShown)},this._onBeforeShow=function(){t.$scope.$evalAsync(t.onBeforeShow)},this._onHide=function(){t.$scope.$evalAsync(t.onHide)},this._onHidden=function(){t.$scope.$evalAsync(function(){t.isVisible=!1,t.onHidden()})},this._onBeforeHide=function(){t.$scope.$evalAsync(t.onBeforeHide)},this._unwatch=this.$scope.$watch("modalController.isVisible",function(e){return e?void t.transclude():void t.destroy()})},o.prototype.$onDestroy=function(){this._unwatch(),this.destroy()},o.prototype.transclude=function(){var t=this,e=function(e,o){t._element=e,t._scope=o,t._element.on("show",t._onShow),t._element.on("shown",t._onShown),t._element.on("beforeshow",t._onBeforeShow),t._element.on("hide",t._onHide),t._element.on("hidden",t._onHidden),t._element.on("beforeHide",t._onBeforeHide),t.$element.append(e),t._modal=UIkit.modal(e),t._modal.show()};this.$transclude(e)},o.prototype.destroy=function(){null!==this._element&&(this._element.off("show",this._onShow),this._element.off("shown",this._onShown),this._element.off("beforeshow",this._onBeforeShow),this._element.off("hide",this._onHide),this._element.off("hidden",this._onHidden),this._element.off("beforeHide",this._onBeforeHide),this._element.remove(),this._element=null),null!==this._scope&&(this._scope.$destroy(),this._scope=null),null!==this._modal&&(this._modal.hide(),this._modal=null)},e.module(t).directive("modal",function(){return{scope:{isVisible:"=?modal",onShow:"&modalOnShow",onHide:"&modalOnHide",onShown:"&modalOnShown",onHidden:"&modalOnHidden",onBeforeShow:"&modalOnBeforeShow",onBeforeHide:"&modalOnBeforeHide"},restrict:"A",controller:o,transclude:"element",
bindToController:!0,controllerAs:"modalController"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n,this.iconRatio=1,this.isCompact=!1,this.iconColor="currentcolor"};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.tasks={},o.prototype.tickets=[],o.prototype.tasksVisible=!1,o.prototype.ticketsVisible=!1,o.prototype.$onInit=function(){var t=this.$injector.get("user"),e=this,o=function(){return t.tickets},n=function(t){e.tickets=t};this._unwatchTickets=this.$scope.$watchCollection(o,n);var i=function(){return t.getTasks()},s=function(t){e.tasks=t};this._unwatchTasks=this.$scope.$watch(i,s)},o.prototype.$onDestroy=function(){this._unwatchTickets(),this._unwatchTasks()},o.prototype.toggleTasks=function(){this.tasksVisible=!this.tasksVisible},o.prototype.toggleTickets=function(){this.ticketsVisible=!this.ticketsVisible},e.module(t).directive("status",function(){return{scope:{iconRatio:"=?statusIconRatio",iconColor:"=?statusIconColor",isCompact:"=?statusIsCompact"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"statusController",templateUrl:"views/directives/status.html"}});var n=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n,this.ratio=1,this.color="currentcolor"};n.$inject=["$scope","$attrs","$element","$injector"],n.prototype.isBeginner=!1,n.prototype.isAmateuer=!1,n.prototype.isAdvanced=!1,n.prototype.isExpert=!1,n.prototype.isProfi=!1,n.prototype.$onInit=function(){var t=this.$injector.get("STATE_BEGINNER"),e=this.$injector.get("STATE_AMATEUR"),o=this.$injector.get("STATE_ADVANCED"),n=this.$injector.get("STATE_EXPERT"),i=this.$injector.get("user"),s=this,r=function(){return i.state},a=function(i){s.isBeginner=i>=t,s.isAmateur=i>=e,s.isAdvanced=i>=o,s.isExpert=i>=n};this._unwatch=this.$scope.$watch(r,a)},n.prototype.$onDestroy=function(){this._unwatch()},e.module(t).directive("statusIcons",function(){return{scope:{ratio:"=?statusIconsRatio",color:"=?statusIconsColor"},restrict:"A",transclude:!0,controller:n,bindToController:!0,controllerAs:"statusIconsController",templateUrl:"views/directives/status-icons.html"}});var i=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n};i.$inject=["$scope","$attrs","$element","$injector"],i.prototype.state=null,i.prototype.isCompact=!1,i.prototype.$onInit=function(){var t=this.$injector.get("user"),e=this,o=function(){return t.state},n=function(){e.state=t.getStateAsString()};this._unwatch=this.$scope.$watch(o,n)},i.prototype.$onDestroy=function(){this._unwatch()},e.module(t).directive("statusLabel",function(){return{scope:{isCompact:"=?statusLabelIsCompact"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"statusLabelController",templateUrl:"views/directives/status-label.html"}});var s=function(t,e,o,n){this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n};s.$inject=["$scope","$attrs","$element","$injector"],s.prototype.tickets=0,s.prototype.isCompact=!1,s.prototype.$onInit=function(){var t=this.$injector.get("user"),e=this,o=function(){return t.tickets},n=function(t){e.tickets=t?t.length:0};this._unwatch=this.$scope.$watchCollection(o,n)},s.prototype.$onDestroy=function(){this._unwatch()},e.module(t).directive("statusTickets",function(){return{scope:{isCompact:"=?statusTicketsIsCompact"},restrict:"A",transclude:!0,controller:s,bindToController:!0,controllerAs:"statusTicketsController",templateUrl:"views/directives/status-tickets.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.$transclude=n,this.domId="tabber-"+t.$id,this.hasExercise=n.isSlotFilled("exercise")};o.$inject=["$scope","$element","$attrs","$transclude"],o.prototype.hasExercise=!1,e.module(t).directive("tabber",function(){return{scope:{icon:"=?tabberIcon"},restrict:"A",transclude:{exercise:"?tabberExercise",description:"tabberDescription"},controller:o,bindToController:!0,controllerAs:"tabberController",templateUrl:"views/directives/tabber.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$element=e,this.$scope=t,this.$attrs=o,this.$injector=n,this._body=null,this._clone=null,this._coordinates={},this._interactable=null,this._activeClass="active",this._itemClass="draggable",this._disabledClass="disabled";var i=this;this._unwatch=t.$watch(function(){return i.disabled},function(t){t?i.$element.addClass(i._disabledClass):i.$element.removeClass(i._disabledClass),i._interactable.draggable({enabled:!t})}),this._onResize=this._onResize.bind(this)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.data=null,o.prototype.clone=!1,o.prototype.disabled=!1,o.prototype.restriction="parent",o.prototype.$onInit=function(){var t=this.$injector.get("$window");this._body=e.element(document.body),this.$element.addClass(this._itemClass);var o=this.$element.get(0);this._interactable=interact(o);var n=this,i={inertia:!0,autoScroll:!0,enabled:!this.disabled,onend:this._onEndItem.bind(this),onmove:this._onMoveItem.bind(this),onstart:this._onStartItem.bind(this),snap:{targets:[function(t,e,o){if(n._origin||(n._origin={x:o.startCoords.page.x,y:o.startCoords.page.y}),!o.dropTarget)return{x:n._origin.x,y:n._origin.y}}],endOnly:!0}};this.clone&&(e.extend(i,{manualStart:!0}),this._interactable.on("move",this._onMove.bind(this))),this._interactable.draggable(i),this._interactable.getData=this._getData.bind(this),this._window=e.element(t),this._window.on("resize",this._resize)},o.prototype.$onDestroy=function(){this._window.off("resize",this._onResize),this._interactable.unset(),this._unwatch()},o.prototype._onResize=function(){this._origin=null},o.prototype._onStartItem=function(t){var o=this.clone?this._clone:e.element(t.target);o.addClass(this._activeClass),this._trigger("onDragStart",{$event:t,$data:this.data})},o.prototype._onMoveItem=function(t){var o=this.clone?this._clone:e.element(t.target),n=(this._coordinates.x||0)+t.dx,i=(this._coordinates.y||0)+t.dy;this._translate(o,n,i),this._trigger("onDragMove",{$event:t,$data:this.data})},o.prototype._onEndItem=function(t){var o=!!t.interaction.dropTarget;if(this.clone)this._coordinates={},this._clone.remove(),this._clone=null;else{var n=e.element(t.target);n.removeClass(this._activeClass),o||this._translate(n,0,0)}this._trigger("onDragEnd",{$event:t,$data:this.data}),o&&this._trigger("onDrop",{$event:t,$data:this.data})},o.prototype._onMove=function(t){var o=t.interactable,n=t.interaction,i=t.currentTarget;if(!this.disabled){if(n.pointerIsDown&&!n.interacting()){this._clone=e.element(i).clone();var s=i.clientHeight/2,r=i.clientWidth/2,a=t.touches?t.touches[0].pageY:t.pageY,c=t.touches?t.touches[0].pageX:t.pageX;this._clone.css({left:c-r+"px",top:a-s+"px",position:"absolute"}),this._body.append(this._clone),i=this._clone.get(0)}n.start({name:"drag"},o,i)}},o.prototype._getData=function(){return this.data},o.prototype._translate=function(t,e,o){var n="translate("+e+"px,"+o+"px)";t.css({webkitTransform:n,mozTransform:n,msTransform:n,oTransform:n,transform:n}),this._coordinates.x=e,this._coordinates.y=o},o.prototype._trigger=function(t,e){this.$scope.$evalAsync(this[t].bind(this,e))},e.module(t).directive("draggable",function(){return{scope:{data:"=?draggableData",clone:"=?draggableClone",disabled:"=?draggableDisabled",onDragStart:"&draggableOnDragStart",onDragMove:"&draggableOnDragMove",onDragEnd:"&draggableOnDragEnd",onDrop:"&draggableOnDrop"},restrict:"A",controller:o,bindToController:!0,controllerAs:"draggableController"}});var n=function(t,e,o){this.$element=e,this.$scope=t,this.$attrs=o,this._interactable=null,this._enterClass="enter",this._activeClass="active",this._itemClass="dropable",this._acceptClass="draggable",this._disabledClass="disabled";var n=this;this._unwatch=t.$watch(function(){return n.disabled},function(t){t?n.$element.addClass(n._disabledClass):n.$element.removeClass(n._disabledClass)})};n.$inject=["$scope","$element","$attrs"],n.prototype.disabled=!1,n.prototype.$onInit=function(){this._body=e.element(document.body),this.$element.addClass(this._itemClass);var t="."+this._acceptClass,o=this.$element.get(0);this._interactable=interact(o).dropzone({accept:t,enabled:!this.disabled,ondrop:this._onDrop.bind(this),ondragenter:this._onDragEnter.bind(this),ondragleave:this._onDragLeave.bind(this),ondropactivate:this._onDropActivate.bind(this),ondropdeactivate:this._onDropDeactivate.bind(this)})},n.prototype.$onDestroy=function(){this._interactable.unset(),this._unwatch()},n.prototype._onDropDeactivate=function(t){this.$element.removeClass(this._activeClass);var e=t.draggable.getData();this._trigger("onDropDeactivate",{$event:t,$data:e})},n.prototype._onDropActivate=function(t){this.$element.addClass(this._activeClass);var e=t.draggable.getData();this._trigger("onDropActivate",{$event:t,$data:e})},n.prototype._onDragEnter=function(t){this.$element.addClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDragEnter",{$event:t,$data:e})},n.prototype._onDragLeave=function(t){this.$element.removeClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDragLeave",{$event:t,$data:e})},n.prototype._onDrop=function(t){this.$element.removeClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDrop",{$event:t,$data:e})},n.prototype._trigger=function(t,e){this.$scope.$evalAsync(this[t].bind(this,e))},e.module(t).directive("dropable",function(){return{scope:{disabled:"=?dropableDisabled",onDropDeactivate:"&dropableOnDropDeactivate",onDropActivate:"&dropableOnDropActivate",onDragEnter:"&dropableOnDragEnter",onDragLeave:"&dropableOnDragLeave",onDrop:"&dropableOnDrop"},restrict:"A",controller:n,bindToController:!0,controllerAs:"droppableController"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this._source=null,this._target=null,this._scroller=null,this._onClick=this._onClick.bind(this),this._onScrolled=this._onScrolled.bind(this)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.options={},o.prototype.callback=null,o.prototype.$onInit=function(){if(this.element instanceof jQuery?this._target=this.element:e.isString(this.element)&&("#"!==this.element.charAt(0)&&(this._target="#"+this.element),this._target=jQuery(this._target)),null===this._target)return void console.warn("scroll-to.js: Invalid target element!");var t="#"+this._target.id;this._source=jQuery('<a href="'+t+'"></a>'),this.options=this.options||{},this.options.offset=this.options.offset||80,this.options.duration=this.options.duration||500,this.options.easing=this.options.easing||"easeOutExpo",this.$element.on("click",this._onClick),this._source.on("scrolled",this._onScrolled),this._scroller=UIkit.scroll(this._source,this.options)},o.prototype.$onDestroy=function(){this._source.off("scrolled",this._onScrolled),this.$element.off("click",this._onClick),this._scroller.$destroy(!0),this._scroller=null,this._source=null,this._target=null},o.prototype._onClick=function(){this._scroller.scrollTo(this._target)},o.prototype._onScrolled=function(){e.isFunction(this.callback)&&this.$scope.$evalAsync(this.callback)},e.module(t).directive("scrollTo",function(){return{scope:{element:"=scrollTo",options:"=?scrollToOptions",callback:"=?scrollToCallback"},restrict:"A",controller:o,bindToController:!0}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this.user=n.get("user"),this.domId="evaluation-"+t.$id};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.domId=null,e.module(t).directive("evaluation",function(){return{scope:{parent:"=evaluation"},restrict:"A",transclude:{text:"evaluationText",customButtons:"?evaluationCustomButtons",defaultButtons:"?evaluationDefaultButtons"},controller:o,bindToController:!0,controllerAs:"evaluationController",templateUrl:"views/directives/evaluation.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.user=n.get("user")};o.$inject=["$scope","$element","$attrs","$injector"],e.module(t).directive("lockedState",function(){return{scope:{isLocked:"=?lockedState"},restrict:"A",transclude:{userText:"?userText",adminText:"?adminTExt"},controller:o,bindToController:!0,controllerAs:"lockedStateController",templateUrl:"views/directives/locked-state.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n,i){this.$scope=t,this.$attrs=o,this.$element=e,this.$timeout=i,this.$transclude=n,this._transcludeElements=[],this._transcludeScopes=[],this._cloneDefault=null,this._cloneLabel=null,this._unlisten=[],this._unwatch=[]};o.$inject=["$scope","$element","$attrs","$transclude","$timeout"],o.prototype.id="",o.prototype.label="",o.prototype.ngModel=null,o.prototype.resetEmpty=!0,o.prototype.showMessages=!1,o.prototype.labelClass="uk-form-label",o.prototype.failureClass="uk-form-danger",o.prototype.successClass="uk-form-success",o.prototype.$onInit=function(){this.id="form-field-"+this.$scope.$id,this._addWatches(),this._transclude()},o.prototype.$onDestroy=function(){e.forEach(this._transcludeElements,function(t){t.remove()}),e.forEach(this._transcludeScopes,function(t){t.$destroy()}),e.forEach(this._unlisten,function(t){t()}),e.forEach(this._unwatch,function(t){t()})},o.prototype.setModel=function(t){this.ngModel=t},o.prototype._update=function(){this.ngModel.$valid?(this._cloneDefault.removeClass(this.failureClass),this._cloneDefault.addClass(this.successClass)):(this._cloneDefault.removeClass(this.successClass),this._cloneDefault.addClass(this.failureClass)),this.showMessages=this.ngModel.$invalid},o.prototype._reset=function(){this._cloneDefault.removeClass(this.failureClass),this._cloneDefault.removeClass(this.successClass),this.ngModel.$setUntouched(),this.showMessages=!1},o.prototype._addWatches=function(){var t=this,e=this.$scope.$watchCollection("formFieldController.ngModel",function(e,o){if(e!==o&&e.$touched&&!e.$pending)return!e.$viewValue&&t.resetEmpty?void t._reset():void t._update()});this._unwatch.push(e)},o.prototype._transclude=function(){var t=this,o=function(o,n){var i="#default-"+t.id,s=e.element(i);o.attr("id",t.id),s.replaceWith(o),t._cloneDefault=o,t._transcludeScopes.push(n),t._transcludeElements.push(o)},n=function(o,n){var i="#label-"+t.id,s=e.element(i);o.attr("for",t.id),o.addClass(t.labelClass),s.replaceWith(o),t._cloneLabel=o,t._transcludeScopes.push(n),t._transcludeElements.push(o)},i=function(){t.$transclude(o,null,null),t.$transclude(n,null,"label")};this.$timeout(i)},e.module(ANGULAR_MODULE).directive("formField",function(){return{scope:{name:"=formField",resetEmpty:"=?formFieldResetEmpty",labelClass:"=?formFieldLabelClass",failureClass:"=?formFieldFailureClass",successClass:"=?formFieldSuccessClass"},transclude:{label:"?label",messageMin:"?messageMin",messageMax:"?messageMax",messageUrl:"?messageUrl",messageEmail:"?messageEmail",messageNumber:"?messageNumber",messagePattern:"?messagePattern",messageRequired:"?messageRequired",messageMinlength:"?messageMinlength",messageMaxlength:"?messageMaxlength",messagesCustom:"?messagesCustom"},restrict:"A",controller:o,bindToController:!0,controllerAs:"formFieldController",templateUrl:"views/directives/form-field.html"}});var n=function(t,e,o,n){this.$log=n,this.$scope=t,this.$attrs=e,this.$element=o};n.$inject=["$scope","$attrs","$element","$log"],n.prototype.$onInit=function(){return this.formField?void this.formField.setModel(this.ngModel):void this.$log.warn("formFieldModel: No form field controller found!")},e.module(t).directive("formFieldModel",function(){return{restrict:"A",require:{ngModel:"ngModel",formField:"^?formField"},bindToController:!0,controller:n}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n,i){this.$q=n,this.$scope=t,this.$attrs=o,this.$element=e,this.Workshop=i,this.keyLocked="validatorWorkshopLocked"};o.$inject=["$scope","$element","$attrs","$q","Workshop"],o.prototype.$onInit=function(){this.ngModel.$asyncValidators.validatorWorkshopExists=this.validate.bind(this)},o.prototype.validate=function(t){var e=this.$q.defer(),o=this,n=function(t){return t.isActive?(o.ngModel.$setValidity(o.keyLocked,!0),void e.resolve()):(o.ngModel.$setValidity(o.keyLocked,!1),void e.reject())},i=function(){e.reject()};return this.Workshop.validateWorkshopFrontend({code:t},n,i),e.promise},e.module(ANGULAR_MODULE).directive("validatorWorkshopExists",function(){return{restrict:"A",require:{ngModel:"ngModel"},bindToController:!0,controller:o}});var n=function(t,e,o,n,i){this.$q=n,this.$scope=t,this.$attrs=o,this.$element=e,this.Workshop=i};n.$inject=["$scope","$element","$attrs","$q","Workshop"],n.prototype.$onInit=function(){this.ngModel.$asyncValidators.validatorWorkshopUnique=this.validate.bind(this)},n.prototype.validate=function(t){var e=this.$q.defer(),o=function(){e.reject()},n=function(){e.resolve()};return this.Workshop.validateWorkshopBackend({code:t},o,n),e.promise},e.module(ANGULAR_MODULE).directive("validatorWorkshopUnique",function(){return{restrict:"A",require:{ngModel:"ngModel"},bindToController:!0,controller:n}});var i=function(t,e,o,n,i){this.$q=n,this.$scope=t,this.$attrs=o,this.$element=e,this.Admin=i};i.$inject=["$scope","$element","$attrs","$q","Admin"],i.prototype.$onInit=function(){this.ngModel.$asyncValidators.validatorAdminUnique=this.validate.bind(this)},i.prototype.validate=function(t){var e=this.$q.defer(),o=function(){e.reject()},n=function(){e.resolve()};return this.Admin.validateAdmin({username:t},o,n),e.promise},e.module(ANGULAR_MODULE).directive("validatorAdminUnique",function(){return{restrict:"A",require:{ngModel:"ngModel"},bindToController:!0,controller:i}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_INTEREST"),s=n.get("user");this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this.task=s.getTaskByType(i)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.resolved=!1,o.prototype.correctAnswers=0,o.prototype.exercise1Answer=0,o.prototype.exercise2Answer=0,o.prototype.exercise1Correct=!1,o.prototype.exercise2Correct=!1,o.prototype.exercise1Result=0,o.prototype.exercise2Result=0,o.prototype.amount=1e3,o.prototype.rate=.02,o.prototype.years=1,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{exercise1:{current_result:this.exercise1Result,actual_result:this.exercise1Answer,is_valid:this.exercise1Correct},exercise2:{current_result:this.exercise2Result,actual_result:this.exercise2Answer,is_valid:this.exercise2Correct}}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(!!this.exercise1Answer&&!!this.exercise2Answer)))},o.prototype.init=function(){this.resolved=!1,this.correctAnswers=0,this.exercise1Answer=0,this.exercise2Answer=0,this.exercise1Correct=!1,this.exercise2Correct=!1,this.exercise1Result=this._calculateResult(1),this.exercise2Result=this._calculateResult(1+this.years)},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e){switch(e){case"exercise1":this.exercise1Answer=t;break;case"exercise2":this.exercise2Answer=t}this.exercise1Correct=this.exercise1Answer===this.exercise1Result,this.exercise2Correct=this.exercise2Answer===this.exercise2Result,this.exercise1Correct&&this.exercise2Correct?this.correctAnswers=2:this.exercise1Correct?this.correctAnswers=1:this.exercise2Correct?this.correctAnswers=1:this.correctAnswers=0},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},o.prototype._calculateResult=function(t){return this.amount*Math.pow(1+this.rate,t||1)},e.module(t).directive("interestTask",function(){return{scope:{rate:"=?interestTaskRate",years:"=?interestTaskYears",amount:"=?interestTaskAmount",onResolve:"&interestTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"interestTaskController",templateUrl:"views/directives/tasks/interest-task.html"}});var n=function(t,e,o){this.$element=e,this.$scope=t,this.$attrs=o,this.disabled=!1,this.stack=[],this.sum=0;var n=this;this._unwatch=t.$watch(function(){return n.sum},function(t){t||(n.sum=0,n.stack=[])})};n.$inject=["$scope","$element","$attrs"],n.prototype.disabled=!1,n.prototype.stack=[],n.prototype.sum=0,n.prototype.notes=[500,200,100,50,20,10,5],n.prototype.coins=[2,1,.5,.2,.1,.05,.02,.01],n.prototype.$onDestroy=function(){this._unwatch()},n.prototype.onDrop=function(t){this.stack.push(t),this.sum+=t,this.onUpdate({sum:this.sum})},n.prototype.revert=function(){this.sum-=this.stack.pop(),this.onUpdate({sum:this.sum})},e.module(t).directive("interestTaskExercise",function(){return{scope:{sum:"=?interestTaskExerciseSum",onUpdate:"&interestTaskExerciseOnUpdate",disabled:"=?interestTaskExerciseDisabled"},restrict:"A",transclude:!0,controller:n,bindToController:!0,controllerAs:"interestTaskExerciseController",templateUrl:"views/directives/tasks/interest-task-exercise.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_DIVERSIFICATION"),s=n.get("user");this.$injector=n,this.task=s.getTaskByType(i)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.resolved=!1,o.prototype.heads="K",o.prototype.tails="Z",o.prototype.companies={},o.prototype.tickets={},o.prototype.sides=[],o.prototype.sides=[],o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{tickets:{one:this.tickets.one.company,two:this.tickets.two.company},"throws":{one:this["throws"].one.toss,two:this["throws"].two.toss}},ticketCount:this.getTicketCount()}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(!!this.tickets.one.company&&!!this.tickets.two.company)))},o.prototype.init=function(){var t=this.$injector.get("random");this.sides=[this.heads,this.tails],this["throws"]={one:{id:1,toss:t.pick(this.sides)},two:{id:2,toss:t.pick(this.sides)}},this.tickets={one:{id:1,company:null},two:{id:2,company:null}},this.companies={one:{id:1,count:0,tickets:{},name:"Smart",image:"company-a.svg"},two:{id:2,count:0,tickets:{},name:"Phone",image:"company-b.svg"}},this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e,o){switch(o){case"add":e.tickets[t.id]||(e.tickets[t.id]=t,t.company=e.name,e.count++);break;case"remove":e.tickets[t.id]&&(delete e.tickets[t.id],t.company=null,e.count--)}},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},o.prototype.getTicketCount=function(){var t=this["throws"].one.toss===this.heads?2:1,e=this["throws"].two.toss===this.heads?2:1,o=this.companies.one.count*t,n=this.companies.two.count*e;return o+n},e.module(t).directive("diversificationTask",function(){return{scope:{onResolve:"&diversificationTaskOnResolve"},restrict:"A",transclude:!0,bindToController:!0,controller:o,controllerAs:"diversificationTaskController",templateUrl:"views/directives/tasks/diversification-task.html"}});var n=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this._element=this.$element.find(".coin"),this._animationEndEvent=this._getAnimationEndEvent()};n.$inject=["$scope","$element","$attrs","$injector"],n.prototype.toss=null,n.prototype.sides=[],n.prototype.heads="K",n.prototype.tails="Z",n.prototype.flip=!1,n.prototype.animate=!1,n.prototype.back="back",n.prototype.front="front",n.prototype.startSide="K",n.prototype.$onInit=function(){var t=this.$injector.get("$timeout"),o=this;this.sides=[{value:this.heads,"class":this.front},{value:this.tails,"class":this.back}],this.startSide!==this.heads&&(this.sides[0]["class"]=this.back,this.sides[1]["class"]=this.front),o._toss=o._getToss();var n=function(){var t=function(t){return t.value===o._toss.value?void(t["class"]=o.front):void(t["class"]=o.back)};e.forEach(o.sides,t)},i=function(e){e&&(o.onStart({toss:o._toss.value}),t(n,100),o.animate=!0)},s=function(){return o.flip},r=function(t,e){t!==e&&(o._toss=o._getToss())},a=function(){return o.toss},c=function(){o.onFinish({toss:o._toss.value}),o.animate=!1},l=function(){o.$scope.$evalAsync(c)};this.onInit({toss:o._toss.value}),this._animationEndEvent&&this._element.on(this._animationEndEvent,l),this._unwatchFlip=this.$scope.$watch(s,i),this._unwatchToss=this.$scope.$watch(a,r)},n.prototype.$onDestroy=function(){this._element.off(this._animationEndEvent),this._unwatchToss(),this._unwatchFlip()},n.prototype._getAnimationEndEvent=function(){var t=document.createElement("div"),e={WebkitAnimation:"webkitAnimationEnd",MozTAnimation:"animationend",animation:"animationend"};for(var o in e){var n=t.style[o];if(void 0!==n)return e[o]}return null},n.prototype._getToss=function(){var t=this.$injector.get("$filter"),e=this.$injector.get("random"),o=e.pick(this.sides);if(null===this.toss)return o;var n=t("filter")(this.sides,{value:this.toss});return 0===n.length?(console.warn("Invalid value for `toss` - using random value!"),o):n[0]},e.module(t).directive("diversificationTaskCoin",function(){return{scope:{toss:"=?diversificationTaskCoinToss",flip:"=?diversificationTaskCoinFlip",onInit:"&diversificationTaskCoinOnInit",onStart:"&diversificationTaskCoinOnStart",onFinish:"&diversificationTaskCoinOnFinish",startSide:"=?diversificationTaskCoinStartSide"},restrict:"A",transclude:!0,bindToController:!0,controller:n,controllerAs:"diversificationTaskCoinController",templateUrl:"views/directives/tasks/diversification-task-coin.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_RISK"),s=n.get("user");this.$scope=t,this.$attrs=e,this.$element=o,this.$injector=n,this.task=s.getTaskByType(i)};o.$inject=["$scope","$attrs","$element","$injector"],o.prototype.task=null,o.prototype.started=!1,o.prototype.stopped=!1,o.prototype.hasBomb=!1,o.prototype.resolved=!1,o.prototype.totalBoxes=0,o.prototype.remainingBoxes=0,o.prototype.collectedBoxes=0,o.prototype.avg=12,o.prototype.rows=5,o.prototype.cols=5,o.prototype.interval=1,o.prototype.random=!1,o.prototype.dynamic=!1,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{hasBomb:this.hasBomb,collectedBoxes:this.collectedBoxes},ticketCount:this.getTicketCount()}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(this.dynamic?this.stopped:!!this.collectedBoxes)))},o.prototype.init=function(){this._initMembers(),this._initMatrix(),this._initBomb(),this.dynamic||this.start()},o.prototype.reset=function(){this.init()},o.prototype.start=function(t){if(this.dynamic){var e=this.$injector.get("$interval");this._intIndex=t||0;var o=this,n=this.iterator.length;this._intervalId=e(function(){var t=o.iterator[o._intIndex];o.update(t,!0),o._intIndex++,o._intIndex===n&&o.stop()},1e3*this.interval,n-this._intIndex)}this.started=!0},o.prototype.stop=function(){if(this.dynamic&&this._intervalId){var t=this.$injector.get("$interval");t.cancel(this._intervalId)}this.stopped=!0},o.prototype.resolve=function(){var t=this.$injector.get("$q"),o=this.onResolve({payload:this.getPayload()}),n=function(t){t.$$resolved=!0},i=this,s=function(){e.forEach(i.collection,n),i.resolved=!0},r=function(){},a=t.when(o);return a.then(s,r),a},o.prototype.getTicketCount=function(){return this.hasBomb?1:this.collectedBoxes+1},o.prototype.toggle=function(t,e){var o=this.collection.indexOf(t);e?(o<0&&(this.collection.push(t),this.collectedBoxes++),t.$$active=!0):o>=0&&(this.collection.splice(o,1),t.$$active=!1,this.collectedBoxes--),this.isBomb(t)&&(this.hasBomb=!0);var n=this.totalBoxes,i=this.collectedBoxes;this.remainingBoxes=n-i},o.prototype.trackId=function(t){return t.row+"_"+t.col},o.prototype.isBomb=function(t){return e.equals(this.bomb,t)},o.prototype._initMembers=function(){this.collection=[],this.hasBomb=!1,this.started=!1,this.stopped=!1,this.resolved=!1,this.collectedBoxes=0,this.remainingBoxes=0,this.totalBoxes=this.rows*this.cols},o.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var e=[],o=0;o<this.cols;o++){var n={row:t+1,col:o+1};if(e.push(n),this.dynamic)if(this.random){var i=this.$injector.get("random");i.push(this.iterator,n)}else this.iterator.push(n)}this.matrix.push(e)}},o.prototype._initBomb=function(){var t=this.$injector.get("random"),e=t.between(0,this.rows-1),o=t.between(0,this.cols-1);this.bomb=this.matrix[e][o]},e.module(t).directive("bombTask",function(){return{scope:{avg:"=?bombTaskAvg",rows:"=?bombTaskRows",cols:"=?bombTaskCols",random:"=?bombTaskRandom",dynamic:"=?bombTaskDynamic",interval:"=?bombTaskInterval",onResolve:"&bombTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"bombTaskController",templateUrl:"views/directives/tasks/bomb-task.html"}});var n=function(){};n.prototype.model=null,n.prototype.isActive=!1,n.prototype.isDisabled=!1,n.prototype.isClickable=!0,n.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},e.module(t).directive("bombTaskCard",function(){return{scope:{model:"=bombTaskCard",onToggle:"&bombTaskCardOnToggle",isActive:"=?bombTaskCardIsActive",isDisabled:"=?bombTaskCardIsDisabled",isClickable:"=?bombTaskCardIsClickable"},restrict:"A",transclude:!0,controller:n,bindToController:!0,controllerAs:"bombTaskCardController",templateUrl:"views/directives/tasks/bomb-task-card.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_ANCHORING"),s=n.get("user");this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this.task=s.getTaskByType(i),this.group=s.getGroupAsString()};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.choice=null,o.prototype.group=!1,o.prototype.resolved=!1,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){var t=this.$injector.get("user");return{task:this.task,json:{group:t.group,choice:this.choice}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&!!this.choice))},o.prototype.init=function(){this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e){this.choice=e?t:null},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},e.module(t).directive("anchoringTask",function(){return{scope:{onResolve:"&anchoringTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"anchoringTaskController",templateUrl:"views/directives/tasks/anchoring-task.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_MENTAL_BOOKKEEPING"),s=n.get("user");this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this.task=s.getTaskByType(i),this.group=s.getGroupAsString()};o.$inject=["$scope","$element","$attrs","$injector"],
o.prototype.task=null,o.prototype.choice=null,o.prototype.group=!1,o.prototype.resolved=!1,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){var t=this.$injector.get("user");return{task:this.task,json:{group:t.group,choice:this.choice}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&!!this.choice))},o.prototype.init=function(){this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e){this.choice=e?t:null},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},e.module(t).directive("mentalBookkeepingTask",function(){return{scope:{onResolve:"&mentalBookkeepingTaskOnResolve"},restrict:"A",transclude:!0,bindToController:!0,controller:o,controllerAs:"mentalBookkeepingTaskController",templateUrl:"views/directives/tasks/mental-bookkeeping-task.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_FRAMING"),s=n.get("user");this.$injector=n,this.task=s.getTaskByType(i)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.resolved=!1,o.prototype.lotteryA=null,o.prototype.lotteryB=null,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{lotteryA:this.lotteryA,lotteryB:this.lotteryB}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(null!==this.lotteryA&&null!==this.lotteryB)))},o.prototype.init=function(){this.lotteryA=null,this.lotteryB=null,this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e){this[t]=e},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},e.module(t).directive("framingTask",function(){return{scope:{onResolve:"&framingTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"framingTaskController",templateUrl:"views/directives/tasks/framing-task.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_SAVINGS_TARGET");this.$attrs=o,this.$scope=t,this.$element=e,this.$injector=n,this._flag=!1,this.user=this.$injector.get("user"),this.task=this.user.getTaskByType(i),this.result=this.user.getPendingByType(i),this.storage=this.$injector.get("storage").getProxy(),this._storageKey="__savings__target__task__updated__at__"};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.user=null,o.prototype.task=null,o.prototype.result=null,o.prototype.step=1,o.prototype.total=3,o.prototype.wish=null,o.prototype.amount=null,o.prototype.amountRepeated=null,o.prototype.resolved=!1,o.prototype.form=null,o.prototype.minAmount=1,o.prototype.maxAmount=999,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){var t={task:this.task,json:{step:this.step,wish:this.wish,total:this.total,amount:this.amount,amountRepeated:this.amountRepeated},isPending:null===this.amountRepeated};return null!==this.result&&(t=e.extend(this.result,t)),t},o.prototype.isLocked=function(){return null===this.task||(this.task.isActive?this._flag:(this.storage.removeItem(this._storageKey),this._flag=!1,!0))},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.form.$invalid&&(!this.isLocked()&&!this.resolved))},o.prototype.init=function(){if(null!==this.result){var t=this.result.json,o=this.storage.getItem(this._storageKey);e.isNumber(o)&&(this._flag=o>=this.task.updatedAt),this.amount=t.amount,this.total=t.total,this.wish=t.wish,this.step=t.step}this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(){if(this.step<this.total&&this.step++,this.canResolve()){var t=this,e=function(){},o=function(){t.step--};this.resolve().then(e,o)}},o.prototype.resolve=function(){var t=this.$injector.get("notification"),e=this.$injector.get("i18n"),o=this.$injector.get("$q"),n=null===this.result?this.onResolve:this.onUpdate,i=n({payload:this.getPayload()}),s=this,r=function(o){if(o.isPending){if(s.step<s.total){var n=e.get("Thank you for your input!");t.success(n)}return s.result=o,s.storage.setItem(s._storageKey,s.task.updatedAt),void(s._flag=!0)}s.resolved=!0},a=function(){},c=o.when(i);return c.then(r,a),c},o.prototype.getDifference=function(){return this.amountRepeated-this.amount},e.module(t).directive("savingsTargetTask",function(){return{scope:{onUpdate:"&savingsTargetTaskOnUpdate",onResolve:"&savingsTargetTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"savingsTargetTaskController",templateUrl:"views/directives/tasks/savings-target-task.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_SELF_COMMITMENT"),s=n.get("user");this.$injector=n,this.task=s.getTaskByType(i)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.resolved=!1,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&!this.resolved)},o.prototype.init=function(){this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(){this.resolve()},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,n=function(){o.resolved=!0},i=function(){},s=t.when(e);return s.then(n,i),s},e.module(t).directive("selfCommitmentTask",function(){return{scope:{onResolve:"&selfCommitmentTaskOnResolve"},restrict:"A",transclude:!0,bindToController:!0,controller:o,controllerAs:"selfCommitmentTaskController",templateUrl:"views/directives/tasks/self-commitment-task.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o,n){var i=n.get("TYPE_PROCRASTINATION"),s=n.get("user");this.$injector=n,this.task=s.getTaskByType(i),this.result=s.getPendingByType(i),this.domId="procrastination-task-"+t.$id,this._intervalId=null,this._onInterval=this._onInterval.bind(this)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.type=null,o.prototype.task=null,o.prototype.result=null,o.prototype.mode=null,o.prototype.count=0,o.prototype.total=1,o.prototype.rounds=[],o.prototype.openRounds=null,o.prototype.minCatched=null,o.prototype.maxEscaped=null,o.prototype.updatedAt=null,o.prototype.invalidAt=null,o.prototype.state="IDLE",o.prototype.resolved=!1,o.prototype.domId=null,o.prototype.hasWarmup=!1,o.prototype.warmupMaxEscaped=2,o.prototype.warmupMinCatched=20,o.prototype.$onInit=function(){this.init()},o.prototype.$onDestroy=function(){var t=this.$injector.get("$interval");null!==this._intervalId&&t.cancel(this._intervalId)},o.prototype.getPayload=function(){var t={task:this.task,json:{mode:this.mode,state:this.state,rounds:this.rounds,success:this.hasSuccess()},isPending:this._isPending(),ticketCount:this.getTicketCount()};return null!==this.result&&(t=e.extend(this.result,t)),t},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(!this.hasWarmup,!0)))},o.prototype.init=function(){if(null!==this.result){var t=this.result.json;this.rounds=t.rounds,this.count=t.rounds.length,this.setMode(t.mode),this.setState(t.state)}this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t){switch(this.state){case"IDLE":this.setState("DECISION");break;case"DECISION":this.setState("PLAYING");break;case"PLAYING":this.count=this.rounds.push(t)}this.canResolve()&&this.resolve()},o.prototype.resolve=function(){var t=this.$injector.get("notification"),e=this.$injector.get("i18n"),o=this.$injector.get("$q"),n=null===this.result?this.onResolve:this.onUpdate,i=n({payload:this.getPayload()}),s=this,r=function(o){var n;if(o.isPending)switch(s.result=o,s.state){case"IDLE":break;case"DECISION":break;case"PLAYING":switch(s.mode){case"ALL":break;case"SPLIT":s.count>0&&(n=e.get("Super, you have succeeded exercise %s of %s!",s.count,s.total),t.success(n))}}else s.hasSuccess()?(n=e.get("Super, you have successfully done this exercise and retrieve 5 tickets!"),t.success(n)):(n=e.get("Sorry, but the time has expired for this exercise and you retrieve only 1 ticket!"),t.error(n)),s.resolved=!0},a=function(){},c=o.when(i);return c.then(r,a),c},o.prototype.setMode=function(t){switch(t){case"ALL":this.total=1,this.maxEscaped=15,this.minCatched=150;break;case"SPLIT":this.total=3,this.maxEscaped=5,this.minCatched=50;break;default:return}this.mode=t,this.openRounds=this.total-this.count},o.prototype.setState=function(t){var e=this.$injector.get("$interval");switch(t){case"IDLE":break;case"DECISION":break;case"PLAYING":var o=this.result.updatedAt;switch(this.updatedAt=moment.unix(o),this.invalidAt=this.updatedAt.clone(),this.mode){case"ALL":this.invalidAt.add(6,"weeks");break;case"SPLIT":this.invalidAt.add(2,"weeks")}this._intervalId=e(this._onInterval,1e3);break;default:return}this.state=t},o.prototype.setWarmup=function(t){this.hasWarmup=t},o.prototype.isInvalid=function(){return null!==this.invalidAt&&this._now().isAfter(this.invalidAt)},o.prototype.hasSuccess=function(){return this.rounds.length===this.total},o.prototype.getCurrentRound=function(){return this.count+1},o.prototype.getRemainingTime=function(){var t=this.$injector.get("string"),e=this.$injector.get("i18n");if(null===this.invalidAt)return"";var o,n,i=this.invalidAt.diff(this._now()),s=moment.duration(i),r=~~s.asSeconds(),a=~~s.asMinutes(),c=~~s.asHours(),l=~~s.asDays();l>0?(o=l,n=["day","days"]):c>0?(o=c,n=["hour","hours"]):a>0?(o=a,n=["minute","minutes"]):(o=r>=0?r:0,n=["second","seconds"]);var u=1===o?n[0]:n[1],h=e.get(u);return t.sprintf("%s %s",o,h)},o.prototype.getTicketCount=function(){return this.hasSuccess()?5:1},o.prototype._onInterval=function(){var t=this.$injector.get("$interval");this.isInvalid()&&this.canResolve()&&(t.cancel(this._intervalId),this.count=this.total,this.resolve())},o.prototype._isPending=function(){return this.count<this.total},o.prototype._now=function(){return moment()},e.module(t).directive("procrastinationTask",function(){return{scope:{onUpdate:"&procrastinationTaskOnUpdate",onResolve:"&procrastinationTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"procrastinationTaskController",templateUrl:"views/directives/tasks/procrastination-task.html"}});var n=function(t,o,n,i){this.$scope=t,this.$attrs=n,this.$element=o,this.$injector=i,this.domId="viewport-"+t.$id,this._nextId=0,this._tapped=0,this._rounds=0,this._retries=0,this._timeout=100,this._requestId=null,this._loop=this._loop.bind(this),this._update=this._update.bind(this),this._resize=this._resize.bind(this),this._window=e.element(window),this._viewport=this.$element.find(".viewport")};n.$inject=["$scope","$element","$attrs","$injector"],n.prototype.catched=0,n.prototype.escaped=0,n.prototype.accuracy=0,n.prototype.bubbles={},n.prototype.viewport={},n.prototype.state="IDLE",n.prototype.expired=!1,n.prototype.maxRounds=1,n.prototype.maxRetries=Number.POSITIVE_INFINITY,n.prototype.maxEscaped=15,n.prototype.minCatched=150,n.prototype.bubbleDelay=100,n.prototype.$onInit=function(){this._window.on("resize",this._resize),this._resize();var t=this;this._unwatch=this.$scope.$watch(function(){return t.expired},function(e){e&&t.expire()})},n.prototype.$onDestroy=function(){this._window.off("resize",this._resize)},n.prototype.start=function(){this._loop(),this.state="RUNNING"},n.prototype.quit=function(){this._unloop(),this._retries++,this.bubbles={},this.state="GAME_OVER";var t=this._getResult();this.onGameOver({result:t})},n.prototype.done=function(){this._unloop(),this._rounds++,this.bubbles={},this.state="GAME_DONE";var t=this._getResult();this.onGameDone({result:t})},n.prototype.expire=function(){this._unloop(),this.bubbles={},this.state="TIMEOUT"},n.prototype.reset=function(){this._unloop(),this._nextId=0,this._tapped=0,this._timeout=100,this._requestId=null,this.catched=0,this.escaped=0,this.accuracy=0,this.state="IDLE"},n.prototype.onClick=function(t){switch(this.state){case"IDLE":this.start();break;case"RUNNING":this._tapped++;var e=t.target,o=this._viewport.get(0);o.id===e.id&&this._setAccuracy();break;case"TIMEOUT":break;case"GAME_OVER":this.canRetry()&&(this.reset(),this.start());break;case"GAME_DONE":this.canRestart()&&(this.reset(),this.start())}},n.prototype.canRetry=function(){return this._retries<this.maxRetries},n.prototype.canRestart=function(){return this._rounds<this.maxRounds},n.prototype.addBubble=function(t){this.bubbles[t.id]=t},n.prototype.removeBubble=function(t){if(this.bubbles[t.id]){if(t.catched){this.catched++,this._setAccuracy();var e=this.minCatched;this.catched>=e&&this.done()}if(t.escaped){this.escaped++;var o=this.maxEscaped;this.escaped>=o&&this.quit()}delete this.bubbles[t.id]}},n.prototype._loop=function(){var t=this.$injector.get("animation");this._requestId=t.requestAnimationFrame(this._loop),this.$scope.$evalAsync(this._update)},n.prototype._unloop=function(){var t=this.$injector.get("animation");t.cancelAnimationFrame(this._requestId)},n.prototype._update=function(){var t=this.$injector.get("random");this._timeout--,0===this._timeout&&(this._timeout=t.between(0,this.bubbleDelay)+25,this.bubbles[this._nextId++]=null);for(var e in this.bubbles){var o=this.bubbles[e];o&&o.update()}},n.prototype._resize=function(){this.viewport=this._getViewport();var t=this.viewport.height,e=this.viewport.width;this.ratio=e/t;for(var o in this.bubbles){var n=this.bubbles[o];n&&n.resize()}},n.prototype._getResult=function(){return{catched:this.catched,escaped:this.escaped,accuracy:this.accuracy}},n.prototype._setAccuracy=function(){this.accuracy=this.catched/this._tapped},n.prototype._getViewport=function(){var t=this._viewport.width(),e=this._viewport.height(),o=this._viewport.scrollTop(),n=this._viewport.scrollLeft();return{top:o,left:n,width:t,height:e,right:n+t,bottom:o+e}},e.module(t).directive("procrastinationTaskGame",function(){return{scope:{expired:"=?procrastinationTaskGameExpired",maxRounds:"=?procrastinationTaskGameMaxRounds",maxRetries:"=?procrastinationTaskGameMaxRetries",onGameDone:"&procrastinationTaskGameOnGameDone",onGameOver:"&procrastinationTaskGameOnGameOver",minCatched:"=?procrastinationTaskGameMinCatched",maxEscaped:"=?procrastinationTaskGameMaxEscaped",bubbleDelay:"=?procrastinationTaskGameBubbleDelay"},restrict:"A",transclude:!0,bindToController:!0,controller:n,controllerAs:"procrastinationTaskGameController",templateUrl:"views/directives/tasks/procrastination-task-game.html"}});var i=function(t,e,o,n){this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=n,this.domId="bubble-"+t.$id};i.$inject=["$scope","$element","$attrs","$injector"],i.prototype.themes=["theme-1","theme-2","theme-3","theme-4","theme-5"],i.prototype["class"]="bubble",i.prototype.style={},i.prototype.theme=null,i.prototype.radius=null,i.prototype.speed=null,i.prototype.wave=null,i.prototype.x=null,i.prototype.y=null,i.prototype.$onInit=function(){var t=this.$injector.get("random"),e=this.gameController;this.theme=t.pick(this.themes),this.radius=t.between(0,15)+20,this.speed=t.between(0,2.5)+2,this.wave=2+this.radius,this.y=e.viewport.height+t.between(0,50)+50,this.x=t.between(this.radius,e.viewport.width)-this.radius,this._originalR=e.ratio,this._originalX=this.x,this.style={top:this.y,left:this.x,width:2*this.radius,height:2*this.radius},this.gameController.addBubble(this)},i.prototype.$onDestroy=function(){this.gameController.removeBubble(this)},i.prototype.update=function(){var t=Math.sin(.002*(new Date).getTime());this.x=this.wave*t+this._originalX,this.y=this.y-this.speed,this.style.left=this.x,this.style.top=this.y;var e=2*-this.radius;this.y>e||(this.escaped=!0,this.gameController.removeBubble(this))},i.prototype.resize=function(){var t=this.$injector.get("$timeout"),e=this,o=function(){var t=e.gameController.ratio,o=t/e._originalR;e._originalX*=o,e._resizeId=null};this._resizeId&&t.cancel(this._resizeId),this._resizeId=t(o,250)},i.prototype.onClick=function(){var t=this.$injector.get("animation"),e=this.$injector.get("$timeout"),o=t.animationEndEvent,n=this,i=function(){n.gameController.removeBubble(n)},s=function(){n.$scope.$evalAsync(i),n.$element.off(o,s)};event?this.$element.on(o,s):e(i,50),this.catched=!0},e.module(t).directive("procrastinationTaskBubble",function(){return{scope:{id:"=procrastinationTaskBubble"},restrict:"A",transclude:!0,require:{gameController:"^procrastinationTaskGame"},bindToController:!0,controller:i,controllerAs:"procrastinationTaskBubbleController",templateUrl:"views/directives/tasks/procrastination-task-bubble.html"}})}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){this.$injector=e,this.$scope=t};o.$inject=["$scope","$injector"],o.prototype.code=null,o.prototype.username=null,o.prototype.codeMinLength=8,o.prototype.codePattern=/^[A-Za-z0-9]+$/,o.prototype.userpattern=/^[A-Za-z][A-Za-z](?:0[1-9]|[12]\d|3[01])[A-Za-z]\d$/,o.prototype.signin=function(){var t=this.$injector.get("notification"),e=this.$injector.get("$state"),o=this.$injector.get("auth"),n=this.$injector.get("i18n"),i=this.$scope.loginForm;if(!i.$invalid){var s=function(){var o=n.get("You have successfully signed in!");t.success(o),e.go("frontend")},r=function(){};o.signin({username:this.username},"frontend").then(s,r)}},o.prototype.signup=function(){var t=this.$injector.get("notification"),e=this.$injector.get("$state"),o=this.$injector.get("auth"),n=this.$injector.get("i18n"),i=this.$scope.loginForm;if(!i.$invalid){var s=function(){var o=n.get("You have successfully signed up!");t.success(o),e.go("frontend")},r=function(){};o.signup({username:this.username,password:this.code},"frontend").then(s,r)}},e.module(t).controller("LoginFrontendController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){this.$injector=e,this.$scope=t};o.$inject=["$scope","$injector"],o.prototype.username=null,o.prototype.password=null,o.prototype.usernameMinLength=5,o.prototype.passwordMinLength=8,o.prototype.passwordMaxLength=4096,o.prototype.signin=function(){var t=this.$injector.get("notification"),e=this.$injector.get("$state"),o=this.$injector.get("auth"),n=this.$injector.get("i18n"),i=this.$scope.loginForm;if(!i.$invalid){var s=function(){var o=n.get("You are logged in now!");t.success(o),e.go("backend")},r=function(){};o.signin({username:this.username,password:this.password},"backend").then(s,r)}},e.module(t).controller("LoginBackendController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){this.$injector=e,this.$scope=t};o.$inject=["$scope","$injector"],o.prototype.name=null,o.prototype.email=null,o.prototype.subject=null,o.prototype.message=null,o.prototype.messageMinLength=25,o.prototype.submit=function(){var t=this.$injector.get("mail"),e=this.$scope.contactForm;if(!e.$invalid){var o=this,n=function(){o.reset()},i=function(){};t.send({name:this.name,email:this.email,subject:this.subject,message:this.message}).then(n,i)}},o.prototype.reset=function(){this.name=null,this.email=null,this.subject=null,this.message=null},e.module(t).controller("ContactController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t){this.$injector=t,this.user=t.get("user")};o.$inject=["$injector"],o.prototype.user=null,o.prototype.createResult=function(t){var e=this.$injector.get("Result"),o=this.$injector.get("user"),n=function(t){o.update(t)},i=function(){},s=new e(t),r=s.$create();return r.then(n,i),r},o.prototype.updateResult=function(t){var e=this.$injector.get("Result"),o=this.$injector.get("user"),n=function(t){o.update(t)},i=function(){},s=e.update({id:t.id},t).$promise;return s.then(n,i),s},o.prototype.logout=function(){var t=this.$injector.get("$state"),e=this.$injector.get("auth"),o=function(){t.go("login.frontend")},n=function(){};e.signout().then(o,n)},o.prototype.goTo=function(t){var e=this.$injector.get("$state");e.go(t)},e.module(t).controller("FrontendController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o){this.workshops=o,this.$injector=e,this.$scope=t,this._resultsSource=null,this._userSources={},this._workshops={},this._tasks={},this._initWorkshops(),this._initListener()};o.$inject=["$scope","$injector","workshops"],o.prototype.name=null,o.prototype.code=null,o.prototype.nameMinLength=8,o.prototype.codeMinLength=8,o.prototype.codePattern=/^[A-Za-z0-9]+$/,o.prototype.deleteWorkshop=null,o.prototype.drawingWorkshop=null,o.prototype.drawingTickets=null,o.prototype.drawingAmount=2,o.prototype.chartResults=null,o.prototype.chartTask=null,o.prototype.uiOnParamsChanged=function(t){var e=this._workshops[t.expand];return e?(e.$$expanded=!0,void(this._expanded=e)):this._expanded?(this._expanded.$$expanded=!1,void(this._expanded=null)):void 0},o.prototype.create=function(){var t=this.$injector.get("notification"),e=this.$injector.get("Workshop"),o=this.$injector.get("i18n"),n=new e({name:this.name,code:this.code}),i=this,s=function(e){var n=o.get("Workshop has been created successfully!");t.success(n),i.workshops.unshift(e),i._initWorkshop(e),i.name=null,i.code=null},r=function(){};n.$create().then(s,r)},o.prototype["delete"]=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=this,i=function(){var i=o.get("Workshop has been deleted successfully!");e.success(i);var s=n.workshops.indexOf(t);n.workshops.splice(s,1),n._removeUsersStream(t)},s=function(){};t.$delete().then(i,s)},o.prototype.markWorkshopForDrawing=function(t){var e=this.$injector.get("Ticket"),o=this.$injector.get("random"),n=this,i=function(e){n.drawingTickets=o.shuffle(e),n.drawingWorkshop=t},s=function(){},r=e.getByWorkshop({workshopId:t.id});r.$promise.then(i,s)},o.prototype.markWorkshopForDeletion=function(t){this.deleteWorkshop=t},o.prototype.toggleWorkshop=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=this,i=function(t){var i=o.get(t.isActive?"Workshop has been unlocked successfully. Students can register now!":"Workshop has been locked successfully. Students can now only use their access from home!");e.success(i),n._initWorkshop(t)},s=function(){t.isActive=!t.isActive};t.isActive=!t.isActive,t.$update().then(i,s)},o.prototype.markTaskForChart=function(t){var e=this.$injector.get("Result"),o=this,n=function(e){o.chartResults=e,o.chartTask=t},i=function(){},s=e.getByTask({taskId:t.id});s.$promise.then(n,i)},o.prototype.toggleTask=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=this.$injector.get("Task"),i=function(){var n=o.get(t.isActive?"Task has been unlocked successfully. Students can send results now!":"Task has been locked successfully. Students cannot send results currently!");e.success(n)},s=function(){t.isActive=!t.isActive};t.isActive=!t.isActive;var r=n.update({id:t.id},t);r.$promise.then(i,s)},o.prototype.expand=function(t){var e=this.$injector.get("$state"),o=t.$$expanded?null:t.id;e.go("backend.workshops",{expand:o})},o.prototype._addUsersStream=function(t){var e=this.$injector.get("API_URL"),o=this.$injector.get("sse"),n=this,i=function(e){n.$scope.$evalAsync(function(){t.$$users=e})},s=e+"/sse/workshop/"+t.id+"/users",r={onMessage:i,sleep:10},a=o.addSource(s,r);this._userSources[t.id]=a},o.prototype._removeUsersStream=function(t){var e=this.$injector.get("sse"),o=this._userSources[t.id];o&&(delete this._userSources[t.id],e.removeSource(o))},o.prototype._streamResults=function(){var t=this.$injector.get("API_URL"),o=this.$injector.get("sse"),n=this,i=function(t,i){n.$scope.$evalAsync(function(){t.isActive||o.removeSource(n._resultsSource),e.forEach(i,function(t){var e=n._tasks[t.id];e.$$results=t.results})})},s=function(){return n._expanded&&n._expanded.isActive},r=function(){if(n._resultsSource&&o.removeSource(n._resultsSource),n._expanded){var e=t+"/sse/workshop/"+n._expanded.id+"/results",s=i.bind(n,n._expanded),r={onMessage:s,sleep:5};n._resultsSource=o.addSource(e,r)}};this._unwatch=this.$scope.$watch(s,r)},o.prototype._initWorkshops=function(){var t=this.$injector.get("$uiRouterGlobals");e.forEach(this.workshops,this._initWorkshop.bind(this)),this.uiOnParamsChanged(t.params),this._streamResults()},o.prototype._initWorkshop=function(t){var o=this;e.forEach(t.tasks,function(t){var e=o._tasks[t.id]||null;t.$$results=null!==e?e.$$results:0,o._tasks[t.id]=t});var n=this._expanded&&this._expanded.id;t.$$expanded=t.id===n,t.$$users=t.users.length,t.isActive?this._addUsersStream(t):this._removeUsersStream(t),this._workshops[t.id]=t},o.prototype._initListener=function(){var t=this.$injector.get("sse"),e=this,o=function(){for(var o in e._userSources)t.removeSource(e._userSources[o]);e._resultsSource&&t.removeSource(e._resultsSource),e._resultsSource=null,e._userSources={},e._unlisten(),e._unwatch()};this._unlisten=this.$scope.$on("$destroy",o)},e.module(t).controller("WorkshopController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o){this.admins=o,this.$injector=e,this.$scope=t};o.$inject=["$scope","$injector","admins"],o.prototype.username=null,o.prototype.password=null,o.prototype.usernameMinLength=5,o.prototype.passwordMinLength=8,o.prototype.editAdmin=null,o.prototype.deleteAdmin=null,o.prototype.create=function(){var t=this.$injector.get("notification"),e=this.$injector.get("Admin"),o=this.$injector.get("i18n"),n=new e({username:this.username,password:this.password}),i=this,s=function(e){var n=o.get("Admin has been created successfully!");t.success(n),i.admins.unshift(e),i.username=null,i.password=null},r=function(){};n.$create().then(s,r)},o.prototype.markAdminForDeletion=function(t){this.deleteAdmin=t},o.prototype["delete"]=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=this,i=function(){var i=o.get("Admin has been deleted successfully!");e.success(i);var s=n.admins.indexOf(t);n.admins.splice(s,1)},s=function(){};t.$delete().then(i,s)},o.prototype.markAdminForEdit=function(t){this.editAdmin=t},o.prototype.update=function(t){var e=this.$injector.get("notification"),o=this.$injector.get("i18n"),n=function(){var t=o.get("Password has been successfully updated!");e.success(t)},i=function(){};t.$update().then(n,i)},e.module(t).controller("AdminController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){this.$injector=t,this.isSuperAdmin=e};o.$inject=["$injector","isSuperAdmin"],o.prototype.isSuperAdmin=!1,o.prototype.logout=function(){var t=this.$injector.get("$state"),e=this.$injector.get("auth"),o=function(){t.go("login.backend")},n=function(){};e.signout().then(o,n)},o.prototype.goTo=function(t){var e=this.$injector.get("$state");e.go(t)},e.module(t).controller("BackendController",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){var o=e+"/workshop/:id",n={id:"@id"},i={validateWorkshopBackend:{method:"GET",skipGlobalErrorMessage:!0,url:e+"/workshop/code/:code"},validateUsernameFrontend:{method:"GET",skipGlobalErrorMessage:!0,url:e+"/auth/validate/username/:username"},validateWorkshopFrontend:{method:"GET",skipGlobalErrorMessage:!0,url:e+"/auth/validate/workshop/:code"}},s={};return t(o,n,i,s)};o.$inject=["$resource","API_URL"],e.module(t).factory("Workshop",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){var o=e+"/ticket/:id",n={id:"@id"},i={getByWorkshop:{method:"GET",isArray:!0,url:e+"/ticket/workshop/:workshopId"}},s={};return t(o,n,i,s)};o.$inject=["$resource","API_URL"],e.module(t).factory("Ticket",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e,o){var n=o+"/result/:id",i={id:"@id"},s={getByTask:{method:"GET",isArray:!0,url:o+"/result/task/:taskId"}},r={};return t(n,i,s,r)};o.$inject=["$resource","$injector","API_URL"],e.module(t).factory("Result",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){var o=e+"/admin/:id",n={id:"@id"},i={validateAdmin:{method:"GET",skipGlobalErrorMessage:!0,url:e+"/admin/username/:username"}},s={};return t(o,n,i,s)};o.$inject=["$resource","API_URL"],e.module(t).factory("Admin",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){var o=e+"/task/:id",n={id:"@id"},i={},s={};return t(o,n,i,s)};o.$inject=["$resource","API_URL"],e.module(t).factory("Task",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";var o=function(t,e){var o=e+"/user/:id",n={id:"@id"},i={current:{method:"GET",skipGlobalErrorMessage:!0,url:e+"/user/current"}},s={};return t(o,n,i,s)};o.$inject=["$resource","API_URL"],e.module(t).factory("User",o)}(ANGULAR_MODULE,angular),function(t,e){"use strict";e.module(t).filter("i18n",["i18n",function(t){var e=function(){return t.get.apply(t,arguments)};return e.$stateful=!0,e}]),e.module(t).filter("percent",function(){return function(t,e){return e=isNaN(e)?0:e,t=isNaN(t)?0:100*t,t.toFixed(e)+"%"}}),e.module(t).filter("coin",function(){return function(t){return t>=1?t+"&#8364;":100*t+"&#162;"}}),e.module(t).filter("note",function(){return function(t){return t+"&#8364;"}})}(ANGULAR_MODULE,angular),function(){"use strict";UIkit.component("off-canvas-scroll",{defaults:{offset:0,target:"",duration:1e3,transition:"easeOutExpo"},props:{target:String,offset:Number,duration:Number,transition:String},computed:{offcanvas:function(){return UIkit.offcanvas(this.target)},$offcanvas:function(){return this.offcanvas&&this.offcanvas.$el}},init:function(){return this.target?this.offcanvas?void 0:void console.error("off-canvas-scroll: No offcanvas component found with id: "+this.target):void console.error('off-canvas-scroll: Required "target" option is not set.')},events:{click:function(t,e){e&&e.scroll||(this.offcanvas.hide(),this.$offcanvas.on("hidden",this._onHidden))}},methods:{_onHidden:function(){this.$offcanvas.off("hidden",this._onHidden),this._dummyScroll=UIkit.scroll(this.$el,{transition:this.transition,duration:this.duration,offset:this.offset}),this.$el.on("scrolled",this._onScrolled),this.$el.trigger("click",{scroll:!0})},_onScrolled:function(){this.$el.off("scrolled",this._onScrolled),this._dummyScroll.$destroy()}}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
