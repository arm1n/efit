/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,o){"use strict";var e=function(t,o,e,i){var s=i.get("TYPE_RISK"),r=i.get("user");this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=i,this.task=r.getTaskByType(s)};e.$inject=["$scope","$attrs","$element","$injector"],e.prototype.task=null,e.prototype.started=!1,e.prototype.stopped=!1,e.prototype.hasBomb=!1,e.prototype.resolved=!1,e.prototype.totalBoxes=0,e.prototype.remainingBoxes=0,e.prototype.collectedBoxes=0,e.prototype.avg=12,e.prototype.rows=5,e.prototype.cols=5,e.prototype.interval=1,e.prototype.random=!1,e.prototype.dynamic=!1,e.prototype.$onInit=function(){this.init()},e.prototype.getPayload=function(){return{task:this.task,json:{has_bomb:this.hasBomb,collected_boxes:this.collectedBoxes}}},e.prototype.isLocked=function(){return null===this.task||!this.task.isActive},e.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(this.dynamic?this.stopped:!!this.collectedBoxes)))},e.prototype.init=function(){this._initMembers(),this._initMatrix(),this._initBomb(),this.dynamic||this.start()},e.prototype.reset=function(){this.init()},e.prototype.start=function(t){if(this.dynamic){var o=this.$injector.get("$interval");this._intIndex=t||0;var e=this,i=this.iterator.length;this._intervalId=o(function(){var t=e.iterator[e._intIndex];e.update(t,!0),e._intIndex++,e._intIndex===i&&e.stop()},1e3*this.interval,i-this._intIndex)}this.started=!0},e.prototype.stop=function(){if(this.dynamic&&this._intervalId){var t=this.$injector.get("$interval");t.cancel(this._intervalId)}this.stopped=!0},e.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),i=function(t){t.$$resolved=!0},s=this,r=function(){o.forEach(s.collection,i),s.resolved=!0},n=function(){},a=t.when(e);return a.then(r,n),a},e.prototype.update=function(t,o){var e=this.collection.indexOf(t);o?(e<0&&(this.collection.push(t),this.collectedBoxes++),t.$$active=!0):e>=0&&(this.collection.splice(e,1),t.$$active=!1,this.collectedBoxes--),this.isBomb(t)&&(this.hasBomb=!0);var i=this.totalBoxes,s=this.collectedBoxes;this.remainingBoxes=i-s},e.prototype.trackId=function(t){return t.row+"_"+t.col},e.prototype.isBomb=function(t){return o.equals(this.bomb,t)},e.prototype._initMembers=function(){this.collection=[],this.hasBomb=!1,this.started=!1,this.stopped=!1,this.resolved=!1,this.collectedBoxes=0,this.remainingBoxes=0,this.totalBoxes=this.rows*this.cols},e.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var o=[],e=0;e<this.cols;e++){var i={row:t+1,col:e+1};if(o.push(i),this.dynamic)if(this.random){var s=this.$injector.get("random");s.push(this.iterator,i)}else this.iterator.push(i)}this.matrix.push(o)}},e.prototype._initBomb=function(){var t=this.$injector.get("random"),o=t.between(0,this.rows-1),e=t.between(0,this.cols-1);this.bomb=this.matrix[o][e]},o.module(t).directive("bombTask",function(){return{scope:{avg:"=?bombTaskAvg",rows:"=?bombTaskRows",cols:"=?bombTaskCols",random:"=?bombTaskRandom",dynamic:"=?bombTaskDynamic",interval:"=?bombTaskInterval",onResolve:"&bombTaskOnResolve"},restrict:"A",transclude:!0,controller:e,bindToController:!0,controllerAs:"bombTaskController",templateUrl:"views/directives/tasks/bomb-task.html"}});var i=function(){};i.prototype.model=null,i.prototype.isActive=!1,i.prototype.isDisabled=!1,i.prototype.isClickable=!0,i.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},o.module(t).directive("bombTaskCard",function(){return{scope:{model:"=bombTaskCard",onToggle:"&bombTaskCardOnToggle",isActive:"=?bombTaskCardIsActive",isDisabled:"=?bombTaskCardIsDisabled",isClickable:"=?bombTaskCardIsClickable"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"bombTaskCardController",templateUrl:"views/directives/tasks/bomb-task-card.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL3Rhc2tzL2JvbWItdGFzay5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJhbmd1bGFyIiwiQm9tYlRhc2siLCIkc2NvcGUiLCIkYXR0cnMiLCIkZWxlbWVudCIsIiRpbmplY3RvciIsInR5cGUiLCJnZXQiLCJ1c2VyIiwidGhpcyIsInRhc2siLCJnZXRUYXNrQnlUeXBlIiwiJGluamVjdCIsInByb3RvdHlwZSIsInN0YXJ0ZWQiLCJzdG9wcGVkIiwiaGFzQm9tYiIsInJlc29sdmVkIiwidG90YWxCb3hlcyIsInJlbWFpbmluZ0JveGVzIiwiY29sbGVjdGVkQm94ZXMiLCJhdmciLCJyb3dzIiwiY29scyIsImludGVydmFsIiwicmFuZG9tIiwiZHluYW1pYyIsIiRvbkluaXQiLCJpbml0IiwiZ2V0UGF5bG9hZCIsImpzb24iLCJoYXNfYm9tYiIsImNvbGxlY3RlZF9ib3hlcyIsImlzTG9ja2VkIiwiaXNBY3RpdmUiLCJjYW5SZXNvbHZlIiwiaXNVc2VyIiwiX2luaXRNZW1iZXJzIiwiX2luaXRNYXRyaXgiLCJfaW5pdEJvbWIiLCJzdGFydCIsInJlc2V0IiwiaW5kZXgiLCIkaW50ZXJ2YWwiLCJfaW50SW5kZXgiLCJtZSIsIm1heCIsIml0ZXJhdG9yIiwibGVuZ3RoIiwiX2ludGVydmFsSWQiLCJpdGVtIiwidXBkYXRlIiwic3RvcCIsImNhbmNlbCIsInJlc29sdmUiLCIkcSIsInJlc3VsdCIsIm9uUmVzb2x2ZSIsInBheWxvYWQiLCJyZXNvbHZlQ2FyZCIsImNhcmQiLCIkJHJlc29sdmVkIiwic3VjY2Vzc0NhbGxiYWNrIiwiZm9yRWFjaCIsImNvbGxlY3Rpb24iLCJmYWlsdXJlQ2FsbGJhY2siLCJwcm9taXNlIiwid2hlbiIsInRoZW4iLCJjb2x1bW4iLCJhY3RpdmUiLCJpbmRleE9mIiwicHVzaCIsIiQkYWN0aXZlIiwic3BsaWNlIiwiaXNCb21iIiwidG90YWwiLCJjb2xsZWN0ZWQiLCJ0cmFja0lkIiwicm93IiwiY29sIiwiZXF1YWxzIiwiYm9tYiIsIm1hdHJpeCIsImkiLCJjb2x1bW5zIiwiaiIsImRhdGEiLCJiZXR3ZWVuIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJyZXN0cmljdCIsInRyYW5zY2x1ZGUiLCJjb250cm9sbGVyIiwiYmluZFRvQ29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwiQm9tYlRhc2tDYXJkIiwibW9kZWwiLCJpc0Rpc2FibGVkIiwiaXNDbGlja2FibGUiLCJ0b2dnbGUiLCJvblRvZ2dsZSIsInN0YXRlIiwiQU5HVUxBUl9NT0RVTEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBU0EsU0FBVUEsRUFBUUMsR0FDaEIsWUFhQSxJQUFJQyxHQUFXLFNBQVNDLEVBQVFDLEVBQVFDLEVBQVVDLEdBQ2hELEdBQUlDLEdBQU9ELEVBQVVFLElBQUksYUFDckJDLEVBQU9ILEVBQVVFLElBQUksT0FFekJFLE1BQUtQLE9BQVNBLEVBQ2RPLEtBQUtOLE9BQVNBLEVBQ2RNLEtBQUtMLFNBQVdBLEVBQ2hCSyxLQUFLSixVQUFZQSxFQUVqQkksS0FBS0MsS0FBT0YsRUFBS0csY0FBY0wsR0FHakNMLEdBQVNXLFNBQVcsU0FBVSxTQUFVLFdBQVksYUFTcERYLEVBQVNZLFVBQVVILEtBQU8sS0FLMUJULEVBQVNZLFVBQVVDLFNBQVUsRUFHN0JiLEVBQVNZLFVBQVVFLFNBQVUsRUFHN0JkLEVBQVNZLFVBQVVHLFNBQVUsRUFHN0JmLEVBQVNZLFVBQVVJLFVBQVcsRUFHOUJoQixFQUFTWSxVQUFVSyxXQUFhLEVBR2hDakIsRUFBU1ksVUFBVU0sZUFBaUIsRUFHcENsQixFQUFTWSxVQUFVTyxlQUFpQixFQUtwQ25CLEVBQVNZLFVBQVVRLElBQU0sR0FHekJwQixFQUFTWSxVQUFVUyxLQUFPLEVBRzFCckIsRUFBU1ksVUFBVVUsS0FBTyxFQUcxQnRCLEVBQVNZLFVBQVVXLFNBQVcsRUFPOUJ2QixFQUFTWSxVQUFVWSxRQUFTLEVBUTVCeEIsRUFBU1ksVUFBVWEsU0FBVSxFQWE3QnpCLEVBQVNZLFVBQVVjLFFB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QkFBa0IsRUFDbEJDLGFBQWMscUJBQ2RDLFlBQWEsMENBZWpCLElBQUlDLEdBQWUsWUFRbkJBLEdBQWFwRixVQUFVcUYsTUFBUSxLQUcvQkQsRUFBYXBGLFVBQVVxQixVQUFXLEVBR2xDK0QsRUFBYXBGLFVBQVVzRixZQUFhLEVBR3BDRixFQUFhcEYsVUFBVXVGLGFBQWMsRUFlckNILEVBQWFwRixVQUFVd0YsT0FBUyxZQUMxQjVGLEtBQUswRixZQUFlMUYsS0FBSzJGLGNBSTdCM0YsS0FBS3lCLFVBQVl6QixLQUFLeUIsU0FFdEJ6QixLQUFLNkYsVUFDSEosTUFBTXpGLEtBQUt5RixNQUNYSyxNQUFNOUYsS0FBS3lCLGFBS2ZsQyxFQUFRRCxPQUFPQSxHQUFRMEYsVUFBVSxlQUFnQixXQUMvQyxPQUNFQyxPQUNFUSxNQUFNLGdCQUNOSSxTQUFTLHdCQUNUcEUsU0FBUyx5QkFDVGlFLFdBQVcsMkJBQ1hDLFlBQVksNkJBRWRULFNBQVUsSUFDVkMsWUFBWSxFQUNaQyxXQUFZSSxFQUNaSCxrQkFBa0IsRUFDbEJDLGFBQWMseUJBQ2RDLFlBQWEsaURBSWhCUSxlQUFnQnhHIiwiZmlsZSI6ImFwcC9kaXJlY3RpdmVzL3Rhc2tzL2JvbWItdGFzay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIgKi9cbihmdW5jdGlvbihtb2R1bGUsIGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEJvbWJUYXNrXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy9cbiAgLy8gQ09OVFJPTExFUlxuICAvL1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHZhciBCb21iVGFzayA9IGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCAkZWxlbWVudCwgJGluamVjdG9yKSB7XG4gICAgdmFyIHR5cGUgPSAkaW5qZWN0b3IuZ2V0KCdUWVBFX1JJU0snKTtcbiAgICB2YXIgdXNlciA9ICRpbmplY3Rvci5nZXQoJ3VzZXInKTtcblxuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcblxuICAgIHRoaXMudGFzayA9IHVzZXIuZ2V0VGFza0J5VHlwZSh0eXBlKTtcbiAgfTtcblxuICBCb21iVGFzay4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRpbmplY3RvciddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvLyBTRVJWRVJcblxuICAvKiogQHZhciB7b2JqZWN0fSB0YXNrIFRhc2sncyByZXNvdXJjZSBmcm9tIHNlcnZlci4gKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLnRhc2sgPSBudWxsO1xuXG4gIC8vIEdBTUVQTEFZXG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHN0YXJ0ZWQgSWYgdGhlIHRhc2sgaGFzIHN0YXJ0ZWQuICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5zdGFydGVkID0gZmFsc2U7XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHN0b3BwZWQgSWYgdGhlIHRhc2sgaGFzIHN0b3BwZWQuICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5zdG9wcGVkID0gZmFsc2U7XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IGhhc0JvbWIgSWYgYm9tYiBpcyBpbiBjdXJyZW50IGNvbGxlY3Rpb24uICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5oYXNCb21iID0gZmFsc2U7XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHJlc29sdmVkIElmIHBsYXllciBoYXMgcmVzb2x2ZWQgdGhlIGdhbWUuICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yZXNvbHZlZCA9IGZhbHNlO1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IHRvdGFsQm94ZXMgVG90YWwgYm94ZXMgb2YgY3VycmVudCBnYW1lLiAqL1xuICBCb21iVGFzay5wcm90b3R5cGUudG90YWxCb3hlcyA9IDA7XG5cbiAgLyoqIEB2YXIge251bWJlcn0gcmVtYWluaW5nQm94ZXMgUmVtYWluaW5nIGJveGVzIG9mIGN1cnJlbnQgZ2FtZS4gKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLnJlbWFpbmluZ0JveGVzID0gMDtcblxuICAvKiogQHZhciB7bnVtYmVyfSBjb2xsZWN0ZWRCb3hlcyBDb2xsZWN0ZWQgYm94ZXMgb2YgY3VycmVudCBnYW1lLiAqL1xuICBCb21iVGFzay5wcm90b3R5cGUuY29sbGVjdGVkQm94ZXMgPSAwO1xuXG4gIC8vIFNFVFRJTkdTXG5cbiAgLyoqIEB2YXIge251bWJlcn0gYXZnIEF2ZXJhZ2Ugb2YgY29sbGVjdGVkIGJveGVzIGZyb20gc3RhdGlzdGljcy4gKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLmF2ZyA9IDEyO1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IHJvd3MgQW1vdW50IG9mIHJvd3MgZm9yIGJvbWIgdGFzay4gKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLnJvd3MgPSA1O1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IGNvbHMgQW1vdW50IG9mIGNvbHMgZm9yIGJvbWIgdGFzay4gKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLmNvbHMgPSA1O1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IGludGVydmFsIFRpbWVvdXQgZm9yIGludGVydmFsIGluIHNlY29uZHMuICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5pbnRlcnZhbCA9IDE7XG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHJhbmRvbVxuICAgKiAtIElmIGByYW5kb21gID0gZmFsc2UsIGJveGVzIGFyZSBjb2xsZWN0ZWQgcm93LXdpc2Ugb25lLWJ5LW9uZSwgc3RhcnRpbmcgaW4gdGhlIHRvcC1sZWZ0IGNvcm5lclxuICAgKiAtIElmIGByYW5kb21gID0gdHJ1ZSwgYm94ZXMgYXJlIGNvbGxlY3RlZCByYW5kb21seSAoRmlzaGVyLVlhdGVzIEFsZ29yaXRobSlcbiAgICogTm90ZSB0aGF0IHRoaXMgYWZmZWN0cyBnYW1lIHBsYXkgaW5kZXBlbmRlbnRseSBvZiBgZHluYW1pY2AgcHJvcGVydHlcbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5yYW5kb20gPSBmYWxzZTtcblxuICAvKiogQHZhciB7Ym9vbGVhbn0gZHluYW1pY1xuICAgKiAtIElmIGBkeW5hbWljYCA9IHRydWUsIG9uZSBib3ggcGVyIHRpbWUgaW50ZXJ2YWwgaXMgY29sbGVjdGVkIGF1dG9tYXRpY2FsbHlcbiAgICogLSBJbiBjYXNlIG9mIGBkeW5hbWljYCA9IHRydWUsIGdhbWUgcGxheSBpcyBhZmZlY3RlZCBieSB0aGUgdmFyaWFibGVzIGBpbnRlcnZhbGAgYW5kIGByYW5kb21gXG4gICAqIC0gSWYgYGR5bmFtaWNgID0gZmFsc2UsIHN1YmplY3RzIGNvbGxlY3QgYXMgbWFueSBib3hlcyBhcyB0aGV5IHdhbnQgYnkgY2xpY2tpbmcgb3IgZW50ZXJpbmcgdGhlIHJlc3BlY3RpdmUgbnVtYmVyXG4gICAqIC0gSW4gY2FzZSBvZiBgZHluYW1pY2AgPSBmYWxzZSwgZ2FtZSBwbGF5IGlzIGFmZmVjdGVkIGJ5IHRoZSB2YXJpYWJsZXMgYHJhbmRvbWBcbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5keW5hbWljID0gZmFsc2U7XG5cbiAgLy9cbiAgLy8gTUVUSE9EU1xuICAvL1xuXG4gIC8qKlxuICAgKiBQcm94aWVzIHRvIGBpbml0KClgIGlmIGNvbnRyb2xsZXIncyByZWFkeS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kICRvbkluaXRcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyByZXN1bHQgcGF5bG9hZCBmb3Igc2VydmVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgZ2V0UGF5bG9hZFxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLmdldFBheWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAvKiBqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqL1xuICAgIHJldHVybiB7XG4gICAgICB0YXNrOiB0aGlzLnRhc2ssXG4gICAgICBqc29uOiB7XG4gICAgICAgIGhhc19ib21iOiB0aGlzLmhhc0JvbWIsXG4gICAgICAgIGNvbGxlY3RlZF9ib3hlczogdGhpcy5jb2xsZWN0ZWRCb3hlc1xuICAgICAgfVxuICAgIH07XG4gICAgLyoganNoaW50IGNhbWVsY2FzZTogdHJ1ZSAqL1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0YXNrIGlzIGN1cnJlbnRseSBsb2NrZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBpc0xvY2tlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLmlzTG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGFzayA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnRhc2suaXNBY3RpdmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRhc2sgY2FuIGJlIHNlbnQgdG8gc2VydmVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgY2FuUmVzb2x2ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLmNhblJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlciA9IHRoaXMuJGluamVjdG9yLmdldCgndXNlcicpO1xuICAgIGlmICghdXNlci5pc1VzZXIoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTG9ja2VkKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXNvbHZlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3BwZWQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbGxlY3RlZEJveGVzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgaW5pdGlhbCBzdGF0ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGluaXRcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5faW5pdE1lbWJlcnMoKTtcbiAgICB0aGlzLl9pbml0TWF0cml4KCk7XG4gICAgdGhpcy5faW5pdEJvbWIoKTtcblxuICAgIGlmICghdGhpcy5keW5hbWljKSB7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgaW5pdGlhbCBzdGF0ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHJlc2V0XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBgc3RhcnRlZGAgZmxhZy4gSWYgYGR5bmFtaWNgIGlzIHRydWUsXG4gICAqIHRoZSBpbnRlcnZhbCB3aWxsIHN0YXJ0IHRvIHJldmVhbCBjYXJkcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgIHZhciAkaW50ZXJ2YWwgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRpbnRlcnZhbCcpO1xuXG4gICAgICB0aGlzLl9pbnRJbmRleCA9IGluZGV4IHx8IDA7XG5cbiAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICB2YXIgbWF4ID0gdGhpcy5pdGVyYXRvci5sZW5ndGg7XG4gICAgICB0aGlzLl9pbnRlcnZhbElkID0gJGludGVydmFsKFxuICAgICAgICBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgdmFyIGl0ZW0gPSBtZS5pdGVyYXRvclttZS5faW50SW5kZXhdO1xuICAgICAgICAgIG1lLnVwZGF0ZShpdGVtLHRydWUpO1xuXG4gICAgICAgICAgbWUuX2ludEluZGV4Kys7XG4gICAgICAgICAgaWYgKG1lLl9pbnRJbmRleD09PW1heCkge1xuICAgICAgICAgICAgbWUuc3RvcCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmludGVydmFsKjEwMDAsIC8vID0gZnJvbSBzZWNvbmRzXG4gICAgICAgIG1heCAtIHRoaXMuX2ludEluZGV4IC8vID0gbWF4IGl0ZXJhdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBgc3RvcHBlZGAgZmxhZy4gSWYgYGR5bmFtaWNgIGlzIHRydWUsXG4gICAqIHRoZSBpbnRlcnZhbCB3aWxsIGJlIHN0b3BwZWQgaW4gYWRkaXRpb24uXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBzdGFydFxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgQm9tYlRhc2sucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5keW5hbWljICYmIHRoaXMuX2ludGVydmFsSWQpIHtcbiAgICAgIHZhciAkaW50ZXJ2YWwgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRpbnRlcnZhbCcpO1xuICAgICAgJGludGVydmFsLmNhbmNlbCh0aGlzLl9pbnRlcnZhbElkKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGByZXNvbHZlZGAgZmxhZy4gQ2FsbHMgYG9uUmVzb2x2ZWBcbiAgICogY2FsbGJhY2sgd2l0aCBKU09OIHJlc3VsdCBmb3IgY29uc3VtZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCByZXNvbHZlXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkcSA9IHRoaXMuJGluamVjdG9yLmdldCgnJHEnKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5vblJlc29sdmUoe1xuICAgICAgcGF5bG9hZDogdGhpcy5nZXRQYXlsb2FkKClcbiAgICB9KTtcblxuICAgIHZhciByZXNvbHZlQ2FyZCA9IGZ1bmN0aW9uKGNhcmQpIHtcbiAgICAgIGNhcmQuJCRyZXNvbHZlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgYW5ndWxhci5mb3JFYWNoKG1lLmNvbGxlY3Rpb24sIHJlc29sdmVDYXJkKTtcbiAgICAgIG1lLnJlc29sdmVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHZhciBmYWlsdXJlQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblxuICAgIH07XG5cbiAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4ocmVzdWx0KTtcbiAgICBwcm9taXNlLnRoZW4oXG4gICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICApO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciBjYXJkIGNsaWNrLiBVcGRhdGVzIGFsbFxuICAgKiByZWxhdGVkIHByb3BlcnRpZXMgZm9yIGZpbmFsIHJlc3VsdC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYWN0aXZlXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oY29sdW1uLCBhY3RpdmUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNvbGxlY3Rpb24uaW5kZXhPZihjb2x1bW4pO1xuXG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgaWYgKGluZGV4PDApwqB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5wdXNoKGNvbHVtbik7XG4gICAgICAgIHRoaXMuY29sbGVjdGVkQm94ZXMrKztcbiAgICAgIH1cblxuICAgICAgY29sdW1uLiQkYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGluZGV4Pj0wKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsMSk7XG4gICAgICAgIGNvbHVtbi4kJGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbGxlY3RlZEJveGVzLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNCb21iKGNvbHVtbikpIHtcbiAgICAgIHRoaXMuaGFzQm9tYiA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbEJveGVzO1xuICAgIHZhciBjb2xsZWN0ZWQgPSB0aGlzLmNvbGxlY3RlZEJveGVzO1xuICAgIHRoaXMucmVtYWluaW5nQm94ZXMgPSB0b3RhbCAtIGNvbGxlY3RlZDtcbiAgfTtcblxuICAvKipcbiAgICogUHJvdmlkZXMgaW5kaXZpdWFsIHRyYWNraW5nIGlkIGZvciBjb2x1bW4uXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB0cmFja0lkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb2x1bW5cbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS50cmFja0lkID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgcmV0dXJuIGNvbHVtbi5yb3cgKyAnXycgKyBjb2x1bW4uY29sO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGNvbHVtbiBpcyBhY3R1YWwgYm9tYi5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGlzQm9tYlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUuaXNCb21iID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKHRoaXMuYm9tYixjb2x1bW4pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsemVzIGludGVybmFsIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZXRob2QgX2luaXRNZW1iZXJzXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUuX2luaXRNZW1iZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb2xsZWN0aW9uID0gW107XG5cbiAgICB0aGlzLmhhc0JvbWIgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmNvbGxlY3RlZEJveGVzID0gMDtcbiAgICB0aGlzLnJlbWFpbmluZ0JveGVzID0gMDtcbiAgICB0aGlzLnRvdGFsQm94ZXMgPSB0aGlzLnJvd3MgKiB0aGlzLmNvbHM7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGFjdHVhbCBtYXRyaXguXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZXRob2QgX2luaXRNYXRyaXhcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIEJvbWJUYXNrLnByb3RvdHlwZS5faW5pdE1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubWF0cml4ID0gW107XG4gICAgdGhpcy5pdGVyYXRvciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaT0wOyBpPHRoaXMucm93czsgaSsrKSB7XG5cbiAgICAgIHZhciBjb2x1bW5zID0gW107XG4gICAgICBmb3IoIHZhciBqPTA7IGo8dGhpcy5jb2xzOyBqKysgKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgIHJvdzogaSsxLFxuICAgICAgICAgIGNvbDogaisxXG4gICAgICAgIH07XG5cbiAgICAgICAgY29sdW1ucy5wdXNoKGRhdGEpO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgICAgICBpZiAoIXRoaXMucmFuZG9tKSB7XG4gICAgICAgICAgICB0aGlzLml0ZXJhdG9yLnB1c2goZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByYW5kb20gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ3JhbmRvbScpO1xuICAgICAgICAgICAgcmFuZG9tLnB1c2godGhpcy5pdGVyYXRvcixkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXRyaXgucHVzaChjb2x1bW5zKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGJvbWIncyBhY3R1YWwgbG9jYXRpb24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZXRob2QgX2luaXRCb21iXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBCb21iVGFzay5wcm90b3R5cGUuX2luaXRCb21iID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJhbmRvbSA9IHRoaXMuJGluamVjdG9yLmdldCgncmFuZG9tJyk7XG5cbiAgICB2YXIgcm93ID0gcmFuZG9tLmJldHdlZW4oMCx0aGlzLnJvd3MtMSk7XG4gICAgdmFyIGNvbCA9IHJhbmRvbS5iZXR3ZWVuKDAsdGhpcy5jb2xzLTEpO1xuXG4gICAgdGhpcy5ib21iID0gdGhpcy5tYXRyaXhbcm93XVtjb2xdO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuZGlyZWN0aXZlKCdib21iVGFzaycsZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgYXZnOiAnPT9ib21iVGFza0F2ZycsXG4gICAgICAgIHJvd3M6ICc9P2JvbWJUYXNrUm93cycsXG4gICAgICAgIGNvbHM6ICc9P2JvbWJUYXNrQ29scycsXG4gICAgICAgIHJhbmRvbTogJz0/Ym9tYlRhc2tSYW5kb20nLFxuICAgICAgICBkeW5hbWljOiAnPT9ib21iVGFza0R5bmFtaWMnLFxuICAgICAgICBpbnRlcnZhbDogJz0/Ym9tYlRhc2tJbnRlcnZhbCcsXG4gICAgICAgIG9uUmVzb2x2ZTogJyZib21iVGFza09uUmVzb2x2ZSdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IEJvbWJUYXNrLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2JvbWJUYXNrQ29udHJvbGxlcicsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdGFza3MvYm9tYi10YXNrLmh0bWwnXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQm9tYlRhc2sgQ2FyZFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgQm9tYlRhc2tDYXJkID0gZnVuY3Rpb24oKXtcbiAgfTtcblxuICAvL1xuICAvLyBQUk9QRVJUSUVTXG4gIC8vXG5cbiAgLyoqIEB2YXIge3N0cmluZ30gaWQgQ2FyZCdzIGFjY29jaWF0ZWQgbW9kZWwuICovXG4gIEJvbWJUYXNrQ2FyZC5wcm90b3R5cGUubW9kZWwgPSBudWxsO1xuXG4gIC8qKiBAdmFyIHtzdHJpbmd9IGlzQWN0aXZlIElmIGNhcmQgaXMgYWN0aXZlLiAqL1xuICBCb21iVGFza0NhcmQucHJvdG90eXBlLmlzQWN0aXZlID0gZmFsc2U7XG5cbiAgLyoqIEB2YXIge3N0cmluZ30gaXNEaXNhYmxlZCBJZiBjYXJkIGlzIGRpc2FibGVkLiAqL1xuICBCb21iVGFza0NhcmQucHJvdG90eXBlLmlzRGlzYWJsZWQgPSBmYWxzZTtcblxuICAvKiogQHZhciB7c3RyaW5nfSBpc0NsaWNrYWJsZSBJZiBjYXJkIGlzIGNsaWNrYWJsZS4gKi9cbiAgQm9tYlRhc2tDYXJkLnByb3RvdHlwZS5pc0NsaWNrYWJsZSA9IHRydWU7XG5cbiAgLy9cbiAgLy8gTUVUSE9EU1xuICAvL1xuXG4gIC8qKlxuICAgKiBUb2dnbGVzIGBpc0FjdGl2ZWAgaWYgYGlzRGlzYWJsZWRgIGFuZFxuICAgKiBgaXNDbGlja2FibGVgIGFsbG93IHRoZSBhY3Rpb24uIEludm9rZXNcbiAgICogYG9uVG9nZ2xlYCBjYWxsYmFjayBmb3IgY29uc3VtZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB0b2dnbGVcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIEJvbWJUYXNrQ2FyZC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCB8fCAhdGhpcy5pc0NsaWNrYWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNBY3RpdmUgPSAhdGhpcy5pc0FjdGl2ZTtcblxuICAgIHRoaXMub25Ub2dnbGUoe1xuICAgICAgbW9kZWw6dGhpcy5tb2RlbCxcbiAgICAgIHN0YXRlOnRoaXMuaXNBY3RpdmVcbiAgICB9KTtcbiAgfTtcblxuICAvLyByZWdpc3RyeVxuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmRpcmVjdGl2ZSgnYm9tYlRhc2tDYXJkJywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgbW9kZWw6Jz1ib21iVGFza0NhcmQnLFxuICAgICAgICBvblRvZ2dsZTonJmJvbWJUYXNrQ2FyZE9uVG9nZ2xlJyxcbiAgICAgICAgaXNBY3RpdmU6Jz0/Ym9tYlRhc2tDYXJkSXNBY3RpdmUnLFxuICAgICAgICBpc0Rpc2FibGVkOic9P2JvbWJUYXNrQ2FyZElzRGlzYWJsZWQnLFxuICAgICAgICBpc0NsaWNrYWJsZTonPT9ib21iVGFza0NhcmRJc0NsaWNrYWJsZSdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IEJvbWJUYXNrQ2FyZCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyQXM6ICdib21iVGFza0NhcmRDb250cm9sbGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90YXNrcy9ib21iLXRhc2stY2FyZC5odG1sJ1xuICAgIH07XG4gIH0pO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
