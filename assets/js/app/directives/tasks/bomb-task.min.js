/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,o){"use strict";var e=function(t,o,e,i){var s=i.get("TYPE_RISK"),r=i.get("user");this.$scope=t,this.$attrs=o,this.$element=e,this.$injector=i,this.task=r.getTaskByType(s)};e.$inject=["$scope","$attrs","$element","$injector"],e.prototype.task=null,e.prototype.started=!1,e.prototype.stopped=!1,e.prototype.hasBomb=!1,e.prototype.resolved=!1,e.prototype.totalBoxes=0,e.prototype.remainingBoxes=0,e.prototype.collectedBoxes=0,e.prototype.avg=12,e.prototype.rows=5,e.prototype.cols=5,e.prototype.interval=1,e.prototype.random=!1,e.prototype.dynamic=!1,e.prototype.$onInit=function(){this.init()},e.prototype.getPayload=function(){return{task:this.task,json:{hasBomb:this.hasBomb,collectedBoxes:this.collectedBoxes},ticketCount:this.getTicketCount()}},e.prototype.isLocked=function(){return null===this.task||!this.task.isActive},e.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(this.dynamic?this.stopped:!!this.collectedBoxes)))},e.prototype.init=function(){this._initMembers(),this._initMatrix(),this._initBomb(),this.dynamic||this.start()},e.prototype.reset=function(){this.init()},e.prototype.start=function(t){if(this.dynamic){var o=this.$injector.get("$interval");this._intIndex=t||0;var e=this,i=this.iterator.length;this._intervalId=o(function(){var t=e.iterator[e._intIndex];e.update(t,!0),e._intIndex++,e._intIndex===i&&e.stop()},1e3*this.interval,i-this._intIndex)}this.started=!0},e.prototype.stop=function(){if(this.dynamic&&this._intervalId){var t=this.$injector.get("$interval");t.cancel(this._intervalId)}this.stopped=!0},e.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),i=function(t){t.$$resolved=!0},s=this,r=function(){o.forEach(s.collection,i),s.resolved=!0},n=function(){},a=t.when(e);return a.then(r,n),a},e.prototype.getTicketCount=function(){return this.hasBomb?1:this.collectedBoxes+1},e.prototype.toggle=function(t,o){var e=this.collection.indexOf(t);o?(e<0&&(this.collection.push(t),this.collectedBoxes++),t.$$active=!0):e>=0&&(this.collection.splice(e,1),t.$$active=!1,this.collectedBoxes--),this.isBomb(t)&&(this.hasBomb=!0);var i=this.totalBoxes,s=this.collectedBoxes;this.remainingBoxes=i-s},e.prototype.trackId=function(t){return t.row+"_"+t.col},e.prototype.isBomb=function(t){return o.equals(this.bomb,t)},e.prototype._initMembers=function(){this.collection=[],this.hasBomb=!1,this.started=!1,this.stopped=!1,this.resolved=!1,this.collectedBoxes=0,this.remainingBoxes=0,this.totalBoxes=this.rows*this.cols},e.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var o=[],e=0;e<this.cols;e++){var i={row:t+1,col:e+1};if(o.push(i),this.dynamic)if(this.random){var s=this.$injector.get("random");s.push(this.iterator,i)}else this.iterator.push(i)}this.matrix.push(o)}},e.prototype._initBomb=function(){var t=this.$injector.get("random"),o=t.between(0,this.rows-1),e=t.between(0,this.cols-1);this.bomb=this.matrix[o][e]},o.module(t).directive("bombTask",function(){return{scope:{avg:"=?bombTaskAvg",rows:"=?bombTaskRows",cols:"=?bombTaskCols",random:"=?bombTaskRandom",dynamic:"=?bombTaskDynamic",interval:"=?bombTaskInterval",onResolve:"&bombTaskOnResolve"},restrict:"A",transclude:!0,controller:e,bindToController:!0,controllerAs:"bombTaskController",templateUrl:"views/directives/tasks/bomb-task.html"}});var i=function(){};i.prototype.model=null,i.prototype.isActive=!1,i.prototype.isDisabled=!1,i.prototype.isClickable=!0,i.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},o.module(t).directive("bombTaskCard",function(){return{scope:{model:"=bombTaskCard",onToggle:"&bombTaskCardOnToggle",isActive:"=?bombTaskCardIsActive",isDisabled:"=?bombTaskCardIsDisabled",isClickable:"=?bombTaskCardIsClickable"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"bombTaskCardController",templateUrl:"views/directives/tasks/bomb-task-card.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
