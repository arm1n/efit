/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var s=function(t,e,s,o){var r=o.get("TYPE_SAVINGS_SUPPORTED"),n=o.get("user");this.$scope=t,this.$attrs=s,this.$element=e,this.$injector=o,this.task=n.getTaskByType(r),this.result=n.getPendingByType(r)};s.$inject=["$scope","$element","$attrs","$injector"],s.prototype.task=null,s.prototype.result=null,s.prototype.resolved=!1,s.prototype.total=3,s.prototype.cards=[],s.prototype.count=0,s.prototype.$onInit=function(){this.init()},s.prototype.getPayload=function(){var t={task:this.task,json:{count:this.count,total:this.total},isPending:this.count!==this.total};return null!==this.result&&(t=e.extend(this.result,t)),t},s.prototype.isLocked=function(){return null===this.task||!this.task.isActive},s.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&!this.resolved)},s.prototype.init=function(){null!==this.result&&(this.count=this.result.json.count),this.cards=[];for(var t=1;t<=this.total;t++)this.cards.push({complete:t<=this.count,number:t});this.resolved=!1},s.prototype.reset=function(){this.resolved=!1,this.result=null,this.count=0,this.init()},s.prototype.update=function(t){var e=this.$injector.get("notification"),s=this.$injector.get("i18n"),o=this.count+1;if(t.number!==o){var r=s.get("Please reveal week %s next!",o);return e.warning(r),void(t.complete=!1)}if(this.canResolve()){var n=this,i=function(){},c=function(){t.complete=!1,n.count--};this.count=o,this.resolve().then(i,c)}},s.prototype.resolve=function(){var t=this.$injector.get("notification"),e=this.$injector.get("i18n"),s=this.$injector.get("$q"),o=null===this.result?this.onResolve:this.onUpdate,r=o({payload:this.getPayload()}),n=this,i=function(s){if(s.isPending){var o=e.get("Super, keep it up!");return t.success(o),void(n.result=s)}n.resolved=!0},c=function(){},a=s.when(r).then(i,c);return a},e.module(t).directive("savingsSupportedTask",function(){return{scope:{amount:"=?savingsSupportedTaskAmount",onUpdate:"&savingsSupportedTaskOnUpdate",onResolve:"&savingsSupportedTaskOnResolve"},restrict:"A",transclude:!0,controller:s,bindToController:!0,controllerAs:"savingsSupportedTaskController",templateUrl:"views/directives/tasks/savings-supported-task.html"}});var o=function(t,e,s,o){this.$element=e,this.$scope=t,this.$attrs=s,this.$injector=o,this._scratchCard=null};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.complete=!1,o.prototype.thickness=20,o.prototype.threshold=.25,o.prototype.color="#e5e5e5",o.prototype.$onInit=function(){this._scratchCard=new Scratchcard(this.$element.get(0),{painter:new Scratchcard.Painter({thickness:this.thickness,color:this.color})});var t=this;this._unwatch=this.$scope.$watch(function(){return t.card.complete},function(e){e?t._scratchCard.complete():t._scratchCard.reset()}),this._listener=this._onProgress.bind(this),this._scratchCard.addListener("progress",this._listener)},o.prototype.$onDestroy=function(){this._scratchCard.removeListener("progress",this._listener),this._scratchCard=null,this._unwatch()},o.prototype._onProgress=function(t){var e=this.$injector.get("$timeout"),s=this,o=function(){t>s.threshold&&t<1&&(s.card.complete=!0,e(s.onComplete))};this.$scope.$evalAsync(o)},e.module(t).directive("savingsSupportedTaskCard",function(){return{scope:{card:"=?savingsSupportedTaskCard",color:"=?savingsSupportedTaskCardColor",thickness:"=?savingsSupportedTaskCardThickness",threshold:"=?savingsSupportedTaskCardThreshold",onComplete:"&savingsSupportedTaskCardOnComplete"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"savingsSupportedTaskCardController",templateUrl:"views/directives/tasks/savings-supported-task-card.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL3Rhc2tzL3NhdmluZ3Mtc3VwcG9ydGVkLXRhc2suanMiXSwibmFtZXMiOlsibW9kdWxlIiwiYW5ndWxhciIsIlNhdmluZ3NTdXBwb3J0ZWRUYXNrIiwiJHNjb3BlIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCIkaW5qZWN0b3IiLCJ0eXBlIiwiZ2V0IiwidXNlciIsInRoaXMiLCJ0YXNrIiwiZ2V0VGFza0J5VHlwZSIsInJlc3VsdCIsImdldFBlbmRpbmdCeVR5cGUiLCIkaW5qZWN0IiwicHJvdG90eXBlIiwicmVzb2x2ZWQiLCJ0b3RhbCIsImNhcmRzIiwiY291bnQiLCIkb25Jbml0IiwiaW5pdCIsImdldFBheWxvYWQiLCJwYXlsb2FkIiwianNvbiIsImlzUGVuZGluZyIsImV4dGVuZCIsImlzTG9ja2VkIiwiaXNBY3RpdmUiLCJjYW5SZXNvbHZlIiwiaXNVc2VyIiwiaSIsInB1c2giLCJjb21wbGV0ZSIsIm51bWJlciIsInJlc2V0IiwidXBkYXRlIiwiY2FyZCIsIm5vdGlmaWNhdGlvbiIsImkxOG4iLCJuZXh0V2VlayIsIm1lc3NhZ2UiLCJ3YXJuaW5nIiwibWUiLCJzdWNjZXNzQ2FsbGJhY2siLCJmYWlsdXJlQ2FsbGJhY2siLCJyZXNvbHZlIiwidGhlbiIsIiRxIiwiY2FsbGJhY2siLCJvblJlc29sdmUiLCJvblVwZGF0ZSIsInN1Y2Nlc3MiLCJwcm9taXNlIiwid2hlbiIsImRpcmVjdGl2ZSIsInNjb3BlIiwiYW1vdW50IiwicmVzdHJpY3QiLCJ0cmFuc2NsdWRlIiwiY29udHJvbGxlciIsImJpbmRUb0NvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZVVybCIsIlNhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZCIsIl9zY3JhdGNoQ2FyZCIsInRoaWNrbmVzcyIsInRocmVzaG9sZCIsImNvbG9yIiwiU2NyYXRjaGNhcmQiLCJwYWludGVyIiwiUGFpbnRlciIsIl91bndhdGNoIiwiJHdhdGNoIiwiaXNDb21wbGV0ZSIsIl9saXN0ZW5lciIsIl9vblByb2dyZXNzIiwiYmluZCIsImFkZExpc3RlbmVyIiwiJG9uRGVzdHJveSIsInJlbW92ZUxpc3RlbmVyIiwicHJvZ3Jlc3MiLCIkdGltZW91dCIsIm9uUHJvZ3Jlc3MiLCJvbkNvbXBsZXRlIiwiJGV2YWxBc3luYyIsIkFOR1VMQVJfTU9EVUxFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztDQVNBLFNBQVVBLEVBQVFDLEdBQ2hCLFlBYUEsSUFBSUMsR0FBdUIsU0FBU0MsRUFBUUMsRUFBVUMsRUFBUUMsR0FDNUQsR0FBSUMsR0FBT0QsRUFBVUUsSUFBSSwwQkFDckJDLEVBQU9ILEVBQVVFLElBQUksT0FFekJFLE1BQUtQLE9BQVNBLEVBQ2RPLEtBQUtMLE9BQVNBLEVBQ2RLLEtBQUtOLFNBQVdBLEVBQ2hCTSxLQUFLSixVQUFZQSxFQUVqQkksS0FBS0MsS0FBT0YsRUFBS0csY0FBY0wsR0FDL0JHLEtBQUtHLE9BQVNKLEVBQUtLLGlCQUFpQlAsR0FHdENMLEdBQXFCYSxTQUFXLFNBQVUsV0FBWSxTQUFVLGFBU2hFYixFQUFxQmMsVUFBVUwsS0FBTyxLQUd0Q1QsRUFBcUJjLFVBQVVILE9BQVMsS0FLeENYLEVBQXFCYyxVQUFVQyxVQUFXLEVBSzFDZixFQUFxQmMsVUFBVUUsTUFBUSxFQUd2Q2hCLEVBQXFCYyxVQUFVRyxTQUcvQmpCLEVBQXFCYyxVQUFVSSxNQUFRLEVBYXZDbEIsRUFBcUJjLFVBQVVLLFFBQVUsV0FDdkNYLEtBQUtZLFFBVVBwQixFQUFxQmMsVUFBVU8sV0FBYSxXQUMxQyxHQUFJQyxJQUNGYixLQUFNRCxLQUFLQyxLQUNYYyxNQUNFTCxNQUFPVixLQUFLVSxNQUNaRixNQUFPUixLQUFLUSxPQUVkUSxVQUFXaEIsS0FBS1UsUUFBVVYsS0FBS1EsTUFVakMsT0FQb0IsUUFBaEJSLEtBQUtHLFNBQ1BXLEVBQVV2QixFQUFRMEIsT0FDaEJqQixLQUFLRyxPQUNMVyxJQUlHQSxHQVVUdEIsRUFBcUJjLFVBQVVZLFNBQVcsV0FDeEMsTUFBa0IsUUFBZGxCLEtBQUtD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YUFBWUUsU0FDdkJMLFVBQVd6RCxLQUFLeUQsVUFDaEJFLE1BQU8zRCxLQUFLMkQsU0FLbEIsSUFBSXpCLEdBQUtsQyxJQUNUQSxNQUFLK0QsU0FBVy9ELEtBQUtQLE9BQU91RSxPQUMxQixXQUNFLE1BQU85QixHQUFHTixLQUFLSixVQUVqQixTQUFTeUMsR0FDSEEsRUFDRi9CLEVBQUdzQixhQUFhaEMsV0FFaEJVLEVBQUdzQixhQUFhOUIsVUFLdEIxQixLQUFLa0UsVUFBWWxFLEtBQUttRSxZQUFZQyxLQUFLcEUsTUFDdkNBLEtBQUt3RCxhQUFhYSxZQUFZLFdBQVlyRSxLQUFLa0UsWUFVakRYLEVBQXlCakQsVUFBVWdFLFdBQWEsV0FDOUN0RSxLQUFLd0QsYUFBYWUsZUFBZSxXQUFZdkUsS0FBS2tFLFdBQ2xEbEUsS0FBS3dELGFBQWUsS0FDcEJ4RCxLQUFLK0QsWUFZUFIsRUFBeUJqRCxVQUFVNkQsWUFBYyxTQUFTSyxHQUN4RCxHQUFJQyxHQUFXekUsS0FBS0osVUFBVUUsSUFBSSxZQUU5Qm9DLEVBQUtsQyxLQUNMMEUsRUFBYSxXQUNYRixFQUFTdEMsRUFBR3dCLFdBQWFjLEVBQVMsSUFHcEN0QyxFQUFHTixLQUFLSixVQUFXLEVBQ25CaUQsRUFBU3ZDLEVBQUd5QyxhQUloQjNFLE1BQUtQLE9BQU9tRixXQUFXRixJQU16Qm5GLEVBQVFELE9BQU9BLEdBQVF3RCxVQUFVLDJCQUE0QixXQUMzRCxPQUNFQyxPQUNFbkIsS0FBTSw2QkFDTitCLE1BQU8sa0NBQ1BGLFVBQVcsc0NBQ1hDLFVBQVcsc0NBQ1hpQixXQUFZLHVDQUVkMUIsU0FBVSxJQUNWQyxZQUFZLEVBQ1pDLFdBQVlJLEVBQ1pILGtCQUFrQixFQUNsQkMsYUFBYyxxQ0FDZEMsWUFBYSw4REFJaEJ1QixlQUFnQnRGIiwiZmlsZSI6ImFwcC9kaXJlY3RpdmVzL3Rhc2tzL3NhdmluZ3Mtc3VwcG9ydGVkLXRhc2subWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIEFOR1VMQVJfTU9EVUxFLCBhbmd1bGFyLCBTY3JhdGNoY2FyZCAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU2F2aW5nc1N1cHBvcnRlZFRhc2tcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL1xuICAvLyBDT05UUk9MTEVSXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIFNhdmluZ3NTdXBwb3J0ZWRUYXNrID0gZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkaW5qZWN0b3IpIHtcbiAgICB2YXIgdHlwZSA9ICRpbmplY3Rvci5nZXQoJ1RZUEVfU0FWSU5HU19TVVBQT1JURUQnKTtcbiAgICB2YXIgdXNlciA9ICRpbmplY3Rvci5nZXQoJ3VzZXInKTtcblxuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcblxuICAgIHRoaXMudGFzayA9IHVzZXIuZ2V0VGFza0J5VHlwZSh0eXBlKTtcbiAgICB0aGlzLnJlc3VsdCA9IHVzZXIuZ2V0UGVuZGluZ0J5VHlwZSh0eXBlKTtcbiAgfTtcblxuICBTYXZpbmdzU3VwcG9ydGVkVGFzay4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRpbmplY3RvciddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvLyBTRVJWRVJcblxuICAvKiogQHZhciB7b2JqZWN0fSB0YXNrIFRhc2sncyByZXNvdXJjZSBmcm9tIHNlcnZlci4gKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLnRhc2sgPSBudWxsO1xuXG4gIC8qKiBAdmFyIHtvYmplY3R9IHJlc3VsdCBUYXNrJ3MgcGVuZGluZyByZXN1bHQgZnJvbSBzZXJ2ZXIuICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrLnByb3RvdHlwZS5yZXN1bHQgPSBudWxsO1xuXG4gIC8vIEdBTUVQTEFZXG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHJlc29sdmVkIElmIHBsYXllciBoYXMgcmVzb2x2ZWQgdGhlIGdhbWUuICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrLnByb3RvdHlwZS5yZXNvbHZlZCA9IGZhbHNlO1xuXG4gIC8vIFNFVFRJTkdTXG5cbiAgLyoqIEB2YXIge251bWJlcn0gYW1vdW50IEFtb3VudCBvZiB0b3RhbCBjYXJkcy4gKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLnRvdGFsID0gMztcblxuICAvKiogQHZhciB7YXJyYXl9IGNhcmRzIER1bW15IGNvbGxlY3Rpb24gb2YgY2FyZHMuICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrLnByb3RvdHlwZS5jYXJkcyA9IFtdO1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IGNvdW50IE51bWJlciBvZiByZXZlYWxlZCBjYXJkcy4gKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLmNvdW50ID0gMDtcblxuICAvL1xuICAvLyBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIFByb3hpZXMgdG8gYGluaXQoKWAgaWYgY29udHJvbGxlcidzIHJlYWR5LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uSW5pdFxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIHJlc3VsdCBwYXlsb2FkIGZvciBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBnZXRQYXlsb2FkXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBTYXZpbmdzU3VwcG9ydGVkVGFzay5wcm90b3R5cGUuZ2V0UGF5bG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgdGFzazogdGhpcy50YXNrLFxuICAgICAganNvbjoge1xuICAgICAgICBjb3VudDogdGhpcy5jb3VudCxcbiAgICAgICAgdG90YWw6IHRoaXMudG90YWxcbiAgICAgIH0sXG4gICAgICBpc1BlbmRpbmc6IHRoaXMuY291bnQgIT09IHRoaXMudG90YWxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICBwYXlsb2FkID0gYW5ndWxhci5leHRlbmQoXG4gICAgICAgIHRoaXMucmVzdWx0LFxuICAgICAgICBwYXlsb2FkXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBwYXlsb2FkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0YXNrIGlzIGN1cnJlbnRseSBsb2NrZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBpc0xvY2tlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLmlzTG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGFzayA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnRhc2suaXNBY3RpdmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRhc2sgY2FuIGJlIHNlbnQgdG8gc2VydmVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgY2FuUmVzb2x2ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2sucHJvdG90eXBlLmNhblJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlciA9IHRoaXMuJGluamVjdG9yLmdldCgndXNlcicpO1xuICAgIGlmICghdXNlci5pc1VzZXIoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTG9ja2VkKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXNvbHZlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGluaXRpYWwgc3RhdGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBpbml0XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBTYXZpbmdzU3VwcG9ydGVkVGFzay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRyeSB0byBpbml0aWFsaXplIGZyb20gcGVuZGluZyByZXN1bHRcbiAgICBpZiAodGhpcy5yZXN1bHQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuY291bnQgPSB0aGlzLnJlc3VsdC5qc29uLmNvdW50O1xuICAgIH1cblxuICAgIHRoaXMuY2FyZHMgPSBbXTtcbiAgICBmb3IgKHZhciBpPTE7IGk8PXRoaXMudG90YWw7IGkrKykge1xuICAgICAgdGhpcy5jYXJkcy5wdXNoKHtcbiAgICAgICAgY29tcGxldGU6IGkgPD0gdGhpcy5jb3VudCxcbiAgICAgICAgbnVtYmVyOiBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBpbml0aWFsIHN0YXRlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgcmVzZXRcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVzdWx0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogSW5jcmVhc2VzIGBjb3VudGAgYW5kIGludm9rZXMgYHJlc29sdmUoKWAuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGNhcmRcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihjYXJkKXtcbiAgICB2YXIgbm90aWZpY2F0aW9uID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdub3RpZmljYXRpb24nKTtcbiAgICB2YXIgaTE4biA9IHRoaXMuJGluamVjdG9yLmdldCgnaTE4bicpO1xuXG4gICAgLy8gY2hlY2sgZm9yIHNlcXVlbnRpYWwgcmVzb2x2aW5nIG9mIGNhcmRzXG4gICAgdmFyIG5leHRXZWVrID0gdGhpcy5jb3VudCArIDE7XG4gICAgaWYgKGNhcmQubnVtYmVyICE9PSBuZXh0V2Vlaykge1xuICAgICAgdmFyIG1lc3NhZ2UgPSBpMThuLmdldCgnUGxlYXNlIHJldmVhbCB3ZWVrICVzIG5leHQhJywgbmV4dFdlZWspO1xuICAgICAgbm90aWZpY2F0aW9uLndhcm5pbmcobWVzc2FnZSk7XG4gICAgICBjYXJkLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgMSB3ZWVrIHBhc3RlZCBzaW5jZSBsYXN0IHJlc3VsdFxuICAgIC8qaWYgKHRoaXMucmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICB2YXIgdXBkYXRlZEF0ID0gbmV3IERhdGUodGhpcy5yZXN1bHQudXBkYXRlZEF0ICogMTAwMCk7XG4gICAgICB2YXIgbWluRGF0ZSA9IG5ldyBEYXRlKHVwZGF0ZWRBdC5nZXRUaW1lKCkpO1xuICAgICAgbWluRGF0ZS5zZXREYXRlKG1pbkRhdGUuZ2V0RGF0ZSgpKzcpO1xuXG4gICAgICB2YXIgY3VyVGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICB2YXIgbWluVGltZSA9IG1pbkRhdGUuZ2V0VGltZSgpO1xuXG4gICAgICBpZiAoY3VyVGltZSA8IG1pblRpbWUpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpMThuLmdldChcIkRvZXNuJ3Qgc2VlbSBhIHdlZWsgYWxyZWFkeSBlbGFwc2VkIVwiKTtcbiAgICAgICAgbm90aWZpY2F0aW9uLndhcm5pbmcobWVzc2FnZSk7XG4gICAgICAgIGNhcmQuY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0qL1xuXG4gICAgLy8gY2hlY2sgaWYgcmVzb2x2ZSBpcyBwb3NzaWJsZVxuICAgIGlmICghdGhpcy5jYW5SZXNvbHZlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBub3cgcHVibGlzaCB0aGUgY2hhbmdlXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24oKXt9O1xuICAgIHZhciBmYWlsdXJlQ2FsbGJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgY2FyZC5jb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgbWUuY291bnQtLTtcbiAgICB9O1xuXG4gICAgdGhpcy5jb3VudCA9IG5leHRXZWVrO1xuICAgIHRoaXMucmVzb2x2ZSgpLnRoZW4oXG4gICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGByZXNvbHZlZGAgZmxhZy4gQ2FsbHMgYG9uUmVzb2x2ZWBcbiAgICogY2FsbGJhY2sgd2l0aCBKU09OIHJlc3VsdCBmb3IgY29uc3VtZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCByZXNvbHZlXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBTYXZpbmdzU3VwcG9ydGVkVGFzay5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIG5vdGlmaWNhdGlvbiA9IHRoaXMuJGluamVjdG9yLmdldCgnbm90aWZpY2F0aW9uJyk7XG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ2kxOG4nKTtcbiAgICB2YXIgJHEgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRxJyk7XG5cbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLnJlc3VsdCA9PT0gbnVsbCA/XG4gICAgICB0aGlzLm9uUmVzb2x2ZSA6XG4gICAgICB0aGlzLm9uVXBkYXRlO1xuXG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKHtcbiAgICAgIHBheWxvYWQ6IHRoaXMuZ2V0UGF5bG9hZCgpXG4gICAgfSk7XG5cbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQuaXNQZW5kaW5nKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gaTE4bi5nZXQoJ1N1cGVyLCBrZWVwIGl0IHVwIScpO1xuICAgICAgICBub3RpZmljYXRpb24uc3VjY2VzcyhtZXNzYWdlKTtcbiAgICAgICAgbWUucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1lLnJlc29sdmVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIH07XG5cbiAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4ocmVzdWx0KS50aGVuKFxuICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuZGlyZWN0aXZlKCdzYXZpbmdzU3VwcG9ydGVkVGFzaycsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGFtb3VudDogJz0/c2F2aW5nc1N1cHBvcnRlZFRhc2tBbW91bnQnLFxuICAgICAgICBvblVwZGF0ZTogJyZzYXZpbmdzU3VwcG9ydGVkVGFza09uVXBkYXRlJyxcbiAgICAgICAgb25SZXNvbHZlOiAnJnNhdmluZ3NTdXBwb3J0ZWRUYXNrT25SZXNvbHZlJ1xuICAgICAgfSxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogU2F2aW5nc1N1cHBvcnRlZFRhc2ssXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlckFzOiAnc2F2aW5nc1N1cHBvcnRlZFRhc2tDb250cm9sbGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90YXNrcy9zYXZpbmdzLXN1cHBvcnRlZC10YXNrLmh0bWwnXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU2F2aW5nc1N1cHBvcnRlZFRhc2sgQ2FyZFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkID0gZnVuY3Rpb24oJHNjb3BlLCRlbGVtZW50LCRhdHRycywgJGluamVjdG9yKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuXG4gICAgdGhpcy4kaW5qZWN0b3IgPSAkaW5qZWN0b3I7XG5cbiAgICB0aGlzLl9zY3JhdGNoQ2FyZCA9IG51bGw7XG4gIH07XG5cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkLiRpbmplY3QgPSBbJyRzY29wZScsJyRlbGVtZW50JywnJGF0dHJzJywgJyRpbmplY3RvciddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvKiogQHZhciB7Ym9vbGVhbn0gY29tcGxldGUgSWYgY2FyZCBoYXMgYmVlbiByZXZlbGVhZC4gKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZhbHNlO1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IHRoaWNrbmVzcyBUaGlja25lc3Mgb2YgcnViYmVyIGluIHBpeGVsLiAqL1xuICBTYXZpbmdzU3VwcG9ydGVkVGFza0NhcmQucHJvdG90eXBlLnRoaWNrbmVzcyA9IDIwO1xuXG4gIC8qKiBAdmFyIHtudW1iZXJ9IHRyZXNob2xkIFRyZXNob2xkIGxldmVsIHdoZW4gY2FyZCByZXZlbHMuICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZC5wcm90b3R5cGUudGhyZXNob2xkID0gMC4yNTtcblxuICAvKiogQHZhciB7c3RyaW5nfSBjb2xvciBDb2xvciBvZiBjYXJkIG92ZXJsYXkuICovXG4gIFNhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZC5wcm90b3R5cGUuY29sb3IgPSAnI2U1ZTVlNSc7XG5cbiAgLy9cbiAgLy8gTUVUSE9EU1xuICAvL1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBlbGVtZW50IHdpdGggYFNjcmF0Y2hjYXJkYCBsaWJyYXJ5LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uSW5pdFxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkLnByb3RvdHlwZS4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fc2NyYXRjaENhcmQgPSBuZXcgU2NyYXRjaGNhcmQoXG4gICAgICB0aGlzLiRlbGVtZW50LmdldCgwKSxcbiAgICAgIHtcbiAgICAgICAgcGFpbnRlcjogbmV3IFNjcmF0Y2hjYXJkLlBhaW50ZXIoe1xuICAgICAgICAgIHRoaWNrbmVzczogdGhpcy50aGlja25lc3MsXG4gICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB0aGlzLl91bndhdGNoID0gdGhpcy4kc2NvcGUuJHdhdGNoKFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtZS5jYXJkLmNvbXBsZXRlO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKGlzQ29tcGxldGUpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICBtZS5fc2NyYXRjaENhcmQuY29tcGxldGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZS5fc2NyYXRjaENhcmQucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLl9saXN0ZW5lciA9IHRoaXMuX29uUHJvZ3Jlc3MuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9zY3JhdGNoQ2FyZC5hZGRMaXN0ZW5lcigncHJvZ3Jlc3MnLCB0aGlzLl9saXN0ZW5lcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgbGlzdGVuZXJzIGFuZCB3YXRjaGVzIGZyb20gZGlyZWN0aXZlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uRGVzdHJveVxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkLnByb3RvdHlwZS4kb25EZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fc2NyYXRjaENhcmQucmVtb3ZlTGlzdGVuZXIoJ3Byb2dyZXNzJywgdGhpcy5fbGlzdGVuZXIpO1xuICAgIHRoaXMuX3NjcmF0Y2hDYXJkID0gbnVsbDtcbiAgICB0aGlzLl91bndhdGNoKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBwcm9ncmVzcycgdHJlc2hvbGQgaGFzIGJlZW4gZXhjZWVkZWQsIGJ1dCBpcyBzdGlsbFxuICAgKiBiZWxvdyAxMDAlLiBJbiB0aGlzIGNhc2UsIHRoZSBjYXJkIHdpbGwgYmUgcmV2ZWxlYWQgYW5kXG4gICAqIHRoZSBgb25Db21wbGV0ZWAgY2FsbGJhY2sgY2FuIGJlIGludm9rZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBfb25Qcm9ncmVzc1xuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgU2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkLnByb3RvdHlwZS5fb25Qcm9ncmVzcyA9IGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgdmFyICR0aW1lb3V0ID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckdGltZW91dCcpO1xuXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB2YXIgb25Qcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHByb2dyZXNzPm1lLnRocmVzaG9sZCAmJsKgcHJvZ3Jlc3M8MSkge1xuICAgICAgICAvLyBjYWxsIHdpdGggJHRpbWVvdXQoKSBjYXVzZSBjb25zdW1lclxuICAgICAgICAvLyBjb3VsZCBhbHNvIGNoYW5nZSBgY29tcGxldGVgIGZsYWchXG4gICAgICAgIG1lLmNhcmQuY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAkdGltZW91dChtZS5vbkNvbXBsZXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy4kc2NvcGUuJGV2YWxBc3luYyhvblByb2dyZXNzKTtcbiAgfTtcblxuICAvL1xuICAvLyBSRUdJU1RSWVxuICAvL1xuICBhbmd1bGFyLm1vZHVsZShtb2R1bGUpLmRpcmVjdGl2ZSgnc2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkJywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY2FyZDogJz0/c2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkJyxcbiAgICAgICAgY29sb3I6ICc9P3NhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZENvbG9yJyxcbiAgICAgICAgdGhpY2tuZXNzOiAnPT9zYXZpbmdzU3VwcG9ydGVkVGFza0NhcmRUaGlja25lc3MnLFxuICAgICAgICB0aHJlc2hvbGQ6ICc9P3NhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZFRocmVzaG9sZCcsXG4gICAgICAgIG9uQ29tcGxldGU6ICcmc2F2aW5nc1N1cHBvcnRlZFRhc2tDYXJkT25Db21wbGV0ZSdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIGNvbnRyb2xsZXI6IFNhdmluZ3NTdXBwb3J0ZWRUYXNrQ2FyZCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyQXM6ICdzYXZpbmdzU3VwcG9ydGVkVGFza0NhcmRDb250cm9sbGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90YXNrcy9zYXZpbmdzLXN1cHBvcnRlZC10YXNrLWNhcmQuaHRtbCdcbiAgICB9O1xuICB9KTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
