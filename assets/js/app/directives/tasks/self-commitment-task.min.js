/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  // --------------------------------------------------
  // SelfCommitmentTask
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var SelfCommitmentTask = function($scope, $elemnt, $attrs, $injector) {
    var type = $injector.get('TYPE_SELF_COMMITMENT');
    var user = $injector.get('user');

    this.$injector = $injector;
    this.task = user.getTaskByType(type);
  };

  SelfCommitmentTask.$inject = ['$scope','$element','$attrs', '$injector'];

  // SERVER

  /** @var {object} task Task's resource from server. */
  SelfCommitmentTask.prototype.task = null;

  // GAMEPLAY

  /** @var {boolean} resolved If player has resolved the game. */
  SelfCommitmentTask.prototype.resolved = false;

  //
  // METHODS
  //

  /**
   * Proxies to `init()` if controller's ready.
   *
   * @public
   * @method $onInit
   * @return {void}
   */
  SelfCommitmentTask.prototype.$onInit = function() {
    this.init();
  };

  /**
   * Retrieves result payload for server.
   *
   * @public
   * @method getPayload
   * @return {void}
   */
  SelfCommitmentTask.prototype.getPayload = function() {
    return {
      task: this.task,
      json: null
    };
  };

  /**
   * Whether or not task is currently locked.
   *
   * @public
   * @method isLocked
   * @return {boolean}
   */
  SelfCommitmentTask.prototype.isLocked = function() {
    if (this.task === null) {
      return true;
    }

    return !this.task.isActive;
  };

  /**
   * Whether or not task can be sent to server.
   *
   * @public
   * @method canResolve
   * @return {boolean}
   */
  SelfCommitmentTask.prototype.canResolve = function() {
    var user = this.$injector.get('user');
    if (!user.isUser()) {
      return false;
    }

    if (this.isLocked()) {
      return false;
    }

    if (this.resolved) {
      return false;
    }

    return true;
  };

  /**
   * Sets up initial state.
   *
   * @public
   * @method init
   * @return {void}
   */
  SelfCommitmentTask.prototype.init = function() {
    this.resolved = false;
  };

  /**
   * Resets initial state.
   *
   * @public
   * @method reset
   * @return {void}
   */
  SelfCommitmentTask.prototype.reset = function(){
    this.init();
  };

  /**
   * Description.
   *
   * @public
   * @method update
   * @return {void}
   */
  SelfCommitmentTask.prototype.update = function(){
    this.resolve();
  };

  /**
   * Sets `resolved` flag. Calls `onResolve`
   * callback with JSON result for consumer.
   *
   * @public
   * @method resolve
   * @return {void}
   */
  SelfCommitmentTask.prototype.resolve = function(){
    var $q = this.$injector.get('$q');

    var result = this.onResolve({
      payload: this.getPayload()
    });

    var me = this;
    var successCallback = function() {
      me.resolved = true;
    };
    var failureCallback = function() {

    };

    var promise = $q.when(result);
    promise.then(
      successCallback,
      failureCallback
    );

    return promise;
  };

  //
  // REGISTRY
  //
  angular.module(module).directive('selfCommitmentTask', function(){
    return {
      scope: {
        onResolve: '&selfCommitmentTaskOnResolve'
      },
      restrict: 'A',
      transclude: true,
      bindToController: true,
      controller: SelfCommitmentTask,
      controllerAs: 'selfCommitmentTaskController',
      templateUrl: 'views/directives/tasks/self-commitment-task.html'
    };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL3Rhc2tzL3NlbGYtY29tbWl0bWVudC10YXNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwL2RpcmVjdGl2ZXMvdGFza3Mvc2VsZi1jb21taXRtZW50LXRhc2subWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIEFOR1VMQVJfTU9EVUxFLCBhbmd1bGFyICovXG4oZnVuY3Rpb24obW9kdWxlLCBhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTZWxmQ29tbWl0bWVudFRhc2tcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL1xuICAvLyBDT05UUk9MTEVSXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIFNlbGZDb21taXRtZW50VGFzayA9IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1udCwgJGF0dHJzLCAkaW5qZWN0b3IpIHtcbiAgICB2YXIgdHlwZSA9ICRpbmplY3Rvci5nZXQoJ1RZUEVfU0VMRl9DT01NSVRNRU5UJyk7XG4gICAgdmFyIHVzZXIgPSAkaW5qZWN0b3IuZ2V0KCd1c2VyJyk7XG5cbiAgICB0aGlzLiRpbmplY3RvciA9ICRpbmplY3RvcjtcbiAgICB0aGlzLnRhc2sgPSB1c2VyLmdldFRhc2tCeVR5cGUodHlwZSk7XG4gIH07XG5cbiAgU2VsZkNvbW1pdG1lbnRUYXNrLiRpbmplY3QgPSBbJyRzY29wZScsJyRlbGVtZW50JywnJGF0dHJzJywgJyRpbmplY3RvciddO1xuXG4gIC8vIFNFUlZFUlxuXG4gIC8qKiBAdmFyIHtvYmplY3R9IHRhc2sgVGFzaydzIHJlc291cmNlIGZyb20gc2VydmVyLiAqL1xuICBTZWxmQ29tbWl0bWVudFRhc2sucHJvdG90eXBlLnRhc2sgPSBudWxsO1xuXG4gIC8vIEdBTUVQTEFZXG5cbiAgLyoqIEB2YXIge2Jvb2xlYW59IHJlc29sdmVkIElmIHBsYXllciBoYXMgcmVzb2x2ZWQgdGhlIGdhbWUuICovXG4gIFNlbGZDb21taXRtZW50VGFzay5wcm90b3R5cGUucmVzb2x2ZWQgPSBmYWxzZTtcblxuICAvL1xuICAvLyBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIFByb3hpZXMgdG8gYGluaXQoKWAgaWYgY29udHJvbGxlcidzIHJlYWR5LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uSW5pdFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgU2VsZkNvbW1pdG1lbnRUYXNrLnByb3RvdHlwZS4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyByZXN1bHQgcGF5bG9hZCBmb3Igc2VydmVyLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgZ2V0UGF5bG9hZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgU2VsZkNvbW1pdG1lbnRUYXNrLnByb3RvdHlwZS5nZXRQYXlsb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhc2s6IHRoaXMudGFzayxcbiAgICAgIGpzb246IG51bGxcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0YXNrIGlzIGN1cnJlbnRseSBsb2NrZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBpc0xvY2tlZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgU2VsZkNvbW1pdG1lbnRUYXNrLnByb3RvdHlwZS5pc0xvY2tlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnRhc2sgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy50YXNrLmlzQWN0aXZlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0YXNrIGNhbiBiZSBzZW50IHRvIHNlcnZlci5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGNhblJlc29sdmVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIFNlbGZDb21taXRtZW50VGFzay5wcm90b3R5cGUuY2FuUmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB1c2VyID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCd1c2VyJyk7XG4gICAgaWYgKCF1c2VyLmlzVXNlcigpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNMb2NrZWQoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc29sdmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgaW5pdGlhbCBzdGF0ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGluaXRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIFNlbGZDb21taXRtZW50VGFzay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzb2x2ZWQgPSBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogUmVzZXRzIGluaXRpYWwgc3RhdGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCByZXNldFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgU2VsZkNvbW1pdG1lbnRUYXNrLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgdXBkYXRlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBTZWxmQ29tbWl0bWVudFRhc2sucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5yZXNvbHZlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYHJlc29sdmVkYCBmbGFnLiBDYWxscyBgb25SZXNvbHZlYFxuICAgKiBjYWxsYmFjayB3aXRoIEpTT04gcmVzdWx0IGZvciBjb25zdW1lci5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHJlc29sdmVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIFNlbGZDb21taXRtZW50VGFzay5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyICRxID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCckcScpO1xuXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMub25SZXNvbHZlKHtcbiAgICAgIHBheWxvYWQ6IHRoaXMuZ2V0UGF5bG9hZCgpXG4gICAgfSk7XG5cbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIG1lLnJlc29sdmVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHZhciBmYWlsdXJlQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblxuICAgIH07XG5cbiAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4ocmVzdWx0KTtcbiAgICBwcm9taXNlLnRoZW4oXG4gICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICApO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgLy9cbiAgLy8gUkVHSVNUUllcbiAgLy9cbiAgYW5ndWxhci5tb2R1bGUobW9kdWxlKS5kaXJlY3RpdmUoJ3NlbGZDb21taXRtZW50VGFzaycsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9uUmVzb2x2ZTogJyZzZWxmQ29tbWl0bWVudFRhc2tPblJlc29sdmUnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogU2VsZkNvbW1pdG1lbnRUYXNrLFxuICAgICAgY29udHJvbGxlckFzOiAnc2VsZkNvbW1pdG1lbnRUYXNrQ29udHJvbGxlcicsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdGFza3Mvc2VsZi1jb21taXRtZW50LXRhc2suaHRtbCdcbiAgICB9O1xuICB9KTtcblxufSkoQU5HVUxBUl9NT0RVTEUsIGFuZ3VsYXIpO1xuIl19
