/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(e,t){"use strict";var s=function(e,t,s,r){var i=r.get("TYPE_INTEREST"),o=r.get("user");this.$scope=e,this.$attrs=s,this.$element=t,this.$injector=r,this.task=o.getTaskByType(i)};s.$inject=["$scope","$element","$attrs","$injector"],s.prototype.task=null,s.prototype.resolved=!1,s.prototype.correctAnswers=0,s.prototype.exercise1Answer=0,s.prototype.exercise2Answer=0,s.prototype.exercise1Correct=!1,s.prototype.exercise2Correct=!1,s.prototype.exercise1Result=0,s.prototype.exercise2Result=0,s.prototype.amount=1e3,s.prototype.rate=.02,s.prototype.years=1,s.prototype.$onInit=function(){this.init()},s.prototype.getPayload=function(){return{task:this.task,json:{exercise1:{current_result:this.exercise1Result,actual_result:this.exercise1Answer,is_valid:this.exercise1Correct},exercise2:{current_result:this.exercise2Result,actual_result:this.exercise2Answer,is_valid:this.exercise2Correct}}}},s.prototype.isLocked=function(){return null===this.task||!this.task.isActive},s.prototype.canResolve=function(){var e=this.$injector.get("user");return!!e.isUser()&&(!this.isLocked()&&(!this.resolved&&(!!this.exercise1Answer&&!!this.exercise2Answer)))},s.prototype.init=function(){this.resolved=!1,this.correctAnswers=0,this.exercise1Answer=0,this.exercise2Answer=0,this.exercise1Correct=!1,this.exercise2Correct=!1,this.exercise1Result=this._calculateResult(1),this.exercise2Result=this._calculateResult(1+this.years)},s.prototype.reset=function(){this.init()},s.prototype.update=function(e,t){switch(t){case"exercise1":this.exercise1Answer=e;break;case"exercise2":this.exercise2Answer=e}this.exercise1Correct=this.exercise1Answer===this.exercise1Result,this.exercise2Correct=this.exercise2Answer===this.exercise2Result,this.exercise1Correct&&this.exercise2Correct?this.correctAnswers=2:this.exercise1Correct?this.correctAnswers=1:this.exercise2Correct?this.correctAnswers=1:this.correctAnswers=0},s.prototype.resolve=function(){var e=this.$injector.get("$q"),t=this.onResolve({payload:this.getPayload()}),s=this,r=function(){s.resolved=!0},i=function(){},o=e.when(t);return o.then(r,i),o},s.prototype._calculateResult=function(e){return this.amount*Math.pow(1+this.rate,e||1)},t.module(e).directive("interestTask",function(){return{scope:{rate:"=?interestTaskRate",years:"=?interestTaskYears",amount:"=?interestTaskAmount",onResolve:"&interestTaskOnResolve"},restrict:"A",transclude:!0,controller:s,bindToController:!0,controllerAs:"interestTaskController",templateUrl:"views/directives/tasks/interest-task.html"}});var r=function(e,t,s){this.$element=t,this.$scope=e,this.$attrs=s,this.disabled=!1,this.stack=[],this.sum=0;var r=this;this._unwatch=e.$watch(function(){return r.sum},function(e){e||(r.sum=0,r.stack=[])})};r.$inject=["$scope","$element","$attrs"],r.prototype.disabled=!1,r.prototype.stack=[],r.prototype.sum=0,r.prototype.notes=[500,200,100,50,20,10,5],r.prototype.coins=[2,1,.5,.2,.1,.05,.02,.01],r.prototype.$onDestroy=function(){this._unwatch()},r.prototype.onDrop=function(e){this.stack.push(e),this.sum+=e,this.onUpdate({sum:this.sum})},r.prototype.revert=function(){this.sum-=this.stack.pop(),this.onUpdate({sum:this.sum})},t.module(e).directive("interestTaskExercise",function(){return{scope:{sum:"=?interestTaskExerciseSum",onUpdate:"&interestTaskExerciseOnUpdate",disabled:"=?interestTaskExerciseDisabled"},restrict:"A",transclude:!0,controller:r,bindToController:!0,controllerAs:"interestTaskExerciseController",templateUrl:"views/directives/tasks/interest-task-exercise.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
