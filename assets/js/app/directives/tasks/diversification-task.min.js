/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,i){"use strict";var s=function(t,i,s,o){var e=o.get("TYPE_DIVERSIFICATION"),n=o.get("user");this.$injector=o,this.task=n.getTaskByType(e)};s.$inject=["$scope","$element","$attrs","$injector"],s.prototype.task=null,s.prototype.resolved=!1,s.prototype.heads="K",s.prototype.tails="Z",s.prototype.companies={},s.prototype.tickets={},s.prototype.sides=[],s.prototype.sides=[],s.prototype.$onInit=function(){this.init()},s.prototype.getPayload=function(){return{task:this.task,json:{tickets:{one:this.tickets.one.company,two:this.tickets.two.company},"throws":{one:this["throws"].one.toss,two:this["throws"].two.toss}},ticketCount:this.getTicketCount()}},s.prototype.isLocked=function(){return null===this.task||!this.task.isActive},s.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(!!this.tickets.one.company&&!!this.tickets.two.company)))},s.prototype.init=function(){var t=this.$injector.get("random");this.sides=[this.heads,this.tails],this["throws"]={one:{id:1,toss:t.pick(this.sides)},two:{id:2,toss:t.pick(this.sides)}},this.tickets={one:{id:1,company:null},two:{id:2,company:null}},this.companies={one:{id:1,count:0,tickets:{},name:"Smart",image:"company-a.svg"},two:{id:2,count:0,tickets:{},name:"Phone",image:"company-b.svg"}},this.resolved=!1},s.prototype.reset=function(){this.init()},s.prototype.update=function(t,i,s){switch(s){case"add":i.tickets[t.id]||(i.tickets[t.id]=t,t.company=i.name,i.count++);break;case"remove":i.tickets[t.id]&&(delete i.tickets[t.id],t.company=null,i.count--)}},s.prototype.resolve=function(){var t=this.$injector.get("$q"),i=this.onResolve({payload:this.getPayload()}),s=this,o=function(){s.resolved=!0},e=function(){},n=t.when(i);return n.then(o,e),n},s.prototype.getTicketCount=function(){var t=this["throws"].one.toss===this.heads?2:1,i=this["throws"].two.toss===this.heads?2:1,s=this.companies.one.count*t,o=this.companies.two.count*i;return s+o},i.module(t).directive("diversificationTask",function(){return{scope:{onResolve:"&diversificationTaskOnResolve"},restrict:"A",transclude:!0,bindToController:!0,controller:s,controllerAs:"diversificationTaskController",templateUrl:"views/directives/tasks/diversification-task.html"}});var o=function(t,i,s,o){this.$scope=t,this.$attrs=s,this.$element=i,this.$injector=o,this._element=this.$element.find(".coin"),this._animationEndEvent=this._getAnimationEndEvent()};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.toss=null,o.prototype.sides=[],o.prototype.heads="K",o.prototype.tails="Z",o.prototype.flip=!1,o.prototype.animate=!1,o.prototype.back="back",o.prototype.front="front",o.prototype.startSide="K",o.prototype.$onInit=function(){var t=this.$injector.get("$timeout"),s=this;this.sides=[{value:this.heads,"class":this.front},{value:this.tails,"class":this.back}],this.startSide!==this.heads&&(this.sides[0]["class"]=this.back,this.sides[1]["class"]=this.front),s._toss=s._getToss();var o=function(){var t=function(t){return t.value===s._toss.value?void(t["class"]=s.front):void(t["class"]=s.back)};i.forEach(s.sides,t)},e=function(i){i&&(s.onStart({toss:s._toss.value}),t(o,100),s.animate=!0)},n=function(){return s.flip},a=function(t,i){t!==i&&(s._toss=s._getToss())},r=function(){return s.toss},c=function(){s.onFinish({toss:s._toss.value}),s.animate=!1},h=function(){s.$scope.$evalAsync(c)};this.onInit({toss:s._toss.value}),this._animationEndEvent&&this._element.on(this._animationEndEvent,h),this._unwatchFlip=this.$scope.$watch(n,e),this._unwatchToss=this.$scope.$watch(r,a)},o.prototype.$onDestroy=function(){this._element.off(this._animationEndEvent),this._unwatchToss(),this._unwatchFlip()},o.prototype._getAnimationEndEvent=function(){var t=document.createElement("div"),i={WebkitAnimation:"webkitAnimationEnd",MozTAnimation:"animationend",animation:"animationend"};for(var s in i){var o=t.style[s];if(void 0!==o)return i[s]}return null},o.prototype._getToss=function(){var t=this.$injector.get("$filter"),i=this.$injector.get("random"),s=i.pick(this.sides);if(null===this.toss)return s;var o=t("filter")(this.sides,{value:this.toss});return 0===o.length?(console.warn("Invalid value for `toss` - using random value!"),s):o[0]},i.module(t).directive("diversificationTaskCoin",function(){return{scope:{toss:"=?diversificationTaskCoinToss",flip:"=?diversificationTaskCoinFlip",onInit:"&diversificationTaskCoinOnInit",onStart:"&diversificationTaskCoinOnStart",onFinish:"&diversificationTaskCoinOnFinish",startSide:"=?diversificationTaskCoinStartSide"},restrict:"A",transclude:!0,bindToController:!0,controller:o,controllerAs:"diversificationTaskCoinController",templateUrl:"views/directives/tasks/diversification-task-coin.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
