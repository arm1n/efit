/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var i=function(t,e,i,s){var o=s.get("TYPE_PROCRASTINATION"),r=s.get("user");this.$injector=s,this.task=r.getTaskByType(o),this.result=r.getPendingByType(o),this.domId="procrastination-task-"+t.$id,this._intervalId=null,this._onInterval=this._onInterval.bind(this)};i.$inject=["$scope","$element","$attrs","$injector"],i.prototype.type=null,i.prototype.task=null,i.prototype.result=null,i.prototype.mode=null,i.prototype.count=0,i.prototype.total=1,i.prototype.rounds=[],i.prototype.openRounds=null,i.prototype.minCatched=null,i.prototype.maxEscaped=null,i.prototype.updatedAt=null,i.prototype.invalidAt=null,i.prototype.state="IDLE",i.prototype.resolved=!1,i.prototype.domId=null,i.prototype.hasWarmup=!1,i.prototype.warmupMaxEscaped=2,i.prototype.warmupMinCatched=20,i.prototype.$onInit=function(){this.init()},i.prototype.$onDestroy=function(){var t=this.$injector.get("$interval");null!==this._intervalId&&t.cancel(this._intervalId)},i.prototype.getPayload=function(){var t={task:this.task,json:{mode:this.mode,state:this.state,rounds:this.rounds,success:this.hasSuccess()},isPending:this._isPending(),ticketCount:this.getTicketCount()};return null!==this.result&&(t=e.extend(this.result,t)),t},i.prototype.isLocked=function(){return null===this.task||!this.task.isActive},i.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(!this.hasWarmup,!0)))},i.prototype.init=function(){if(null!==this.result){var t=this.result.json;this.rounds=t.rounds,this.count=t.rounds.length,this.setMode(t.mode),this.setState(t.state)}this.resolved=!1},i.prototype.reset=function(){this.init()},i.prototype.update=function(t){switch(this.state){case"IDLE":this.setState("DECISION");break;case"DECISION":this.setState("PLAYING");break;case"PLAYING":this.count=this.rounds.push(t)}this.canResolve()&&this.resolve()},i.prototype.resolve=function(){var t=this.$injector.get("notification"),e=this.$injector.get("i18n"),i=this.$injector.get("$q"),s=null===this.result?this.onResolve:this.onUpdate,o=s({payload:this.getPayload()}),r=this,n=function(i){var s;if(i.isPending)switch(r.result=i,r.state){case"IDLE":break;case"DECISION":break;case"PLAYING":switch(r.mode){case"ALL":break;case"SPLIT":r.count>0&&(s=e.get("Super, you have succeeded exercise %s of %s!",r.count,r.total),t.success(s))}}else r.hasSuccess()?(s=e.get("Super, you have successfully done this exercise and retrieve 5 tickets!"),t.success(s)):(s=e.get("Sorry, but the time has expired for this exercise and you retrieve only 1 ticket!"),t.error(s)),r.resolved=!0},a=function(){},h=i.when(o);return h.then(n,a),h},i.prototype.setMode=function(t){switch(t){case"ALL":this.total=1,this.maxEscaped=15,this.minCatched=150;break;case"SPLIT":this.total=3,this.maxEscaped=5,this.minCatched=50;break;default:return}this.mode=t,this.openRounds=this.total-this.count},i.prototype.setState=function(t){var e=this.$injector.get("$interval");switch(t){case"IDLE":break;case"DECISION":break;case"PLAYING":var i=this.result.updatedAt;switch(this.updatedAt=moment.unix(i),this.invalidAt=this.updatedAt.clone(),this.mode){case"ALL":this.invalidAt.add(6,"weeks");break;case"SPLIT":this.invalidAt.add(2,"weeks")}this._intervalId=e(this._onInterval,1e3);break;default:return}this.state=t},i.prototype.setWarmup=function(t){this.hasWarmup=t},i.prototype.isInvalid=function(){return null!==this.invalidAt&&this._now().isAfter(this.invalidAt)},i.prototype.hasSuccess=function(){return this.rounds.length===this.total},i.prototype.getCurrentRound=function(){return this.count+1},i.prototype.getRemainingTime=function(){var t=this.$injector.get("string"),e=this.$injector.get("i18n");if(null===this.invalidAt)return"";var i,s,o=this.invalidAt.diff(this._now()),r=moment.duration(o),n=~~r.asSeconds(),a=~~r.asMinutes(),h=~~r.asHours(),p=~~r.asDays();p>0?(i=p,s=["day","days"]):h>0?(i=h,s=["hour","hours"]):a>0?(i=a,s=["minute","minutes"]):(i=n>=0?n:0,s=["second","seconds"]);var c=1===i?s[0]:s[1],u=e.get(c);return t.sprintf("%s %s",i,u)},i.prototype.getTicketCount=function(){return this.hasSuccess()?5:1},i.prototype._onInterval=function(){var t=this.$injector.get("$interval");this.isInvalid()&&this.canResolve()&&(t.cancel(this._intervalId),this.count=this.total,this.resolve())},i.prototype._isPending=function(){return this.count<this.total},i.prototype._now=function(){return moment()},e.module(t).directive("procrastinationTask",function(){return{scope:{onUpdate:"&procrastinationTaskOnUpdate",onResolve:"&procrastinationTaskOnResolve"},restrict:"A",transclude:!0,controller:i,bindToController:!0,controllerAs:"procrastinationTaskController",templateUrl:"views/directives/tasks/procrastination-task.html"}});var s=function(t,i,s,o){this.$scope=t,this.$attrs=s,this.$element=i,this.$injector=o,this.domId="viewport-"+t.$id,this._nextId=0,this._tapped=0,this._rounds=0,this._retries=0,this._timeout=100,this._requestId=null,this._loop=this._loop.bind(this),this._update=this._update.bind(this),this._resize=this._resize.bind(this),this._window=e.element(window),this._viewport=this.$element.find(".viewport")};s.$inject=["$scope","$element","$attrs","$injector"],s.prototype.catched=0,s.prototype.escaped=0,s.prototype.accuracy=0,s.prototype.bubbles={},s.prototype.viewport={},s.prototype.state="IDLE",s.prototype.expired=!1,s.prototype.maxRounds=1,s.prototype.maxRetries=Number.POSITIVE_INFINITY,s.prototype.maxEscaped=15,s.prototype.minCatched=150,s.prototype.bubbleDelay=100,s.prototype.$onInit=function(){this._window.on("resize",this._resize),this._resize();var t=this;this._unwatch=this.$scope.$watch(function(){return t.expired},function(e){e&&t.expire()})},s.prototype.$onDestroy=function(){this._window.off("resize",this._resize)},s.prototype.start=function(){this._loop(),this.state="RUNNING"},s.prototype.quit=function(){this._unloop(),this._retries++,this.bubbles={},this.state="GAME_OVER";var t=this._getResult();this.onGameOver({result:t})},s.prototype.done=function(){this._unloop(),this._rounds++,this.bubbles={},this.state="GAME_DONE";var t=this._getResult();this.onGameDone({result:t})},s.prototype.expire=function(){this._unloop(),this.bubbles={},this.state="TIMEOUT"},s.prototype.reset=function(){this._unloop(),this._nextId=0,this._tapped=0,this._timeout=100,this._requestId=null,this.catched=0,this.escaped=0,this.accuracy=0,this.state="IDLE"},s.prototype.onClick=function(t){switch(this.state){case"IDLE":this.start();break;case"RUNNING":this._tapped++;var e=t.target,i=this._viewport.get(0);i.id===e.id&&this._setAccuracy();break;case"TIMEOUT":break;case"GAME_OVER":this.canRetry()&&(this.reset(),this.start());break;case"GAME_DONE":this.canRestart()&&(this.reset(),this.start())}},s.prototype.canRetry=function(){return this._retries<this.maxRetries},s.prototype.canRestart=function(){return this._rounds<this.maxRounds},s.prototype.addBubble=function(t){this.bubbles[t.id]=t},s.prototype.removeBubble=function(t){if(this.bubbles[t.id]){if(t.catched){this.catched++,this._setAccuracy();var e=this.minCatched;this.catched>=e&&this.done()}if(t.escaped){this.escaped++;var i=this.maxEscaped;this.escaped>=i&&this.quit()}delete this.bubbles[t.id]}},s.prototype._loop=function(){var t=this.$injector.get("animation");this._requestId=t.requestAnimationFrame(this._loop),this.$scope.$evalAsync(this._update)},s.prototype._unloop=function(){var t=this.$injector.get("animation");t.cancelAnimationFrame(this._requestId)},s.prototype._update=function(){var t=this.$injector.get("random");this._timeout--,0===this._timeout&&(this._timeout=t.between(0,this.bubbleDelay)+25,this.bubbles[this._nextId++]=null);for(var e in this.bubbles){var i=this.bubbles[e];i&&i.update()}},s.prototype._resize=function(){this.viewport=this._getViewport();var t=this.viewport.height,e=this.viewport.width;this.ratio=e/t;for(var i in this.bubbles){var s=this.bubbles[i];s&&s.resize()}},s.prototype._getResult=function(){return{catched:this.catched,escaped:this.escaped,accuracy:this.accuracy}},s.prototype._setAccuracy=function(){this.accuracy=this.catched/this._tapped},s.prototype._getViewport=function(){var t=this._viewport.width(),e=this._viewport.height(),i=this._viewport.scrollTop(),s=this._viewport.scrollLeft();return{top:i,left:s,width:t,height:e,right:s+t,bottom:i+e}},e.module(t).directive("procrastinationTaskGame",function(){return{scope:{expired:"=?procrastinationTaskGameExpired",maxRounds:"=?procrastinationTaskGameMaxRounds",maxRetries:"=?procrastinationTaskGameMaxRetries",onGameDone:"&procrastinationTaskGameOnGameDone",onGameOver:"&procrastinationTaskGameOnGameOver",minCatched:"=?procrastinationTaskGameMinCatched",maxEscaped:"=?procrastinationTaskGameMaxEscaped",bubbleDelay:"=?procrastinationTaskGameBubbleDelay"},restrict:"A",transclude:!0,bindToController:!0,controller:s,controllerAs:"procrastinationTaskGameController",templateUrl:"views/directives/tasks/procrastination-task-game.html"}});var o=function(t,e,i,s){this.$scope=t,this.$attrs=i,this.$element=e,this.$injector=s,this.domId="bubble-"+t.$id};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.themes=["theme-1","theme-2","theme-3","theme-4","theme-5"],o.prototype["class"]="bubble",o.prototype.style={},o.prototype.theme=null,o.prototype.radius=null,o.prototype.speed=null,o.prototype.wave=null,o.prototype.x=null,o.prototype.y=null,o.prototype.$onInit=function(){var t=this.$injector.get("random"),e=this.gameController;this.theme=t.pick(this.themes),this.radius=t.between(0,15)+20,this.speed=t.between(0,2.5)+2,this.wave=2+this.radius,this.y=e.viewport.height+t.between(0,50)+50,this.x=t.between(this.radius,e.viewport.width)-this.radius,this._originalR=e.ratio,this._originalX=this.x,this.style={top:this.y,left:this.x,width:2*this.radius,height:2*this.radius},this.gameController.addBubble(this)},o.prototype.$onDestroy=function(){this.gameController.removeBubble(this)},o.prototype.update=function(){var t=Math.sin(.002*(new Date).getTime());this.x=this.wave*t+this._originalX,this.y=this.y-this.speed,this.style.left=this.x,this.style.top=this.y;var e=2*-this.radius;this.y>e||(this.escaped=!0,this.gameController.removeBubble(this))},o.prototype.resize=function(){var t=this.$injector.get("$timeout"),e=this,i=function(){var t=e.gameController.ratio,i=t/e._originalR;e._originalX*=i,e._resizeId=null};this._resizeId&&t.cancel(this._resizeId),this._resizeId=t(i,250)},o.prototype.onClick=function(){var t=this.$injector.get("animation"),e=this.$injector.get("$timeout"),i=t.animationEndEvent,s=this,o=function(){s.gameController.removeBubble(s)},r=function(){s.$scope.$evalAsync(o),s.$element.off(i,r)};event?this.$element.on(i,r):e(o,50),this.catched=!0},e.module(t).directive("procrastinationTaskBubble",function(){return{scope:{id:"=procrastinationTaskBubble"},restrict:"A",transclude:!0,require:{gameController:"^procrastinationTaskGame"},bindToController:!0,controller:o,controllerAs:"procrastinationTaskBubbleController",templateUrl:"views/directives/tasks/procrastination-task-bubble.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
