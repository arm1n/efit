/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var o=function(t,e,o,r){var n=r.get("TYPE_FRAMING"),i=r.get("user");this.$injector=r,this.task=i.getTaskByType(n)};o.$inject=["$scope","$element","$attrs","$injector"],o.prototype.task=null,o.prototype.resolved=!1,o.prototype.lotteryA=null,o.prototype.lotteryB=null,o.prototype.$onInit=function(){this.init()},o.prototype.getPayload=function(){return{task:this.task,json:{lotteryA:this.lotteryA,lotteryB:this.lotteryB}}},o.prototype.isLocked=function(){return null===this.task||!this.task.isActive},o.prototype.canResolve=function(){var t=this.$injector.get("user");return!!t.isUser()&&(!this.isLocked()&&(!this.resolved&&(null!==this.lotteryA&&null!==this.lotteryB)))},o.prototype.init=function(){this.lotteryA=null,this.lotteryB=null,this.resolved=!1},o.prototype.reset=function(){this.init()},o.prototype.update=function(t,e){this[t]=e},o.prototype.resolve=function(){var t=this.$injector.get("$q"),e=this.onResolve({payload:this.getPayload()}),o=this,r=function(){o.resolved=!0},n=function(){},i=t.when(e);return i.then(r,n),i},e.module(t).directive("framingTask",function(){return{scope:{onResolve:"&framingTaskOnResolve"},restrict:"A",transclude:!0,controller:o,bindToController:!0,controllerAs:"framingTaskController",templateUrl:"views/directives/tasks/framing-task.html"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
