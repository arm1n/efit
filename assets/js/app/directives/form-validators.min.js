/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  // --------------------------------------------------
  // Asynchronous Validators
  // --------------------------------------------------

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var ValidatorWorkshopExists = function($scope, $element, $attrs, $q, Workshop)
    {
      this.$q = $q;
      this.$scope = $scope;
      this.$attrs = $attrs;
      this.$element = $element;

      this.Workshop = Workshop;

      this.keyLocked = 'validatorWorkshopLocked';
    };

  ValidatorWorkshopExists.$inject = ['$scope', '$element', '$attrs', '$q', 'Workshop'];

  //
  // METHODS
  //

  /**
   * Applies `validatorWorkshopExists` to $asyncValidators.
   *
   * @public
   * @method $onInit
   * @return {Void}
   */
  ValidatorWorkshopExists.prototype.$onInit = function()
    {
      this.ngModel.$asyncValidators.validatorWorkshopExists = this.validate.bind(this);
    };

  /**
   * Queries server to see if the workshop exists. It sets implicitly `validatorWorkshopLocked`
   * to avoid multiple server queries and sets to invalid if `isActive` is not true (= locked).
   *
   * @public
   * @method validate
   * @return {Void}
   */
  ValidatorWorkshopExists.prototype.validate = function(modelValue/*, newValue*/)
    {
      var defer = this.$q.defer();

      var me = this;
      var successCallback = function(workshop)
      {
        if (!workshop.isActive) {
          me.ngModel.$setValidity(me.keyLocked, false);
          defer.reject();
          return;
        }

        me.ngModel.$setValidity(me.keyLocked, true);
        defer.resolve();
      };

      var failureCallback = function()
      {
        defer.reject();
      };

      this.Workshop.validateWorkshopFrontend(
        {
          code: modelValue
        },
        successCallback,
        failureCallback
      );

      return defer.promise;
    };

  //
  // REGISTRY
  //
  angular.module(ANGULAR_MODULE).directive('validatorWorkshopExists',function() {
      return {
        restrict: 'A',
        require: {
          ngModel: 'ngModel'
        },
        bindToController: true,
        controller: ValidatorWorkshopExists
      };
  });

  //
  // CONTROLLER
  //

  /**
   * @constructor
   */
  var ValidatorWorkshopUnique = function($scope, $element, $attrs, $q, Workshop)
    {
      this.$q = $q;
      this.$scope = $scope;
      this.$attrs = $attrs;
      this.$element = $element;

      this.Workshop = Workshop;
    };

  ValidatorWorkshopUnique.$inject = ['$scope', '$element', '$attrs', '$q', 'Workshop'];

  //
  // METHODS
  //

  /**
   * Applies `validatorWorkshopUnique` to $asyncValidators.
   *
   * @public
   * @method $onInit
   * @return {Void}
   */
  ValidatorWorkshopUnique.prototype.$onInit = function()
    {
      this.ngModel.$asyncValidators.validatorWorkshopUnique = this.validate.bind(this);
    };

  /**
   * Queries server to see if the workshop exists.
   *
   * @public
   * @method validate
   * @return {Void}
   */
  ValidatorWorkshopUnique.prototype.validate = function(modelValue/*, newValue*/)
    {
      var defer = this.$q.defer();

      var successCallback = function()
      {
        defer.reject();
      };

      var failureCallback = function()
      {
        defer.resolve();
      };

      this.Workshop.validateWorkshopBackend(
        {
          code: modelValue
        },
        successCallback,
        failureCallback
      );

      return defer.promise;
    };

  //
  // REGISTRY
  //
  angular.module(ANGULAR_MODULE).directive('validatorWorkshopUnique',function() {
      return {
        restrict: 'A',
        require: {
          ngModel: 'ngModel'
        },
        bindToController: true,
        controller: ValidatorWorkshopUnique
      };
  });

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kaXJlY3RpdmVzL2Zvcm0tdmFsaWRhdG9ycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvZGlyZWN0aXZlcy9mb3JtLXZhbGlkYXRvcnMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIEFOR1VMQVJfTU9EVUxFLCBhbmd1bGFyICovXG4oZnVuY3Rpb24obW9kdWxlLCBhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBBc3luY2hyb25vdXMgVmFsaWRhdG9yc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vXG4gIC8vIENPTlRST0xMRVJcbiAgLy9cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgVmFsaWRhdG9yV29ya3Nob3BFeGlzdHMgPSBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRxLCBXb3Jrc2hvcClcbiAgICB7XG4gICAgICB0aGlzLiRxID0gJHE7XG4gICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gICAgICB0aGlzLldvcmtzaG9wID0gV29ya3Nob3A7XG5cbiAgICAgIHRoaXMua2V5TG9ja2VkID0gJ3ZhbGlkYXRvcldvcmtzaG9wTG9ja2VkJztcbiAgICB9O1xuXG4gIFZhbGlkYXRvcldvcmtzaG9wRXhpc3RzLiRpbmplY3QgPSBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHEnLCAnV29ya3Nob3AnXTtcblxuICAvL1xuICAvLyBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYHZhbGlkYXRvcldvcmtzaG9wRXhpc3RzYCB0byAkYXN5bmNWYWxpZGF0b3JzLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgJG9uSW5pdFxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgVmFsaWRhdG9yV29ya3Nob3BFeGlzdHMucHJvdG90eXBlLiRvbkluaXQgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgdGhpcy5uZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnMudmFsaWRhdG9yV29ya3Nob3BFeGlzdHMgPSB0aGlzLnZhbGlkYXRlLmJpbmQodGhpcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogUXVlcmllcyBzZXJ2ZXIgdG8gc2VlIGlmIHRoZSB3b3Jrc2hvcCBleGlzdHMuIEl0IHNldHMgaW1wbGljaXRseSBgdmFsaWRhdG9yV29ya3Nob3BMb2NrZWRgXG4gICAqIHRvIGF2b2lkIG11bHRpcGxlIHNlcnZlciBxdWVyaWVzIGFuZCBzZXRzIHRvIGludmFsaWQgaWYgYGlzQWN0aXZlYCBpcyBub3QgdHJ1ZSAoPSBsb2NrZWQpLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgdmFsaWRhdGVcbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIFZhbGlkYXRvcldvcmtzaG9wRXhpc3RzLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUvKiwgbmV3VmFsdWUqLylcbiAgICB7XG4gICAgICB2YXIgZGVmZXIgPSB0aGlzLiRxLmRlZmVyKCk7XG5cbiAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24od29ya3Nob3ApXG4gICAgICB7XG4gICAgICAgIGlmICghd29ya3Nob3AuaXNBY3RpdmUpIHtcbiAgICAgICAgICBtZS5uZ01vZGVsLiRzZXRWYWxpZGl0eShtZS5rZXlMb2NrZWQsIGZhbHNlKTtcbiAgICAgICAgICBkZWZlci5yZWplY3QoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBtZS5uZ01vZGVsLiRzZXRWYWxpZGl0eShtZS5rZXlMb2NrZWQsIHRydWUpO1xuICAgICAgICBkZWZlci5yZXNvbHZlKCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBkZWZlci5yZWplY3QoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuV29ya3Nob3AudmFsaWRhdGVXb3Jrc2hvcEZyb250ZW5kKFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogbW9kZWxWYWx1ZVxuICAgICAgICB9LFxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgIGZhaWx1cmVDYWxsYmFja1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfTtcblxuICAvL1xuICAvLyBSRUdJU1RSWVxuICAvL1xuICBhbmd1bGFyLm1vZHVsZShBTkdVTEFSX01PRFVMRSkuZGlyZWN0aXZlKCd2YWxpZGF0b3JXb3Jrc2hvcEV4aXN0cycsZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiB7XG4gICAgICAgICAgbmdNb2RlbDogJ25nTW9kZWwnXG4gICAgICAgIH0sXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgIGNvbnRyb2xsZXI6IFZhbGlkYXRvcldvcmtzaG9wRXhpc3RzXG4gICAgICB9O1xuICB9KTtcblxuICAvL1xuICAvLyBDT05UUk9MTEVSXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIFZhbGlkYXRvcldvcmtzaG9wVW5pcXVlID0gZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkcSwgV29ya3Nob3ApXG4gICAge1xuICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcblxuICAgICAgdGhpcy5Xb3Jrc2hvcCA9IFdvcmtzaG9wO1xuICAgIH07XG5cbiAgVmFsaWRhdG9yV29ya3Nob3BVbmlxdWUuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckcScsICdXb3Jrc2hvcCddO1xuXG4gIC8vXG4gIC8vIE1FVEhPRFNcbiAgLy9cblxuICAvKipcbiAgICogQXBwbGllcyBgdmFsaWRhdG9yV29ya3Nob3BVbmlxdWVgIHRvICRhc3luY1ZhbGlkYXRvcnMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCAkb25Jbml0XG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBWYWxpZGF0b3JXb3Jrc2hvcFVuaXF1ZS5wcm90b3R5cGUuJG9uSW5pdCA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICB0aGlzLm5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy52YWxpZGF0b3JXb3Jrc2hvcFVuaXF1ZSA9IHRoaXMudmFsaWRhdGUuYmluZCh0aGlzKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBRdWVyaWVzIHNlcnZlciB0byBzZWUgaWYgdGhlIHdvcmtzaG9wIGV4aXN0cy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHZhbGlkYXRlXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBWYWxpZGF0b3JXb3Jrc2hvcFVuaXF1ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihtb2RlbFZhbHVlLyosIG5ld1ZhbHVlKi8pXG4gICAge1xuICAgICAgdmFyIGRlZmVyID0gdGhpcy4kcS5kZWZlcigpO1xuXG4gICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBkZWZlci5yZWplY3QoKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmYWlsdXJlQ2FsbGJhY2sgPSBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGRlZmVyLnJlc29sdmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuV29ya3Nob3AudmFsaWRhdGVXb3Jrc2hvcEJhY2tlbmQoXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBtb2RlbFZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKEFOR1VMQVJfTU9EVUxFKS5kaXJlY3RpdmUoJ3ZhbGlkYXRvcldvcmtzaG9wVW5pcXVlJyxmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHJlcXVpcmU6IHtcbiAgICAgICAgICBuZ01vZGVsOiAnbmdNb2RlbCdcbiAgICAgICAgfSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgY29udHJvbGxlcjogVmFsaWRhdG9yV29ya3Nob3BVbmlxdWVcbiAgICAgIH07XG4gIH0pO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
