/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var a=function(t,e,a,n){this.$element=e,this.$scope=t,this.$attrs=a,this.$injector=n,this._body=null,this._clone=null,this._coordinates={},this._interactable=null,this._activeClass="active",this._itemClass="draggable",this._disabledClass="disabled";var i=this;this._unwatch=t.$watch(function(){return i.disabled},function(t){t?i.$element.addClass(i._disabledClass):i.$element.removeClass(i._disabledClass),i._interactable.draggable({enabled:!t})}),this._onResize=this._onResize.bind(this)};a.$inject=["$scope","$element","$attrs","$injector"],a.prototype.data=null,a.prototype.clone=!1,a.prototype.disabled=!1,a.prototype.restriction="parent",a.prototype.$onInit=function(){var t=this.$injector.get("$window");this._body=e.element(document.body),this.$element.addClass(this._itemClass);var a=this.$element.get(0);this._interactable=interact(a);var n=this,i={inertia:!0,autoScroll:!0,enabled:!this.disabled,onend:this._onEndItem.bind(this),onmove:this._onMoveItem.bind(this),onstart:this._onStartItem.bind(this),snap:{targets:[function(t,e,a){if(n._origin||(n._origin={x:a.startCoords.page.x,y:a.startCoords.page.y}),!a.dropTarget)return{x:n._origin.x,y:n._origin.y}}],endOnly:!0}};this.clone&&(e.extend(i,{manualStart:!0}),this._interactable.on("move",this._onMove.bind(this))),this._interactable.draggable(i),this._interactable.getData=this._getData.bind(this),this._window=e.element(t),this._window.on("resize",this._resize)},a.prototype.$onDestroy=function(){this._window.off("resize",this._onResize),this._interactable.unset(),this._unwatch()},a.prototype._onResize=function(){this._origin=null},a.prototype._onStartItem=function(t){var a=this.clone?this._clone:e.element(t.target);a.addClass(this._activeClass),this._trigger("onDragStart",{$event:t,$data:this.data})},a.prototype._onMoveItem=function(t){var a=this.clone?this._clone:e.element(t.target),n=(this._coordinates.x||0)+t.dx,i=(this._coordinates.y||0)+t.dy;this._translate(a,n,i),this._trigger("onDragMove",{$event:t,$data:this.data})},a.prototype._onEndItem=function(t){var a=!!t.interaction.dropTarget;if(this.clone)this._coordinates={},this._clone.remove(),this._clone=null;else{var n=e.element(t.target);n.removeClass(this._activeClass),a||this._translate(n,0,0)}this._trigger("onDragEnd",{$event:t,$data:this.data}),a&&this._trigger("onDrop",{$event:t,$data:this.data})},a.prototype._onMove=function(t){var a=t.interactable,n=t.interaction,i=t.currentTarget;if(!this.disabled){if(n.pointerIsDown&&!n.interacting()){this._clone=e.element(i).clone();var s=i.clientHeight/2,o=i.clientWidth/2,r=t.touches?t.touches[0].pageY:t.pageY,l=t.touches?t.touches[0].pageX:t.pageX;this._clone.css({left:l-o+"px",top:r-s+"px",position:"absolute"}),this._body.append(this._clone),i=this._clone.get(0)}n.start({name:"drag"},a,i)}},a.prototype._getData=function(){return this.data},a.prototype._translate=function(t,e,a){var n="translate("+e+"px,"+a+"px)";t.css({webkitTransform:n,mozTransform:n,msTransform:n,oTransform:n,transform:n}),this._coordinates.x=e,this._coordinates.y=a},a.prototype._trigger=function(t,e){this.$scope.$evalAsync(this[t].bind(this,e))},e.module(t).directive("draggable",function(){return{scope:{data:"=?draggableData",clone:"=?draggableClone",disabled:"=?draggableDisabled",onDragStart:"&draggableOnDragStart",onDragMove:"&draggableOnDragMove",onDragEnd:"&draggableOnDragEnd",onDrop:"&draggableOnDrop"},restrict:"A",controller:a,bindToController:!0,controllerAs:"draggableController"}});var n=function(t,e,a){this.$element=e,this.$scope=t,this.$attrs=a,this._interactable=null,this._enterClass="enter",this._activeClass="active",this._itemClass="dropable",this._acceptClass="draggable",this._disabledClass="disabled";var n=this;this._unwatch=t.$watch(function(){return n.disabled},function(t){t?n.$element.addClass(n._disabledClass):n.$element.removeClass(n._disabledClass)})};n.$inject=["$scope","$element","$attrs"],n.prototype.disabled=!1,n.prototype.$onInit=function(){this._body=e.element(document.body),this.$element.addClass(this._itemClass);var t="."+this._acceptClass,a=this.$element.get(0);this._interactable=interact(a).dropzone({accept:t,enabled:!this.disabled,ondrop:this._onDrop.bind(this),ondragenter:this._onDragEnter.bind(this),ondragleave:this._onDragLeave.bind(this),ondropactivate:this._onDropActivate.bind(this),ondropdeactivate:this._onDropDeactivate.bind(this)})},n.prototype.$onDestroy=function(){this._interactable.unset(),this._unwatch()},n.prototype._onDropDeactivate=function(t){this.$element.removeClass(this._activeClass);var e=t.draggable.getData();this._trigger("onDropDeactivate",{$event:t,$data:e})},n.prototype._onDropActivate=function(t){this.$element.addClass(this._activeClass);var e=t.draggable.getData();this._trigger("onDropActivate",{$event:t,$data:e})},n.prototype._onDragEnter=function(t){this.$element.addClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDragEnter",{$event:t,$data:e})},n.prototype._onDragLeave=function(t){this.$element.removeClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDragLeave",{$event:t,$data:e})},n.prototype._onDrop=function(t){this.$element.removeClass(this._enterClass);var e=t.draggable.getData();this._trigger("onDrop",{$event:t,$data:e})},n.prototype._trigger=function(t,e){this.$scope.$evalAsync(this[t].bind(this,e))},e.module(t).directive("dropable",function(){return{scope:{disabled:"=?dropableDisabled",onDropDeactivate:"&dropableOnDropDeactivate",onDropActivate:"&dropableOnDropActivate",onDragEnter:"&dropableOnDragEnter",onDragLeave:"&dropableOnDragLeave",onDrop:"&dropableOnDrop"},restrict:"A",controller:n,bindToController:!0,controllerAs:"droppableController"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
