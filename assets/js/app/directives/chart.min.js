/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var s=function(t,e,s,c){this.$scope=t,this.$attrs=e,this.$element=s,this.$injector=c,this._chart=null};s.$inject=["$scope","$attrs","$element","$injector"],s.prototype.data=[],s.prototype.$onInit=function(){var t=this._getOptions(),e={labels:this._getLabels(),series:this._getData()};this._render(e,t)},s.prototype.$onDestroy=function(){null!==this._chart&&(this._chart.detach(),this._chart=null)},s.prototype._getData=function(){var t,s=this.$injector.get("GROUP_A"),c=this.$injector.get("GROUP_B"),i=this,o={},n=[];switch(i.task.type){case i.$injector.get("TYPE_ANCHORING"):case i.$injector.get("TYPE_MENTAL_BOOKKEEPING"):o[s]={choice1:0,choice2:0,count:0},o[c]={choice1:0,choice2:0,count:0},t=function(t){var e=t.json.group;switch(t.json.choice){case 1:o[e].choice1++;break;case 2:o[e].choice2++}o[e].count++},e.forEach(this.results,t);var r=o[s],a=o[c];n.push([r.choice1/r.count,a.choice1/a.count]),n.push([r.choice2/r.count,a.choice2/a.count]);break;case i.$injector.get("TYPE_PROCRASTINATION"):var h="SPLIT",u="ALL";o[h]={success:0,failure:0,count:0},o[u]={success:0,failure:0,count:0},t=function(t){var e=t.json.mode;console.log(t.json.mode,t.json.success),t.json.success?o[e].success++:o[e].failure++,o[e].count++},e.forEach(this.results,t);var l=o[h],g=o[u];console.log(o),n.push([l.success/l.count,g.success/g.count]),n.push([l.failure/l.count,g.failure/g.count])}return n},s.prototype._getLabels=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):case this.$injector.get("TYPE_MENTAL_BOOKKEEPING"):return[t.get("GROUP_A"),t.get("GROUP_B")];case this.$injector.get("TYPE_PROCRASTINATION"):return[t.get("ALL"),t.get("SPLIT")];default:return[]}},s.prototype._getOptions=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):case this.$injector.get("TYPE_MENTAL_BOOKKEEPING"):return{seriesBarDistance:15,chartPadding:{top:50,left:0,right:0,bottom:0},axisY:{labelInterpolationFnc:function(t){return 100*t+"%"},ticks:[0,.2,.4,.6,.8,1],type:Chartist.FixedScaleAxis,high:1,low:0},plugins:[Chartist.plugins.legend({legendNames:[t.get("Choice 1"),t.get("Choice 2")]})]};case this.$injector.get("TYPE_PROCRASTINATION"):return{seriesBarDistance:15,chartPadding:{top:50,left:0,right:0,bottom:0},axisY:{labelInterpolationFnc:function(t){return 100*t+"%"},ticks:[0,.2,.4,.6,.8,1],type:Chartist.FixedScaleAxis,high:1,low:0},plugins:[Chartist.plugins.legend({legendNames:[t.get("Target reached"),t.get("Target dismissed")]})]};default:return{}}},s.prototype._render=function(t,e){var s=this.$injector.get("$timeout");this.$element.addClass("ct-chart");var c=this.$element.get(0),i=this,o=function(){switch(i.task.type){case i.$injector.get("TYPE_ANCHORING"):case i.$injector.get("TYPE_MENTAL_BOOKKEEPING"):case i.$injector.get("TYPE_PROCRASTINATION"):i._chart=new Chartist.Bar(c,t,e)}};s(o,100)},e.module(t).directive("chart",function(){return{scope:{task:"=?chartTask",results:"=?chartResults"},restrict:"A",controller:s,bindToController:!0,controllerAs:"chartController"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
