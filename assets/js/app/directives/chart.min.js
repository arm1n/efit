/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var i=function(t,e,i,c){this.$scope=t,this.$attrs=e,this.$element=i,this.$injector=c,this._chart=null};i.$inject=["$scope","$attrs","$element","$injector"],i.prototype.data=[],i.prototype.$onInit=function(){var t=this._getOptions(),e={labels:this._getLabels(),series:this._getData()};this._render(e,t)},i.prototype.$onDestroy=function(){null!==this._chart&&(this._chart.detach(),this._chart=null)},i.prototype._getData=function(){var t=this.$injector.get("GROUP_A"),i=this.$injector.get("GROUP_B"),c=this,r=[];switch(c.task.type){case c.$injector.get("TYPE_ANCHORING"):var o={};o[t]={choice1:0,choice2:0,count:0},o[i]={choice1:0,choice2:0,count:0};var n=function(t){var e=t.json.group;switch(t.json.choice){case 1:o[e].choice1++;break;case 2:o[e].choice2++}o[e].count++};e.forEach(this.results,n);var s=o[t],a=o[i];r.push([s.choice1/s.count,a.choice1/a.count]),r.push([s.choice2/s.count,a.choice2/a.count])}return r},i.prototype._getLabels=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):return[t.get("GROUP_A"),t.get("GROUP_B")];default:return[]}},i.prototype._getOptions=function(){var t=this.$injector.get("i18n");switch(this.task.type){case this.$injector.get("TYPE_ANCHORING"):return{seriesBarDistance:15,chartPadding:{top:50,left:0,right:0,bottom:0},axisY:{labelInterpolationFnc:function(t){return 100*t+"%"},ticks:[0,.2,.4,.6,.8,1],type:Chartist.FixedScaleAxis,high:1,low:0},plugins:[Chartist.plugins.legend({legendNames:[t.get("Choice 1"),t.get("Choice 2")]})]};default:return{}}},i.prototype._render=function(t,e){var i=this.$injector.get("$timeout");this.$element.addClass("ct-chart");var c=this.$element.get(0),r=this,o=function(){switch(r.task.type){case r.$injector.get("TYPE_ANCHORING"):r._chart=new Chartist.Bar(c,t,e)}};i(o,100)},e.module(t).directive("chart",function(){return{scope:{task:"=?chartTask",results:"=?chartResults"},restrict:"A",controller:i,bindToController:!0,controllerAs:"chartController"}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
