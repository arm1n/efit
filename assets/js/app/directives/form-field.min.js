/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(e,s){"use strict";var t=function(e,s,t,l,o){this.$scope=e,this.$attrs=t,this.$element=s,this.$timeout=o,this.$transclude=l,this._transcludeElements=[],this._transcludeScopes=[],this._cloneDefault=null,this._cloneLabel=null,this._unlisten=[],this._unwatch=[]};t.$inject=["$scope","$element","$attrs","$transclude","$timeout"],t.prototype.id="",t.prototype.label="",t.prototype.ngModel=null,t.prototype.resetEmpty=!0,t.prototype.showMessages=!1,t.prototype.labelClass="uk-form-label",t.prototype.failureClass="uk-form-danger",t.prototype.successClass="uk-form-success",t.prototype.$onInit=function(){this.id="form-field-"+this.$scope.$id,this._addWatches(),this._transclude()},t.prototype.$onDestroy=function(){s.forEach(this._transcludeElements,function(e){e.remove()}),s.forEach(this._transcludeScopes,function(e){e.$destroy()}),s.forEach(this._unlisten,function(e){e()}),s.forEach(this._unwatch,function(e){e()})},t.prototype.setModel=function(e){this.ngModel=e},t.prototype._update=function(){this.ngModel.$valid?(this._cloneDefault.removeClass(this.failureClass),this._cloneDefault.addClass(this.successClass)):(this._cloneDefault.removeClass(this.successClass),this._cloneDefault.addClass(this.failureClass)),this.showMessages=this.ngModel.$invalid},t.prototype._reset=function(){this._cloneDefault.removeClass(this.failureClass),this._cloneDefault.removeClass(this.successClass),this.ngModel.$setUntouched(),this.showMessages=!1},t.prototype._addWatches=function(){var e=this,s=this.$scope.$watchCollection("formFieldController.ngModel",function(s,t){if(s!==t&&s.$touched&&!s.$pending)return!s.$viewValue&&e.resetEmpty?void e._reset():void e._update()});this._unwatch.push(s)},t.prototype._transclude=function(){var e=this,t=function(t,l){var o="#default-"+e.id,i=s.element(o);t.attr("id",e.id),i.replaceWith(t),e._cloneDefault=t,e._transcludeScopes.push(l),e._transcludeElements.push(t)},l=function(t,l){var o="#label-"+e.id,i=s.element(o);t.attr("for",e.id),t.addClass(e.labelClass),i.replaceWith(t),e._cloneLabel=t,e._transcludeScopes.push(l),e._transcludeElements.push(t)},o=function(){e.$transclude(t,null,null),e.$transclude(l,null,"label")};this.$timeout(o)},s.module(ANGULAR_MODULE).directive("formField",function(){return{scope:{name:"=formField",resetEmpty:"=?formFieldResetEmpty",labelClass:"=?formFieldLabelClass",failureClass:"=?formFieldFailureClass",successClass:"=?formFieldSuccessClass"},transclude:{label:"?label",messageMin:"?messageMin",messageMax:"?messageMax",messageUrl:"?messageUrl",messageEmail:"?messageEmail",messageNumber:"?messageNumber",messagePattern:"?messagePattern",messageRequired:"?messageRequired",messageMinlength:"?messageMinlength",messageMaxlength:"?messageMaxlength",messagesCustom:"?messagesCustom"},restrict:"A",controller:t,bindToController:!0,controllerAs:"formFieldController",templateUrl:"views/directives/form-field.html"}});var l=function(e,s,t,l){this.$log=l,this.$scope=e,this.$attrs=s,this.$element=t};l.$inject=["$scope","$attrs","$element","$log"],l.prototype.$onInit=function(){return this.formField?void this.formField.setModel(this.ngModel):void this.$log.warn("formFieldModel: No form field controller found!")},s.module(e).directive("formFieldModel",function(){return{restrict:"A",require:{ngModel:"ngModel",formField:"^?formField"},bindToController:!0,controller:l}})}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
