/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var n=function(t){this.$injector=t};n.$inject=["$injector"],n.prototype.signup=function(t,n,r){var o=this.$injector.get("$http");n=n||"frontend",r=r||{};var i=this,s=function(t){i._saveToken(t.data)},u=function(){},a=this._getSignupUrl(n),h=o.post(a,{_username:t.username,_password:t.password},e.extend(r||{}));return h.then(s,u),h},n.prototype.signin=function(t,n,r){var o=this.$injector.get("$http");n=n||"frontend",r=r||{};var i=this,s=function(t){i._saveToken(t.data)},u=function(){},a=this._getSigninUrl(n),h=o.post(a,{_username:t.username,_password:t.password},e.extend(r||{},{skipAuthorization:!0}));return h.then(s,u),h},n.prototype.signout=function(t){var e=this.$injector.get("$http"),n=this.$injector.get("user"),r=this.$injector.get("jwt"),o=function(){r.removeRefreshToken(),r.removeToken(),n.unload()},i=function(){};return e.get(this._getSignoutUrl(),t||{}).then(o,i)},n.prototype.refresh=function(t){var n=this.$injector.get("$http"),r=this.$injector.get("jwt"),o=this,i=function(t){return o._saveToken(t.data),t},s=function(t){return t},u=n.post(this._getRefereshUrl(),{refresh_token:r.getRefreshToken()},e.extend(t||{},{skipAuthorization:!0}));return u.then(i,s)},n.prototype.getUser=function(t){t=t||!1;var e=this.$injector.get("jwt"),n=e.getToken();return n?!t&&e.isExpired()?null:e.decode(n):null},n.prototype.hasRole=function(t){var n=this.$injector.get("jwt"),r=this.$injector.get("$q"),o=r.defer(),i=o.promise,s=e.isArray(t);if(s&&0===t.length)return o.reject(null),i;if(!t)return o.reject(null),i;var u=this.getUser(!0);if(null===u)return o.reject(null),i;var a=function(n){var r=n.roles||[];e.isString(t)&&(t=[t]);for(var i=!1,s=0;s<t.length;s++)if(r.indexOf(t[s])>=0){i=!0;break}return i?void o.resolve():void o.reject()};if(!n.isExpired())return a(u),i;var h=this,c=function(){u=h.getUser(),a(u)},f=function(){o.reject()};return this.refresh().then(c,f),i},n.prototype._saveToken=function(t){var e=this.$injector.get("jwt");e.setRefreshToken(t.refresh_token),e.setToken(t.token)},n.prototype._getSigninUrl=function(t){var e=this.$injector.get("API_URL");switch(t){case"backend":case"frontend":return e+"/auth/"+t+"/signin";default:throw new Error("Unknown firewall name: "+t)}},n.prototype._getSignupUrl=function(t){var e=this.$injector.get("API_URL");switch(t){case"frontend":return e+"/auth/"+t+"/signup";case"backend":throw new Error("Not implemented yet!");default:throw new Error("Unknown firewall name: "+t)}},n.prototype._getRefereshUrl=function(){var t=this.$injector.get("API_URL");return t+"/auth/refresh"},n.prototype._getSignoutUrl=function(){var t=this.$injector.get("API_URL");return t+"/signout"},e.module(t).service("auth",n)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
