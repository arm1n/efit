/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {

  'use strict';

  //
  // SERVICE
  //

  /**
   * @constructor
   */
  var String = function()
    {
    };

  String.$inject = [];

  /**
   * Replaces placeholders (= '%s') from a string with variables.
   *
   * @public
   * @method sprintf
   * @param {string} input String to replace placeholders.
   * @param {object} variables Object holding replacements.
   * @return {string}
   */
  String.prototype.sprintf = function(input,variables)
    {
        if (!angular.isArray(variables)) {
          variables = [];
        }

        for (var i=0; i<variables.length; i++) {
          input = input.replace(/%s/,variables[i]);
        }

        return input;
    };

  /**
   * Truncates a string by given params.
   *
   * @public
   * @method truncate
   * @param {string} input String to be truncated.
   * @param {number} [maxLength=20] Maximum number of chars.
   * @return {string}
   */
  String.prototype.truncate = function(input,maxLength)
    {
        maxLength = maxLength || 20;
        if (input.length <= maxLength) {
          return input;
        }

        return input.substring(0,maxLength) + '...';
    };

  /**
   * Trims a string.
   *
   * @public
   * @method trim
   * @param {string} input String to trim.
   * @return {string}
   */
  String.prototype.trim = function(input)
    {
        return input.replace(/^\s+|\s+$/g, '');
    };

  /**
   * Transforms a string to camel case.
   *
   * @public
   * @method toCamel
   * @param {string} input String to convert.
   * @return {string}
   */
  String.prototype.toCamel = function(input)
    {
        return input.replace(/([-_][a-z])/g, function(part){
            return part.toUpperCase().replace(/[-_]/,'');
        });
    };

  /**
   * Transforms a string to spinal case.
   *
   * @public
   * @method toSpinal
   * @param {string} input String to convert.
   * @return {string}
   */
  String.prototype.toSpinal = function(input)
    {
        return input.replace(/([A-Z]|_[a-z])/g, function(part){
            return '-' + part.toLowerCase().replace(/_/,'');
        });
    };

  /**
   * Transforms a string to snake case.
   *
   * @public
   * @method toSnake
   * @param {string} input String to convert.
   * @return {string}
   */
  String.prototype.toSnake = function(input)
    {
        return input.replace(/([A-Z]|-[a-z])/g, function(part){
            return '_' + part.toLowerCase().replace(/-/,'');
        });
    };

  //
  // REGISTRY
  //
  angular.module(module).service('string', String);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9zdHJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvc2VydmljZXMvc3RyaW5nLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvL1xuICAvLyBTRVJWSUNFXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIFN0cmluZyA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgfTtcblxuICBTdHJpbmcuJGluamVjdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBwbGFjZWhvbGRlcnMgKD0gJyVzJykgZnJvbSBhIHN0cmluZyB3aXRoIHZhcmlhYmxlcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHNwcmludGZcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFN0cmluZyB0byByZXBsYWNlIHBsYWNlaG9sZGVycy5cbiAgICogQHBhcmFtIHtvYmplY3R9IHZhcmlhYmxlcyBPYmplY3QgaG9sZGluZyByZXBsYWNlbWVudHMuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIFN0cmluZy5wcm90b3R5cGUuc3ByaW50ZiA9IGZ1bmN0aW9uKGlucHV0LHZhcmlhYmxlcylcbiAgICB7XG4gICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KHZhcmlhYmxlcykpIHtcbiAgICAgICAgICB2YXJpYWJsZXMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTx2YXJpYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyVzLyx2YXJpYWJsZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFRydW5jYXRlcyBhIHN0cmluZyBieSBnaXZlbiBwYXJhbXMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB0cnVuY2F0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgU3RyaW5nIHRvIGJlIHRydW5jYXRlZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFttYXhMZW5ndGg9MjBdIE1heGltdW0gbnVtYmVyIG9mIGNoYXJzLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBTdHJpbmcucHJvdG90eXBlLnRydW5jYXRlID0gZnVuY3Rpb24oaW5wdXQsbWF4TGVuZ3RoKVxuICAgIHtcbiAgICAgICAgbWF4TGVuZ3RoID0gbWF4TGVuZ3RoIHx8IDIwO1xuICAgICAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IG1heExlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcoMCxtYXhMZW5ndGgpICsgJy4uLic7XG4gICAgfTtcblxuICAvKipcbiAgICogVHJpbXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCB0cmltXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBTdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oaW5wdXQpXG4gICAge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYSBzdHJpbmcgdG8gY2FtZWwgY2FzZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHRvQ2FtZWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBTdHJpbmcucHJvdG90eXBlLnRvQ2FtZWwgPSBmdW5jdGlvbihpbnB1dClcbiAgICB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oWy1fXVthLXpdKS9nLCBmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sJycpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgc3RyaW5nIHRvIHNwaW5hbCBjYXNlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgdG9TcGluYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBTdHJpbmcucHJvdG90eXBlLnRvU3BpbmFsID0gZnVuY3Rpb24oaW5wdXQpXG4gICAge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtBLVpdfF9bYS16XSkvZywgZnVuY3Rpb24ocGFydCl7XG4gICAgICAgICAgICByZXR1cm4gJy0nICsgcGFydC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18vLCcnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIHN0cmluZyB0byBzbmFrZSBjYXNlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBtZXRob2QgdG9TbmFrZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgU3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIFN0cmluZy5wcm90b3R5cGUudG9TbmFrZSA9IGZ1bmN0aW9uKGlucHV0KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbQS1aXXwtW2Etel0pL2csIGZ1bmN0aW9uKHBhcnQpe1xuICAgICAgICAgICAgcmV0dXJuICdfJyArIHBhcnQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tLywnJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgLy9cbiAgLy8gUkVHSVNUUllcbiAgLy9cbiAgYW5ndWxhci5tb2R1bGUobW9kdWxlKS5zZXJ2aWNlKCdzdHJpbmcnLCBTdHJpbmcpO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
