/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {

  'use strict';

  //
  // SERVICE
  //

  /**
   * @constructor
   */
  var I18N = function($injector)
    {
      this.translations = {};
      this.$injector = $injector;

      this.setLocale(this._detectLocale());
    };

  I18N.$inject = ['$injector'];

  //
  // PROPERTIES
  //

  /** @var {object} locales Currently supported locales. */
  I18N.prototype.locales = {
    'de': true
  };

  /** @var {string} defaultLocale Default locale to use. */
  I18N.prototype.defaultLocale = 'de';

  /**
   * Loads translations according to current locale if not available.
   *
   * @public
   * @method load
   * @param {locale} [locale] Two letter language code.
   * @param {Object} [config] Additional config for $http
   * @return {Promise|void}
   */
  I18N.prototype.load = function(locale, config)
    {
      locale = locale || this.getLocale();
      config = config || {};

      if (this.translations[locale]) {
        return;
      }

      var $http = this.$injector.get('$http');
      var $log = this.$injector.get('$log');

      var me = this;
      var url = this._getJSONUrl(locale);
      var successCallback = function(response)
        {
          me.translations[locale] = response.data;
        };

      var failureCallback = function()
        {
          $log.error('Could not load translations!');
        };

      return $http.get(url, config).then(
        successCallback,
        failureCallback
      );
    };

  /**
   * Sets locale to given paraemter if it's a valid one.
   * Falls back to `defaultLocale` if it's an invalid one.
   *
   * @public
   * @method setLocale
   * @param {string} locale
   * @return {void}
   */
  I18N.prototype.setLocale = function(locale)
    {
      if (this.locales[locale]) {
        this.locale = locale;
        return;
      }

      this.locale = this.defaultLocale;
    };

  /**
   * Delivers the currently used locale for translations.
   *
   * @public
   * @method setLocale
   * @param {string} locale
   * @return {void}
   */
  I18N.prototype.getLocale = function()
    {
      return this.locale;
    };

  /**
   * Makes a lookup within current translation dictionary.
   *
   * @param {string} key The i18n key.
   * @param {string} ... Parameters to be replaced.
   * @return {string}
   */
  I18N.prototype.get = function(key)
    {
      var string = this.$injector.get('string');
      var params = [].slice.call(arguments,1);
      var locale = this.getLocale();

      var text;
      try {
        text = this.translations[locale][key];
      } catch(e) {}

      return string.sprintf(text || key,params);
    };

  /**
   * Returns endpoint to gather JSON translations.
   *
   * @private
   * @method _getTranslationsUrl
   * @param {string} locale
   * @return {string}
   */
  I18N.prototype._getJSONUrl = function(locale)
    {
      return '/assets/json/' + locale + '.json';
    };

  /**
   * @ignore
   */
  I18N.prototype._detectLocale = function()
    {
      var navigator = this.$injector.get('$window').navigator;
      var android = /android.*\W(\w\w)-(\w\w)\W/i;
      var language;

      // try to find locale on android devices!
      if( navigator && navigator.userAgent &&
          (language = navigator.userAgent.match(android)) ) {
          language = language[1];
      }

      // for all other browsers
      if (!language && navigator) {
        if( navigator.language ) {
          language = navigator.language;
        } else if( navigator.userLanguage ) {
          language = navigator.userLanguage;
        } else if( navigator.systemLanguage ) {
          language = navigator.systemLanguage;
        } else if( navigator.browserLanguage ) {
          language = navigator.browserLanguage;
        }
      }

      // now we can get iso code
      if (language) {
        return language.substr(0,2);
      }

      // use `defaultLocale` as fallback
      return this.defaultLocale;
    };

  //
  // REGISTRY
  //
  angular.module(module).service('i18n', I18N);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9pMThuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC9zZXJ2aWNlcy9pMThuLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvL1xuICAvLyBTRVJWSUNFXG4gIC8vXG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdmFyIEkxOE4gPSBmdW5jdGlvbigkaW5qZWN0b3IpXG4gICAge1xuICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMuJGluamVjdG9yID0gJGluamVjdG9yO1xuXG4gICAgICB0aGlzLnNldExvY2FsZSh0aGlzLl9kZXRlY3RMb2NhbGUoKSk7XG4gICAgfTtcblxuICBJMThOLiRpbmplY3QgPSBbJyRpbmplY3RvciddO1xuXG4gIC8vXG4gIC8vIFBST1BFUlRJRVNcbiAgLy9cblxuICAvKiogQHZhciB7b2JqZWN0fSBsb2NhbGVzIEN1cnJlbnRseSBzdXBwb3J0ZWQgbG9jYWxlcy4gKi9cbiAgSTE4Ti5wcm90b3R5cGUubG9jYWxlcyA9IHtcbiAgICAnZGUnOiB0cnVlXG4gIH07XG5cbiAgLyoqIEB2YXIge3N0cmluZ30gZGVmYXVsdExvY2FsZSBEZWZhdWx0IGxvY2FsZSB0byB1c2UuICovXG4gIEkxOE4ucHJvdG90eXBlLmRlZmF1bHRMb2NhbGUgPSAnZGUnO1xuXG4gIC8qKlxuICAgKiBMb2FkcyB0cmFuc2xhdGlvbnMgYWNjb3JkaW5nIHRvIGN1cnJlbnQgbG9jYWxlIGlmIG5vdCBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBsb2FkXG4gICAqIEBwYXJhbSB7bG9jYWxlfSBbbG9jYWxlXSBUd28gbGV0dGVyIGxhbmd1YWdlIGNvZGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBBZGRpdGlvbmFsIGNvbmZpZyBmb3IgJGh0dHBcbiAgICogQHJldHVybiB7UHJvbWlzZXx2b2lkfVxuICAgKi9cbiAgSTE4Ti5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKGxvY2FsZSwgY29uZmlnKVxuICAgIHtcbiAgICAgIGxvY2FsZSA9IGxvY2FsZSB8fCB0aGlzLmdldExvY2FsZSgpO1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8wqB7fTtcblxuICAgICAgaWYgKHRoaXMudHJhbnNsYXRpb25zW2xvY2FsZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJGh0dHAgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRodHRwJyk7XG4gICAgICB2YXIgJGxvZyA9IHRoaXMuJGluamVjdG9yLmdldCgnJGxvZycpO1xuXG4gICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgdmFyIHVybCA9IHRoaXMuX2dldEpTT05VcmwobG9jYWxlKTtcbiAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXNwb25zZSlcbiAgICAgICAge1xuICAgICAgICAgIG1lLnRyYW5zbGF0aW9uc1tsb2NhbGVdID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfTtcblxuICAgICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICRsb2cuZXJyb3IoJ0NvdWxkIG5vdCBsb2FkIHRyYW5zbGF0aW9ucyEnKTtcbiAgICAgICAgfTtcblxuICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwsIGNvbmZpZykudGhlbihcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICAgICk7XG4gICAgfTtcblxuICAvKipcbiAgICogU2V0cyBsb2NhbGUgdG8gZ2l2ZW4gcGFyYWVtdGVyIGlmIGl0J3MgYSB2YWxpZCBvbmUuXG4gICAqIEZhbGxzIGJhY2sgdG8gYGRlZmF1bHRMb2NhbGVgIGlmIGl0J3MgYW4gaW52YWxpZCBvbmUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBzZXRMb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgSTE4Ti5wcm90b3R5cGUuc2V0TG9jYWxlID0gZnVuY3Rpb24obG9jYWxlKVxuICAgIHtcbiAgICAgIGlmICh0aGlzLmxvY2FsZXNbbG9jYWxlXSkge1xuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvY2FsZSA9IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBEZWxpdmVycyB0aGUgY3VycmVudGx5IHVzZWQgbG9jYWxlIGZvciB0cmFuc2xhdGlvbnMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBzZXRMb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgSTE4Ti5wcm90b3R5cGUuZ2V0TG9jYWxlID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsZTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBNYWtlcyBhIGxvb2t1cCB3aXRoaW4gY3VycmVudCB0cmFuc2xhdGlvbiBkaWN0aW9uYXJ5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBpMThuIGtleS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IC4uLiBQYXJhbWV0ZXJzIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBJMThOLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpXG4gICAge1xuICAgICAgdmFyIHN0cmluZyA9IHRoaXMuJGluamVjdG9yLmdldCgnc3RyaW5nJyk7XG4gICAgICB2YXIgcGFyYW1zID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7XG4gICAgICB2YXIgbG9jYWxlID0gdGhpcy5nZXRMb2NhbGUoKTtcblxuICAgICAgdmFyIHRleHQ7XG4gICAgICB0cnkge1xuICAgICAgICB0ZXh0ID0gdGhpcy50cmFuc2xhdGlvbnNbbG9jYWxlXVtrZXldO1xuICAgICAgfSBjYXRjaChlKSB7fVxuXG4gICAgICByZXR1cm4gc3RyaW5nLnNwcmludGYodGV4dCB8fMKga2V5LHBhcmFtcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBlbmRwb2ludCB0byBnYXRoZXIgSlNPTiB0cmFuc2xhdGlvbnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZXRob2QgX2dldFRyYW5zbGF0aW9uc1VybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIEkxOE4ucHJvdG90eXBlLl9nZXRKU09OVXJsID0gZnVuY3Rpb24obG9jYWxlKVxuICAgIHtcbiAgICAgIHJldHVybiAnL2Fzc2V0cy9qc29uLycgKyBsb2NhbGUgKyAnLmpzb24nO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEkxOE4ucHJvdG90eXBlLl9kZXRlY3RMb2NhbGUgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgdmFyIG5hdmlnYXRvciA9IHRoaXMuJGluamVjdG9yLmdldCgnJHdpbmRvdycpLm5hdmlnYXRvcjtcbiAgICAgIHZhciBhbmRyb2lkID0gL2FuZHJvaWQuKlxcVyhcXHdcXHcpLShcXHdcXHcpXFxXL2k7XG4gICAgICB2YXIgbGFuZ3VhZ2U7XG5cbiAgICAgIC8vIHRyeSB0byBmaW5kIGxvY2FsZSBvbiBhbmRyb2lkIGRldmljZXMhXG4gICAgICBpZiggbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiZcbiAgICAgICAgICAobGFuZ3VhZ2UgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKGFuZHJvaWQpKSApIHtcbiAgICAgICAgICBsYW5ndWFnZSA9IGxhbmd1YWdlWzFdO1xuICAgICAgfVxuXG4gICAgICAvLyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICBpZiAoIWxhbmd1YWdlICYmIG5hdmlnYXRvcikge1xuICAgICAgICBpZiggbmF2aWdhdG9yLmxhbmd1YWdlICkge1xuICAgICAgICAgIGxhbmd1YWdlID0gbmF2aWdhdG9yLmxhbmd1YWdlO1xuICAgICAgICB9IGVsc2UgaWYoIG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UgKSB7XG4gICAgICAgICAgbGFuZ3VhZ2UgPSBuYXZpZ2F0b3IudXNlckxhbmd1YWdlO1xuICAgICAgICB9IGVsc2UgaWYoIG5hdmlnYXRvci5zeXN0ZW1MYW5ndWFnZSApIHtcbiAgICAgICAgICBsYW5ndWFnZSA9IG5hdmlnYXRvci5zeXN0ZW1MYW5ndWFnZTtcbiAgICAgICAgfSBlbHNlIGlmKCBuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlICkge1xuICAgICAgICAgIGxhbmd1YWdlID0gbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBub3cgd2UgY2FuIGdldCBpc28gY29kZVxuICAgICAgaWYgKGxhbmd1YWdlKSB7XG4gICAgICAgIHJldHVybiBsYW5ndWFnZS5zdWJzdHIoMCwyKTtcbiAgICAgIH1cblxuICAgICAgLy8gdXNlIGBkZWZhdWx0TG9jYWxlYCBhcyBmYWxsYmFja1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuc2VydmljZSgnaTE4bicsIEkxOE4pO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
