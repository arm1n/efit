/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var o=function(t){this.translations={},this.$injector=t,this.setLocale(this._detectLocale())};o.$inject=["$injector"],o.prototype.locales={de:!0},o.prototype.defaultLocale="de",o.prototype.load=function(t,e){if(t=t||this.getLocale(),e=e||{},!this.translations[t]){var o=this.$injector.get("$http"),n=this.$injector.get("$log"),a=this,r=this._getJSONUrl(t),s=function(e){a.translations[t]=e.data},i=function(){n.error("Could not load translations!")};return o.get(r,e).then(s,i)}},o.prototype.setLocale=function(t){return this.locales[t]?void(this.locale=t):void(this.locale=this.defaultLocale)},o.prototype.getLocale=function(){return this.locale},o.prototype.get=function(t){var e,o=this.$injector.get("string"),n=[].slice.call(arguments,1),a=this.getLocale();try{e=this.translations[a][t]}catch(r){}return o.sprintf(e||t,n)},o.prototype._getJSONUrl=function(t){return"assets/json/"+t+".json"},o.prototype._detectLocale=function(){var t,e=this.$injector.get("$window").navigator,o=/android.*\W(\w\w)-(\w\w)\W/i;return e&&e.userAgent&&(t=e.userAgent.match(o))&&(t=t[1]),!t&&e&&(e.language?t=e.language:e.userLanguage?t=e.userLanguage:e.systemLanguage?t=e.systemLanguage:e.browserLanguage&&(t=e.browserLanguage)),t?t.substr(0,2):this.defaultLocale},e.module(t).service("i18n",o)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
