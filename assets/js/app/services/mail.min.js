/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  //
  // SERVICE
  //

  /**
   * @constructor
   */
  var Mail = function($injector)
    {
      this.$injector = $injector;
    };

  Mail.$inject = ['$injector'];

  //
  // METHODS
  //

  /**
   * Sends a POST request to send mail.
   *
   * @public
   * @method send
   * @param {Object} data
   * @param {Object} [config] $http config.
   * @return {Promise}
   */
  Mail.prototype.send = function(data, config) {
    var notification = this.$injector.get('notification');
    var $http = this.$injector.get('$http');
    var i18n = this.$injector.get('i18n');
    var me = this;

    var successCallback = function(response)
      {
        notification.success(
          i18n.get(
            'Your email has been sent!'
          )
        );
      };

    var failureCallback = function(rejection)
      {
        console.log(rejection);
      };

    var promise = $http.post(
      this._getPostUrl(),
      {
        _name: data.name,
        _mail: data.email,
        _subject: data.subject,
        _message: data.message
      },
      config || {}
    );

    promise.then(
      successCallback,
      failureCallback
    );

    return promise;
  };

  /**
   * Returns endpoint to send the email.
   *
   * @private
   * @method _getPostUrl
   * @return {string}
   */
  Mail.prototype._getPostUrl = function(){
    var API_URL = this.$injector.get('API_URL');

    return API_URL + '/mail';
  };

  //
  // REGISTRY
  //
  angular.module(module).service('mail', Mail);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9tYWlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC9zZXJ2aWNlcy9tYWlsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy9cbiAgLy8gU0VSVklDRVxuICAvL1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHZhciBNYWlsID0gZnVuY3Rpb24oJGluamVjdG9yKVxuICAgIHtcbiAgICAgIHRoaXMuJGluamVjdG9yID0gJGluamVjdG9yO1xuICAgIH07XG5cbiAgTWFpbC4kaW5qZWN0ID0gWyckaW5qZWN0b3InXTtcblxuICAvL1xuICAvLyBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgUE9TVCByZXF1ZXN0IHRvIHNlbmQgbWFpbC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHNlbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddICRodHRwIGNvbmZpZy5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIE1haWwucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhLCBjb25maWcpIHtcbiAgICB2YXIgbm90aWZpY2F0aW9uID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdub3RpZmljYXRpb24nKTtcbiAgICB2YXIgJGh0dHAgPSB0aGlzLiRpbmplY3Rvci5nZXQoJyRodHRwJyk7XG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpbmplY3Rvci5nZXQoJ2kxOG4nKTtcbiAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAgICAge1xuICAgICAgICBub3RpZmljYXRpb24uc3VjY2VzcyhcbiAgICAgICAgICBpMThuLmdldChcbiAgICAgICAgICAgICdZb3VyIGVtYWlsIGhhcyBiZWVuIHNlbnQhJ1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICB2YXIgZmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24ocmVqZWN0aW9uKVxuICAgICAge1xuICAgICAgICBjb25zb2xlLmxvZyhyZWplY3Rpb24pO1xuICAgICAgfTtcblxuICAgIHZhciBwcm9taXNlID0gJGh0dHAucG9zdChcbiAgICAgIHRoaXMuX2dldFBvc3RVcmwoKSxcbiAgICAgIHtcbiAgICAgICAgX25hbWU6IGRhdGEubmFtZSxcbiAgICAgICAgX21haWw6IGRhdGEuZW1haWwsXG4gICAgICAgIF9zdWJqZWN0OiBkYXRhLnN1YmplY3QsXG4gICAgICAgIF9tZXNzYWdlOiBkYXRhLm1lc3NhZ2VcbiAgICAgIH0sXG4gICAgICBjb25maWcgfHwge31cbiAgICApO1xuXG4gICAgcHJvbWlzZS50aGVuKFxuICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGVuZHBvaW50IHRvIHNlbmQgdGhlIGVtYWlsLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9nZXRQb3N0VXJsXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIE1haWwucHJvdG90eXBlLl9nZXRQb3N0VXJsID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgQVBJX1VSTCA9IHRoaXMuJGluamVjdG9yLmdldCgnQVBJX1VSTCcpO1xuXG4gICAgcmV0dXJuIEFQSV9VUkwgKyAnL21haWwnO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuc2VydmljZSgnbWFpbCcsIE1haWwpO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
