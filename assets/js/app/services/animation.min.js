/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(n,i){"use strict";var t=function(n){this.$injector=n};t.$inject=["$injector"],t.prototype.animationEndEvent=function(){var n=document.createElement("div"),i={WebkitAnimation:"webkitAnimationEnd",MozTAnimation:"animationend",animation:"animationend"};for(var t in i){var e=n.style[t];if(void 0!==e)return i[t]}return null}(),t.prototype.transitionEndEvent=function(){var n=document.createElement("div"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(var t in i){var e=n.style[t];if(void 0!==e)return i[t]}return null}(),t.prototype.translate=function(n,t,e){var o=this.$injector.get("string"),r=i.isUndefined(e)?o.sprintf("translate(%spx,%spx)",n,t):o.sprintf("translate3d(%spx,%spx,%spx)",n,t,e);return{webkitTransform:r,mozTransform:r,msTransform:r,oTransform:r,transform:r}},t.prototype.requestAnimationFrame=function(){for(var n=0,i=["ms","moz","webkit","o"],t=0;t<i.length&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[i[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i[t]+"CancelAnimationFrame"]||window[i[t]+"CancelRequestAnimationFrame"];return window.requestAnimationFrame||(window.requestAnimationFrame=function(i){var t=(new Date).getTime(),e=Math.max(0,16-(t-n)),o=function(){i(t+e)},r=window.setTimeout(o,e);return n=t+e,r}),window.requestAnimationFrame.bind(window)}(),t.prototype.cancelAnimationFrame=function(){return window.cancelAnimationFrame||(window.cancelAnimationFrame=function(n){clearTimeout(n)}),window.cancelAnimationFrame.bind(window)}(),i.module(n).service("animation",t)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
