/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global ANGULAR_MODULE, angular */
(function(module, angular) {
  'use strict';

  //
  // SERVICE
  //

  /**
   * @constructor
   */
  var user = function($injector) {
    this.$injector = $injector;
  };

  user.$inject = ['$injector'];

  //
  // PROPERTIES
  //

  /** @var {array} _payload JSON representation of current user. */
  user.prototype._payload = null;

  //
  // METHODS
  //

  /**
   * Fetches current user through `User` resource.
   * Triggers the `user_updated` event on
   * $rootScope for all services being in charge.
   *
   * @public
   * @method load
   * @return {void}
   */
  user.prototype.load = function(state) {
    var $rootScope = this.$injector.get('$rootScope');
    var User = this.$injector.get('User');

    var me = this;
    var successCallback = function(user) {
      // set the properties for all users
      // with role other than `ROLE_USER`
      user.tickets = user.tickets || 0;
      user.state = user.state || 1;
      me.set(user);

      // trigger `user_updated`
      $rootScope.$broadcast(
        'user_updated',
        user
      );

      // resolve user
      return user;
    };

    var failureCallback = function() {
      // noop
    };

    var current = User.current();
    return current.$promise.then(
      successCallback,
      failureCallback
    );
  };

  /**
   * Sets current user.
   *
   * @public
   * @method set
   * @param {Object} user
   * @return {void}
   */
  user.prototype.set = function(user) {
    this._payload = user.toJSON();
  };

  /**
   * Gets current user.
   *
   * @public
   * @method add
   * @return {Object|null}
   */
  user.prototype.get = function() {
    return this._payload;
  };

  //
  // REGISTRY
  //
  angular.module(module).service('user', user);

})(ANGULAR_MODULE, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9jdXJyZW50LXVzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAvc2VydmljZXMvY3VycmVudC11c2VyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBBTkdVTEFSX01PRFVMRSwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKG1vZHVsZSwgYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy9cbiAgLy8gU0VSVklDRVxuICAvL1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHZhciB1c2VyID0gZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgdGhpcy4kaW5qZWN0b3IgPSAkaW5qZWN0b3I7XG4gIH07XG5cbiAgdXNlci4kaW5qZWN0ID0gWyckaW5qZWN0b3InXTtcblxuICAvL1xuICAvLyBQUk9QRVJUSUVTXG4gIC8vXG5cbiAgLyoqIEB2YXIge2FycmF5fSBfcGF5bG9hZCBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGN1cnJlbnQgdXNlci4gKi9cbiAgdXNlci5wcm90b3R5cGUuX3BheWxvYWQgPSBudWxsO1xuXG4gIC8vXG4gIC8vIE1FVEhPRFNcbiAgLy9cblxuICAvKipcbiAgICogRmV0Y2hlcyBjdXJyZW50IHVzZXIgdGhyb3VnaCBgVXNlcmAgcmVzb3VyY2UuXG4gICAqIFRyaWdnZXJzIHRoZSBgY3VycmVudF91c2VyX3VwZGF0ZWRgIGV2ZW50IG9uXG4gICAqICRyb290U2NvcGUgZm9yIGFsbCBzZXJ2aWNlcyBiZWluZyBpbiBjaGFyZ2UuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQG1ldGhvZCBsb2FkXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB1c2VyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgJHJvb3RTY29wZSA9IHRoaXMuJGluamVjdG9yLmdldCgnJHJvb3RTY29wZScpO1xuICAgIHZhciBVc2VyID0gdGhpcy4kaW5qZWN0b3IuZ2V0KCdVc2VyJyk7XG5cbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAvLyBzZXQgdGhlIHByb3BlcnRpZXMgZm9yIGFsbCB1c2Vyc1xuICAgICAgLy8gd2l0aCByb2xlIG90aGVyIHRoYW4gYFJPTEVfVVNFUmBcbiAgICAgIHVzZXIudGlja2V0cyA9IHVzZXIudGlja2V0cyB8fMKgMDtcbiAgICAgIHVzZXIuc3RhdGUgPSB1c2VyLnN0YXRlIHx8wqAxO1xuICAgICAgbWUuc2V0KHVzZXIpO1xuXG4gICAgICAvLyB0cmlnZ2VyIGBjdXJyZW50X3VzZXJfdXBkYXRlZGBcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcbiAgICAgICAgJ2N1cnJlbnRfdXNlcl91cGRhdGVkJyxcbiAgICAgICAgdXNlclxuICAgICAgKTtcblxuICAgICAgLy8gcmVzb2x2ZSB1c2VyXG4gICAgICByZXR1cm4gdXNlcjtcbiAgICB9O1xuXG4gICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gbm9vcFxuICAgIH07XG5cbiAgICB2YXIgY3VycmVudCA9IFVzZXIuY3VycmVudCgpO1xuICAgIHJldHVybiBjdXJyZW50LiRwcm9taXNlLnRoZW4oXG4gICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICBmYWlsdXJlQ2FsbGJhY2tcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgdXNlci5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIHNldFxuICAgKiBAcGFyYW0ge09iamVjdH0gdXNlclxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdXNlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odXNlcikge1xuICAgIHRoaXMuX3BheWxvYWQgPSB1c2VyLnRvSlNPTigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIGN1cnJlbnQgdXNlci5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAbWV0aG9kIGFkZFxuICAgKiBAcmV0dXJuIHtPYmplY3R8bnVsbH1cbiAgICovXG4gIHVzZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXlsb2FkO1xuICB9O1xuXG4gIC8vXG4gIC8vIFJFR0lTVFJZXG4gIC8vXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZSkuc2VydmljZSgndXNlcicsIHVzZXIpO1xuXG59KShBTkdVTEFSX01PRFVMRSwgYW5ndWxhcik7XG4iXX0=
