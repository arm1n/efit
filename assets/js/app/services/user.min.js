/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,e){"use strict";var i=function(t){this.$injector=t,this._states=[t.get("STATE_BEGINNER"),t.get("STATE_AMATEUR"),t.get("STATE_ADVANCED"),t.get("STATE_EXPERT")],this._eventSource=null,this._results=[],this._payload={},this._pending={},this._tasks={}};i.$inject=["$injector"],i.prototype.state=null,i.prototype.group=null,i.prototype.tickets=null,i.prototype.load=function(){var t=this.$injector.get("User"),e=this,i=function(t){e._payload=t.toJSON(),e._initTickets(),e._initState(),e._initGroup(),e.isUser()&&(e._initWatches(),e._initTasks(),e._initPending(),e._initResults(),e._initSSE())},s=function(){},n=t.current();return n.$promise.then(i,s),n},i.prototype.unload=function(){var t=this.$injector.get("sse");this._eventSource&&t.removeSource(this._eventSource),this._unwatchTickets&&this._unwatchTickets(),this._unwatchState&&this._unwatchState(),this._eventSource=null,this._results=[],this._payload={},this._pending={},this._tasks={},this.tickets=null,this.state=null,this.group=null},i.prototype.update=function(t){this._payload=t.user,this._addResult(t),this._initTickets(),this._initState(),this._initGroup()},i.prototype.isUser=function(){return this.hasRole("ROLE_USER")},i.prototype.isAdmin=function(){return this.hasRole("ROLE_ADMIN")},i.prototype.isSuperAdmin=function(){return this.hasRole("ROLE_SUPER_ADMIN")},i.prototype.isInWorkshop=function(){return!this.isUser()||this._payload.workshop.isActive},i.prototype.hasRole=function(t){e.isArray(t)||(t=[t]);for(var i=this._payload.roles||[],s=0;s<t.length;s++)if(i.indexOf(t[s])>=0)return!0;return!1},i.prototype.getTasks=function(){return this._tasks},i.prototype.getTaskByType=function(t){return this._tasks[t]||null},i.prototype.getPendingByType=function(t){return this._pending[t]||null},i.prototype.getGroupAsString=function(){switch(this.group){case this.$injector.get("GROUP_A"):return"GROUP_A";case this.$injector.get("GROUP_B"):return"GROUP_B";default:return null}},i.prototype.getStateAsString=function(){switch(this.state){case this.$injector.get("STATE_AMATEUR"):return"STATE_AMATEUR";case this.$injector.get("STATE_ADVANCED"):return"STATE_ADVANCED";case this.$injector.get("STATE_EXPERT"):return"STATE_EXPERT";default:return"STATE_BEGINNER"}},i.prototype._initState=function(){var t=this.$injector.get("STATE_BEGINNER");this.state=this._payload.state||t},i.prototype._initGroup=function(){this.group=this._payload.group||null},i.prototype._initTickets=function(){var t=this._payload.tickets;this.tickets=t||[]},i.prototype._initWatches=function(){var t=this.$injector.get("notification"),e=this.$injector.get("$rootScope"),i=this.$injector.get("i18n"),s=this,n=function(){return s.state},o=function(e,n){e!==n&&t.success(i.get("Congratulations, you have reached the state %s!",i.get(s.getStateAsString())))},r=function(){return s.tickets},a=function(e,s){if(e!==s){var n=s&&s.length,o=e&&e.length,r=o-n;if(!(r<0)){var a=1===r?i.get("Congratulations, you have earned 1 new ticket!"):i.get("Congratulations, you have earned %s new tickets!",r);t.primary(a)}}};this._unwatchTickets=e.$watchCollection(r,a),this._unwatchState=e.$watch(n,o)},i.prototype._initSSE=function(){var t=this.$injector.get("$rootScope"),i=this.$injector.get("API_URL"),s=this.$injector.get("sse"),n=this._payload.workshop;if(n.isActive){var o=this,r=function(i){t.$evalAsync(function(){e.forEach(i,function(t){var e=Date.parse(t.updatedAt),i=o._tasks[t.type];i.isActive=!!t.isActive,isNaN(e)||(t.updatedAt=e)})})},a=i+"/sse/workshop/"+n.id+"/tasks",u={onMessage:r,sleep:1};this._eventSource=s.addSource(a,u)}},i.prototype._initTasks=function(){var t=this._payload.workshop;if(t){var i=this;e.forEach(t.tasks,function(t){i._tasks[t.type]=t})}},i.prototype._initPending=function(){var t=this._payload.pending;if(t){var i=this;e.forEach(t,function(t){i._pending[t.task.type]=t})}},i.prototype._initResults=function(){var t=this._addResult.bind(this),i=this._payload.results||[];e.forEach(i,t)},i.prototype._addResult=function(t){var e=this.getTaskByType(t.task.type);if(null!==e){var i=e.$$results||0;e.$$results=i+1}this._results.push(t)},e.module(t).service("user",i)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
