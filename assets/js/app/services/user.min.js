/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(t,i){"use strict";var e=function(t){this.$injector=t,this._states=[t.get("STATE_BEGINNER"),t.get("STATE_AMATEUR"),t.get("STATE_ADVANCED"),t.get("STATE_EXPERT")],this._eventSource=null,this._payload={},this._pending={},this._tasks={}};e.$inject=["$injector"],e.prototype.state=null,e.prototype.group=null,e.prototype.tickets=null,e.prototype.load=function(){var t=this.$injector.get("User"),i=this,e=function(t){i._payload=t.toJSON(),i._initTickets(),i._initState(),i._initGroup(),i.isUser()&&(i._initWatches(),i._initPending(),i._initTasks(),i._initSSE())},n=function(){},s=t.current();return s.$promise.then(e,n),s},e.prototype.unload=function(){var t=this.$injector.get("sse");this._eventSource&&t.removeSource(this._eventSource),this._unwatchTickets&&this._unwatchTickets(),this._unwatchState&&this._unwatchState(),this._eventSource=null,this._payload={},this._pending={},this._tasks={},this.tickets=null,this.state=null,this.group=null},e.prototype.update=function(t){this._payload=t,this._initTickets(),this._initState(),this._initGroup()},e.prototype.isUser=function(){return this.hasRole("ROLE_USER")},e.prototype.isAdmin=function(){return this.hasRole("ROLE_ADMIN")},e.prototype.isSuperAdmin=function(){return this.hasRole("ROLE_SUPER_ADMIN")},e.prototype.isInWorkshop=function(){return!this.isUser()||this._payload.workshop.isActive},e.prototype.hasRole=function(t){i.isArray(t)||(t=[t]);for(var e=this._payload.roles||[],n=0;n<t.length;n++)if(e.indexOf(t[n])>=0)return!0;return!1},e.prototype.getTaskByType=function(t){return this._tasks[t]||null},e.prototype.getPendingByType=function(t){return this._pending[t]||null},e.prototype.getGroupAsString=function(){switch(this.group){case this.$injector.get("GROUP_A"):return"GROUP_A";case this.$injector.get("GROUP_B"):return"GROUP_B";default:return null}},e.prototype.getStateAsString=function(){switch(this.state){case this.$injector.get("STATE_AMATEUR"):return"STATE_AMATEUR";case this.$injector.get("STATE_ADVANCED"):return"STATE_ADVANCED";case this.$injector.get("STATE_EXPERT"):return"STATE_EXPERT";default:return"STATE_BEGINNER"}},e.prototype._initState=function(){var t=this.$injector.get("STATE_BEGINNER");this.state=this._payload.state||t},e.prototype._initGroup=function(){this.group=this._payload.group||null},e.prototype._initTickets=function(){var t=this._payload.tickets;this.tickets=t||0},e.prototype._initWatches=function(){var t=this.$injector.get("notification"),i=this.$injector.get("$rootScope"),e=this.$injector.get("i18n"),n=this,s=function(){return n.state},o=function(i,s){i!==s&&t.success(e.get("Congratulations, you have reached the state %s!",e.get(n.getStateAsString())))},r=function(){return n.tickets},a=function(i,n){if(i!==n){var s=i-n;if(!(s<0)){var o=1===s?e.get("Congratulations, you have earned 1 new ticket!"):e.get("Congratulations, you have earned %s new tickets!",s);t.primary(o)}}};this._unwatchTickets=i.$watch(r,a),this._unwatchState=i.$watch(s,o)},e.prototype._initSSE=function(){var t=this.$injector.get("$rootScope"),e=this.$injector.get("API_URL"),n=this.$injector.get("sse"),s=this._payload.workshop;if(s.isActive){var o=this,r=function(e){t.$evalAsync(function(){i.forEach(e,function(t){var i=Date.parse(t.updatedAt),e=o._tasks[t.type];e.isActive=!!t.isActive,isNaN(i)||(t.updatedAt=i)})})},a=e+"/sse/workshop/"+s.id+"/tasks",c={onMessage:r,sleep:1};this._eventSource=n.addSource(a,c)}},e.prototype._initTasks=function(){var t=this._payload.workshop;if(t){var e=this;i.forEach(t.tasks,function(t){e._tasks[t.type]=t})}},e.prototype._initPending=function(){var t=this._payload.pending;if(t){var e=this;i.forEach(t,function(t){e._pending[t.task.type]=t})}},i.module(t).service("user",e)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
