/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(e,t){"use strict";var r=function(e,t){this.$injector=e,this.storage=t.getProxy()};r.$inject=["$injector","storage"],r.prototype.tokenKey="NAksNyshI3",r.prototype.refreshKey="i08BFNG9t5",r.prototype.getToken=function(){return this.storage.getItem(this.tokenKey)},r.prototype.setToken=function(e){this.storage.setItem(this.tokenKey,e)},r.prototype.removeToken=function(){this.storage.removeItem(this.tokenKey)},r.prototype.getRefreshToken=function(){return this.storage.getItem(this.refreshKey)},r.prototype.setRefreshToken=function(e){this.storage.setItem(this.refreshKey,e)},r.prototype.removeRefreshToken=function(){this.storage.removeItem(this.refreshKey)},r.prototype.getExpirationDate=function(e){var t=this.$injector.get("$log");if(e=e||this.getToken(),!e)return t.error("No token given or available!"),null;var r=this.decode(e);if("undefined"==typeof r.exp)return t.error("No `exp` property available!"),null;var o=new Date(0);return o.setUTCSeconds(r.exp),o},r.prototype.isExpired=function(e,t){t=t||0,e=e||this.getToken();var r=this.getExpirationDate(e);if(null===r)return!0;var o=(new Date).valueOf();return t=o+1e3*t,r=r.valueOf(),r<=t},r.prototype.decode=function(e){var r=this.$injector.get("$log");try{var o=e.split(".");if(3!==o.length)throw new Error("JWT must have 3 parts!");var n=this._base64Decode(o[1]);if(!n)throw new Error("Cannot decode the token!");return t.fromJson(n)}catch(i){return r.error(i),null}},r.prototype._base64Decode=function(e){var t=this.$injector.get("$window"),r=this.$injector.get("$log"),o=e.replace(/-/g,"+").replace(/_/g,"/");try{switch(o.length%4){case 0:break;case 2:o+="==";break;case 3:o+="=";break;default:throw new Error("Illegal base64url code!")}}catch(n){return r.error(n),""}var i=t.atob(o),s=t.escape(i);return t.decodeURIComponent(s)},t.module(e).service("jwt",r)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
