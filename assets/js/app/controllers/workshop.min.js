/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
!function(e,t){"use strict";var s=function(e,t,s){this.workshops=s,this.$injector=t,this.$scope=e,this._resultsSource=null,this._userSources={},this._workshops={},this._tasks={},this._initWorkshops(),this._initListener()};s.$inject=["$scope","$injector","workshops"],s.prototype.name=null,s.prototype.code=null,s.prototype.nameMinLength=8,s.prototype.codeMinLength=8,s.prototype.codePattern=/^[A-Za-z0-9]+$/,s.prototype.deleteWorkshop=null,s.prototype.chartResults=null,s.prototype.chartTask=null,s.prototype.uiOnParamsChanged=function(e){var t=this._workshops[e.expand];return t?(t.$$expanded=!0,void(this._expanded=t)):this._expanded?(this._expanded.$$expanded=!1,void(this._expanded=null)):void 0},s.prototype.create=function(){var e=this.$injector.get("notification"),t=this.$injector.get("Workshop"),s=this.$injector.get("i18n"),o=new t({name:this.name,code:this.code}),i=this,n=function(t){var o=s.get("Workshop has been created successfully!");e.success(o),i.workshops.unshift(t),i._initWorkshop(t),i.name=null,i.code=null},r=function(){};o.$create().then(n,r)},s.prototype["delete"]=function(e){var t=this.$injector.get("notification"),s=this.$injector.get("i18n"),o=this,i=function(){var i=s.get("Workshop has been deleted successfully!");t.success(i);var n=o.workshops.indexOf(e);o.workshops.splice(n,1),o._removeUsersStream(e)},n=function(){};e.$delete().then(i,n)},s.prototype.markWorkshopForDeletion=function(e){this.deleteWorkshop=e},s.prototype.toggleWorkshop=function(e){var t=this.$injector.get("notification"),s=this.$injector.get("i18n"),o=this,i=function(e){var i=s.get(e.isActive?"Workshop has been unlocked successfully. Students can register now!":"Workshop has been locked successfully. Students can now only use their access from home!");t.success(i),o._initWorkshop(e)},n=function(){e.isActive=!e.isActive};e.isActive=!e.isActive,e.$update().then(i,n)},s.prototype.markTaskForChart=function(e){var t=this.$injector.get("Result"),s=this,o=function(t){s.chartResults=t,s.chartTask=e},i=function(){console.log(arguments)},n=t.getByTask({taskId:e.id});n.$promise.then(o,i)},s.prototype.toggleTask=function(e){var t=this.$injector.get("notification"),s=this.$injector.get("i18n"),o=this.$injector.get("Task"),i=function(){var o=s.get(e.isActive?"Task has been unlocked successfully. Students can send results now!":"Task has been locked successfully. Students cannot send results currently!");t.success(o)},n=function(){e.isActive=!e.isActive};e.isActive=!e.isActive;var r=o.update({id:e.id},e);r.$promise.then(i,n)},s.prototype.expand=function(e){var t=this.$injector.get("$state"),s=e.$$expanded?null:e.id;t.go("backend.workshops",{expand:s})},s.prototype._addUsersStream=function(e){var t=this.$injector.get("API_URL"),s=this.$injector.get("sse"),o=this,i=function(t){o.$scope.$evalAsync(function(){e.$$users=t})},n=t+"/sse/workshop/"+e.id+"/users",r={onMessage:i,sleep:10},c=s.addSource(n,r);this._userSources[e.id]=c},s.prototype._removeUsersStream=function(e){var t=this.$injector.get("sse"),s=this._userSources[e.id];s&&(delete this._userSources[e.id],t.removeSource(s))},s.prototype._streamResults=function(){var e=this.$injector.get("API_URL"),s=this.$injector.get("sse"),o=this,i=function(e,i){o.$scope.$evalAsync(function(){e.isActive||s.removeSource(o._resultsSource),t.forEach(i,function(e){var t=o._tasks[e.id];t.$$results=e.results})})},n=function(){return o._expanded&&o._expanded.isActive},r=function(){if(o._resultsSource&&s.removeSource(o._resultsSource),o._expanded){var t=e+"/sse/workshop/"+o._expanded.id+"/results",n=i.bind(o,o._expanded),r={onMessage:n,sleep:5};o._resultsSource=s.addSource(t,r)}};this._unwatch=this.$scope.$watch(n,r)},s.prototype._initWorkshops=function(){var e=this.$injector.get("$uiRouterGlobals");t.forEach(this.workshops,this._initWorkshop.bind(this)),this.uiOnParamsChanged(e.params),this._streamResults()},s.prototype._initWorkshop=function(e){var s=this;t.forEach(e.tasks,function(e){var t=s._tasks[e.id]||null;e.$$results=null!==t?t.$$results:0,s._tasks[e.id]=e});var o=this._expanded&&this._expanded.id;e.$$expanded=e.id===o,e.$$users=e.users.length,e.isActive?this._addUsersStream(e):this._removeUsersStream(e),this._workshops[e.id]=e},s.prototype._initListener=function(){var e=this.$injector.get("sse"),t=this,s=function(){for(var s in t._userSources)e.removeSource(t._userSources[s]);t._resultsSource&&e.removeSource(t._resultsSource),t._resultsSource=null,t._userSources={},t._unlisten(),t._unwatch()};this._unlisten=this.$scope.$on("$destroy",s)},t.module(e).controller("WorkshopController",s)}(ANGULAR_MODULE,angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
