/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t){if("undefined"==typeof t)throw Error("Cannot initialize bomb task without angular!");var i=t.module("bombTask",[]);i.constant("DEFAULT_NUM_ROWS",5),i.constant("DEFAULT_NUM_COLS",5),i.constant("DEFAULT_WIDTH","75px"),i.constant("DEFAULT_HEIGHT","75px"),i.constant("DEFAULT_FEEDBACK",!0),i.constant("DEFAULT_UNDOABLE",!0),i.constant("DEFAULT_RANDOM",!1),i.constant("DEFAULT_DYNAMIC",!1),i.constant("DEFAULT_INTERVAL",1);var o=function(t,i,o,e){this._storageKey="bret_state",this.$injector=e,this.$interval=o,this.$filter=i,this.$scope=t,this.init()};o.$inject=["$scope","$filter","$interval","$injector"],o.prototype.init=function(){this._initInternals(),this._initSettings(),this._initWatches(),this._initMatrix(),this._initBomb(),this._initForm(),this._desist()},o.prototype.reset=function(){this._collectionUnwatchF(),this._bombUnwatchF(),this._removeState(),this.init()},o.prototype.start=function(t){if(this.dynamic){var i=this,o=this.iterator.length;this._intIndex=t||0,this._intervalId=i.$interval(function(){var t=i.iterator[i._intIndex];i.update(t,!0),i._intIndex++,i._intIndex===o&&i.stop()},1e3*this.interval,o-this._intIndex)}this.started=!0,this._persist()},o.prototype.stop=function(){this.dynamic&&this._intervalId&&this.$interval.cancel(this._intervalId),this.feedback||(this.resolved=!0),this.stopped=!0,this._persist()},o.prototype.resolve=function(){for(var t=0;t<this.collection.length;t++)this.collection[t].$$resolved=!0;this.resolved=!0,this._persist()},o.prototype.update=function(t,i){var o=this.collection.indexOf(t);i?(o<0&&this.collection.push(t),t.$$active=!0):o>=0&&(this.collection.splice(o,1),t.$$active=!1),this._persist()},o.prototype.isBomb=function(i){return t.equals(this.bomb,i)},o.prototype.hasBomb=function(){var t=this,i=this.$filter("filter")(this.collection,function(i){return t.isBomb(i)});return+(1===i.length)},o.prototype.getTotalBoxes=function(){return this.rows*this.cols},o.prototype.getCollectedBoxes=function(){return this.collection.length},o.prototype.getRemainingBoxes=function(){return this.getTotalBoxes()-this.getCollectedBoxes()},o.prototype._getConstant=function(t){return this.$injector.has(t)?this.$injector.get(t):this.$injector.get("DEFAULT_"+t)},o.prototype._getColumn=function(t){var i=t.row-1,o=t.col-1;return this.matrix[i][o]},o.prototype._getState=function(){return"undefined"!=typeof sessionStorage?t.fromJson(sessionStorage.getItem(this._storageKey)):null},o.prototype._setState=function(i){"undefined"!=typeof sessionStorage&&sessionStorage.setItem(this._storageKey,t.toJson(i))},o.prototype._removeState=function(){"undefined"!=typeof sessionStorage&&sessionStorage.removeItem(this._storageKey)},o.prototype._persist=function(){var t={bomb:this.bomb,started:this.started,stopped:this.stopped,resolved:this.resolved,collection:this.collection};this.dynamic&&(t.iterator=this.iterator,t._intIndex=this._intIndex),this._setState(t)},o.prototype._desist=function(){var t=this._getState();if(null!==t){if(this.bomb=this._getColumn(t.bomb),t.iterator){this.iterator=[];for(var i=0;i<t.iterator.length;i++){var o=this._getColumn(t.iterator[i]);this.iterator.push(o)}}for(var i=0;i<t.collection.length;i++){var o=this._getColumn(t.collection[i]);this.update(o,!0)}t.started&&this.start(t._intIndex),t.stopped&&this.stop(),t.resolved&&this.resolve()}},o.prototype._initSettings=function(){this.width=this._getConstant("WIDTH"),this.height=this._getConstant("HEIGHT"),this.rows=this._getConstant("NUM_ROWS"),this.cols=this._getConstant("NUM_COLS"),this.random=this._getConstant("RANDOM"),this.dynamic=this._getConstant("DYNAMIC"),this.interval=this._getConstant("INTERVAL"),this.feedback=this._getConstant("FEEDBACK"),this.undoable=this._getConstant("UNDOABLE")},o.prototype._initInternals=function(){this.collection=[],this.started=!1,this.stopped=!1,this.resolved=!1},o.prototype._initWatches=function(){var i=this;this._collectionUnwatchF=this.$scope.$watchCollection(function(){return i.collection},function(o){i.form.boxes_collected=o.length,i.form.boxes_scheme=t.toJson(o)}),this._bombUnwatchF=this.$scope.$watch(function(){return i.hasBomb()},function(o){i.form.bomb=o,i.form.bomb_location=t.toJson(i.bomb)})},o.prototype._initMatrix=function(){this.matrix=[],this.iterator=[];for(var t=0;t<this.rows;t++){for(var i=[],o=0;o<this.cols;o++){var e={row:t+1,col:o+1};i.push(e),this.dynamic&&(this.random?this._pushRandom(this.iterator,e):this.iterator.push(e))}this.matrix.push(i)}},o.prototype._initBomb=function(){var t=this._getRandom(0,this.rows-1),i=this._getRandom(0,this.cols-1);this.bomb=this.matrix[t][i]},o.prototype._initForm=function(){this.form={bomb:0,boxes_scheme:[],boxes_collected:0,bomb_location:null}},o.prototype._getRandom=function(t,i){return Math.floor(Math.random()*(i-t+1)+t)},o.prototype._pushRandom=function(t,i){var o=this._getRandom(0,t.length);return t.push(t[o]),t[o]=i,t.length},o.prototype._shuffleArray=function(t){for(var i=t.length-1;i>0;i--){var o=this._getRandom(0,i),e=t[i];t[i]=t[o],t[o]=e}return t},i.controller("BombTaskController",o);var e=function(){};e.prototype.model=null,e.prototype.isActive=!1,e.prototype.isDisabled=!1,e.prototype.isClickable=!0,e.prototype.toggle=function(){!this.isDisabled&&this.isClickable&&(this.isActive=!this.isActive,this.onToggle({model:this.model,state:this.isActive}))},i.directive("card",function(){return{scope:{model:"=card",onToggle:"&cardOnToggle",isActive:"=?cardIsActive",isDisabled:"=?cardIsDisabled",isClickable:"=?cardIsClickable"},restrict:"A",transclude:!0,bindToController:!0,controller:e,controllerAs:"cardController",templateUrl:"assets/views/bret-card.html"}})}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
