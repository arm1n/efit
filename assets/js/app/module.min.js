/*!
 * eFit Website
 * An app for financial training in educational environments
 * http://www.e-fit.com
 * @author Armin Pfurtscheller
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
/* global angular */
(function(global, angular){
  'use strict';

  //
  // ANGULAR
  //
  if (typeof angular === 'undefined') {
    throw Error('Cannot initialize eFit without angular!');
  }

  //
  // MODULE
  //
  var module = 'eFit';

  //
  // APP
  //
  var app = angular.module(module,[
    'ngSanitize',
    'ngMessages',
    'ngResource',
    'ui.router'
  ]);

  //
  // CONSTANTS
  //
  app.constant('VIEWS_PATH', '/views');
  //app.constant('API_URL', 'http://localhost:8000/api');
  //app.constant('API_URL','http://localhost/felix/e-fit/backend/web/app_dev.php/api');
  app.constant('API_URL', 'https://efit-production.scalingo.io/api');

  app.constant('GROUP_A', 1);
  app.constant('GROUP_B', 2);

  app.constant('STATE_BEGINNER', 1);
  app.constant('STATE_AMATEUR', 2);
  app.constant('STATE_ADVANCED', 3);
  app.constant('STATE_EXPERT', 4);

  app.constant('TYPE_INTEREST', 'INTEREST');
  app.constant('TYPE_DIVERSIFICATION', 'DIVERSIFICATION');

  app.constant('TYPE_RISK', 'RISK');
  app.constant('TYPE_ANCHORING', 'ANCHORING');
  app.constant('TYPE_MENTAL_BOOKKEEPING', 'MENTAL_BOOKKEEPING');
  app.constant('TYPE_FRAMING', 'FRAMING');

  app.constant('TYPE_SAVINGS_TARGET', 'SAVINGS_TARGET');
  app.constant('TYPE_SAVINGS_SUPPORTED', 'SAVINGS_SUPPORTED');
  app.constant('TYPE_SELF_COMMITMENT', 'SELF_COMMITMENT');
  app.constant('TYPE_PROCRASTINATION', 'PROCRASTINATION');

  //
  // CONFIG
  //
  app.config([
    '$locationProvider', '$stateProvider', '$urlRouterProvider', '$httpProvider',
    '$templateRequestProvider', '$resourceProvider', '$qProvider', 'VIEWS_PATH',
    function(
      $locationProvider, $stateProvider, $urlRouterProvider, $httpProvider,
      $templateRequestProvider, $resourceProvider, $qProvider, VIEWS_PATH) {

      // -------------------------
      // LOCATION
      // -------------------------

      //$locationProvider.html5Mode(true);
      //$locationProvider.hashPrefix('!');

      // -------------------------
      // INTERCEPTORS
      // -------------------------
      $httpProvider.interceptors.push('httpInterceptor');

      // -------------------------
      // PROMISES
      // -------------------------
      $qProvider.errorOnUnhandledRejections(false);

      // -------------------------
      // RESOURCES
      // -------------------------
      $resourceProvider.defaults.actions = {
        get:    { method: 'GET' },
        list:   { method: 'GET', isArray:true },
        update: { method: 'PATCH' },
        create: { method: 'POST'},
        delete: { method: 'DELETE'}
      };

      // -------------------------
      // TEMPLATES
      // -------------------------

      // assign default `templateUrl` for states
      $stateProvider.decorator('views', function(state, parent) {
        //
        // Assigns default template URL:
        // ./path/to/state/[view/][/name].html
        //
        var newViewConfig = {}, views = parent(state);
        angular.forEach(views, function(config, view){
          var viewMatch = view.match(/([^@]+)\@/); // [parentView/]view@state.name
          var viewName = viewMatch ? '/' + viewMatch[1] : '';

          var stateName = state.name.replace(/\./g, '/');
          var basePath = VIEWS_PATH + '/';

          var templateUrl = config.templateUrl || [
            basePath,
            stateName,
            viewName,
            '.html'
          ].join('');

          config.templateUrl = templateUrl;
          newViewConfig[view] = config;
        });

        return newViewConfig;
      });

      // ignore JWT authorization on template requests
      $templateRequestProvider.httpOptions({
        skipAuthorization: true
      });

      // -------------------------
      // STATES
      // -------------------------

      // main (i18n)
      $stateProvider.state('main', {
        url: '',
        abstract: true,
        resolve: {
          translations: ['i18n', function(i18n){
            return i18n.load('de', {
              skipAuthorization: true
            });
          }]
        },
        template: '<div data-ui-view=""></div>'
      });

      // frontend
      $stateProvider.state('frontend', {
        parent: 'main',
        url: '/',
        resolve: {
          user: ['user', '$state', function(user, $state){
            var promise = user.load().$promise;
            return promise.catch(function(){
              console.log('YES');
              $state.go('login.frontend');
            });
          }]
        },
        data: {
          role: [
            'ROLE_USER',
            'ROLE_ADMIN',
            'ROLE_SUPER_ADMIN'
          ]
        },
        views: {
          'navbar@frontend': {},
          'home@frontend': {},
          'topics@frontend': {},

          'financial-knowledge@frontend':{},
          'financial-knowledge/interest-task@frontend':{},
          'financial-knowledge/diversification-task@frontend':{},

          'consumer-behaviour@frontend':{},
          'consumer-behaviour/bomb-task@frontend':{},
          'consumer-behaviour/anchoring-task@frontend':{},
          'consumer-behaviour/mental-bookkeeping-task@frontend':{},
          'consumer-behaviour/framing-task@frontend':{},

          'self-control@frontend':{},
          'self-control/savings-target-task@frontend':{},
          'self-control/savings-supported-task@frontend':{},
          'self-control/self-commitment-task@frontend':{},
          'self-control/procrastination-task@frontend':{},

          'status@frontend': {},
          'contact@frontend': {
            controller: 'ContactController',
            controllerAs: 'contactController'
          },
          'footer@frontend': {},
          'offcanvas@frontend': {},
          '@': {
            controller: 'FrontendController',
            controllerAs: 'frontendController'
          }
        }
      });

      // backend
      $stateProvider.state('backend', {
        parent: 'main',
        url: '/admin',
        data: {
          role: 'ROLE_ADMIN'
        },
        redirectTo: 'backend.workshops',
        views: {
          'main@backend': {},
          'navbar@backend': {},
          'footer@backend': {},
          'offcanvas@backend': {},
          '@': {
            controller: 'BackendController',
            controllerAs: 'backendController'
          }
        }
      });

      $stateProvider.state('backend.workshops', {
        url: '?{expand:int}',
        resolve: {
          workshops: ['Workshop', function(Workshop){
            return Workshop.list().$promise;
          }]
        },
        params: {
          expand: {
            value: null,
            dynamic: true
          }
        },
        controller: 'WorkshopController',
        controllerAs: 'workshopController'
      });

      // login
      $stateProvider.state('login', {
        url: '/login',
        parent: 'main',
        abstract: true,
        redirectTo: 'login.frontend.index'
      });

      $stateProvider.state('login.frontend', {
        url: '/app',
        data: {
          redirects: {
            ROLE_USER: 'frontend'
          }
        },
        redirectTo: 'login.frontend.index',
        controller: 'LoginFrontendController',
        controllerAs: 'loginFrontendController'
      });

      $stateProvider.state('login.frontend.index', {
        url: ''
      });

      $stateProvider.state('login.frontend.signup', {
        url: '/schule'
      });

      $stateProvider.state('login.frontend.signin', {
        url: '/zuhause'
      });

      $stateProvider.state('login.backend', {
        url: '/admin',
        data: {
          redirects: {
            ROLE_ADMIN: 'backend'
          }
        },
        controller: 'LoginBackendController',
        controllerAs: 'loginBackendController'
      });

      $urlRouterProvider.otherwise('/');
    }
  ]);

  //
  // RUN
  //
  app.run(['$injector', function($injector) {
      var $transitions = $injector.get('$transitions');
      var $rootScope = $injector.get('$rootScope');
      var appState = $injector.get('appState');
      var $state = $injector.get('$state');
      var auth = $injector.get('auth');

      var $trace = $injector.get('$trace');
      $trace.enable('TRANSITION');

      var onStart = function(transition) {
        appState.routerBusy = true;

        var state = transition.to();
        var data = state.data || {};
        var role = data.role || null;
        var redirects = data.redirects || {};

        // no authentication check for states
        // without any authorization settings
        if (role === null) {

          // try to redirect authenticated users
          // with auth roles to configured route
          var user = auth.getUser();
          if (user === null) {
            return;
          }

          var roles = user.roles || [];
          for (role in redirects) {
            if (roles.indexOf(role)>=0) {
              var target = redirects[role];
              return $state.target(target);
            }
          }

          return true;
        }

        // assert role an array for callbacks
        if (!angular.isArray(role)) {
          role = [role];
        }

        var successCallback = function()
          {
            return true;
          };

        var failureCallback = function()
          {
            // redirect to login page depending on
            // given role with unsufficient rights
            switch(role[0])
            {
              case 'ROLE_ADMIN':
              case 'ROLE_SUPER_ADMIN':
                return $state.target('login.backend');
              default:
                return $state.target('login.frontend');
            }
          };

        return auth.hasRole(role).then(
          successCallback,
          failureCallback
        );
      };

      var onError = function(/*transition*/) {
        appState.routerBusy = false;
      };

      var onSuccess = function(transition) {
        $rootScope.state = transition.to();
        appState.routerBusy = false;
      };

      $rootScope.$watch(
        function() {
          return appState.isBusy();
        },
        function(isBusy) {
          $rootScope.isBusy = isBusy;
          $rootScope.httpBusy = appState.httpBusy;
          $rootScope.routerBusy = appState.routerBusy;
        }
      );

      $transitions.onError({}, onError);
      $transitions.onStart({}, onStart);
      $transitions.onSuccess({}, onSuccess);
    }
  ]);

  //
  // EXPOSE
  //
  global.ANGULAR_MODULE = module;

})(window, angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tb2R1bGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwL21vZHVsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgYW5ndWxhciAqL1xuKGZ1bmN0aW9uKGdsb2JhbCwgYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvL1xuICAvLyBBTkdVTEFSXG4gIC8vXG4gIGlmICh0eXBlb2YgYW5ndWxhciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBFcnJvcignQ2Fubm90IGluaXRpYWxpemUgZUZpdCB3aXRob3V0IGFuZ3VsYXIhJyk7XG4gIH1cblxuICAvL1xuICAvLyBNT0RVTEVcbiAgLy9cbiAgdmFyIG1vZHVsZSA9ICdlRml0JztcblxuICAvL1xuICAvLyBBUFBcbiAgLy9cbiAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKG1vZHVsZSxbXG4gICAgJ25nU2FuaXRpemUnLFxuICAgICduZ01lc3NhZ2VzJyxcbiAgICAnbmdSZXNvdXJjZScsXG4gICAgJ3VpLnJvdXRlcidcbiAgXSk7XG5cbiAgLy9cbiAgLy8gQ09OU1RBTlRTXG4gIC8vXG4gIGFwcC5jb25zdGFudCgnVklFV1NfUEFUSCcsICcvdmlld3MnKTtcbiAgLy9hcHAuY29uc3RhbnQoJ0FQSV9VUkwnLCAnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaScpO1xuICAvL2FwcC5jb25zdGFudCgnQVBJX1VSTCcsJ2h0dHA6Ly9sb2NhbGhvc3QvZmVsaXgvZS1maXQvYmFja2VuZC93ZWIvYXBwX2Rldi5waHAvYXBpJyk7XG4gIGFwcC5jb25zdGFudCgnQVBJX1VSTCcsICdodHRwczovL2VmaXQtcHJvZHVjdGlvbi5zY2FsaW5nby5pby9hcGknKTtcblxuICBhcHAuY29uc3RhbnQoJ0dST1VQX0EnLCAxKTtcbiAgYXBwLmNvbnN0YW50KCdHUk9VUF9CJywgMik7XG5cbiAgYXBwLmNvbnN0YW50KCdTVEFURV9CRUdJTk5FUicsIDEpO1xuICBhcHAuY29uc3RhbnQoJ1NUQVRFX0FNQVRFVVInLCAyKTtcbiAgYXBwLmNvbnN0YW50KCdTVEFURV9BRFZBTkNFRCcsIDMpO1xuICBhcHAuY29uc3RhbnQoJ1NUQVRFX0VYUEVSVCcsIDQpO1xuXG4gIGFwcC5jb25zdGFudCgnVFlQRV9JTlRFUkVTVCcsICdJTlRFUkVTVCcpO1xuICBhcHAuY29uc3RhbnQoJ1RZUEVfRElWRVJTSUZJQ0FUSU9OJywgJ0RJVkVSU0lGSUNBVElPTicpO1xuXG4gIGFwcC5jb25zdGFudCgnVFlQRV9SSVNLJywgJ1JJU0snKTtcbiAgYXBwLmNvbnN0YW50KCdUWVBFX0FOQ0hPUklORycsICdBTkNIT1JJTkcnKTtcbiAgYXBwLmNvbnN0YW50KCdUWVBFX01FTlRBTF9CT09LS0VFUElORycsICdNRU5UQUxfQk9PS0tFRVBJTkcnKTtcbiAgYXBwLmNvbnN0YW50KCdUWVBFX0ZSQU1JTkcnLCAnRlJBTUlORycpO1xuXG4gIGFwcC5jb25zdGFudCgnVFlQRV9TQVZJTkdTX1RBUkdFVCcsICdTQVZJTkdTX1RBUkdFVCcpO1xuICBhcHAuY29uc3RhbnQoJ1RZUEVfU0FWSU5HU19TVVBQT1JURUQnLCAnU0FWSU5HU19TVVBQT1JURUQnKTtcbiAgYXBwLmNvbnN0YW50KCdUWVBFX1NFTEZfQ09NTUlUTUVOVCcsICdTRUxGX0NPTU1JVE1FTlQnKTtcbiAgYXBwLmNvbnN0YW50KCdUWVBFX1BST0NSQVNUSU5BVElPTicsICdQUk9DUkFTVElOQVRJT04nKTtcblxuICAvL1xuICAvLyBDT05GSUdcbiAgLy9cbiAgYXBwLmNvbmZpZyhbXG4gICAgJyRsb2NhdGlvblByb3ZpZGVyJywgJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckaHR0cFByb3ZpZGVyJyxcbiAgICAnJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyJywgJyRyZXNvdXJjZVByb3ZpZGVyJywgJyRxUHJvdmlkZXInLCAnVklFV1NfUEFUSCcsXG4gICAgZnVuY3Rpb24oXG4gICAgICAkbG9jYXRpb25Qcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGh0dHBQcm92aWRlcixcbiAgICAgICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlciwgJHJlc291cmNlUHJvdmlkZXIsICRxUHJvdmlkZXIsIFZJRVdTX1BBVEgpIHtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gTE9DQVRJT05cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgLy8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgICAvLyRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gSU5URVJDRVBUT1JTXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdodHRwSW50ZXJjZXB0b3InKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gUFJPTUlTRVNcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICRxUHJvdmlkZXIuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMoZmFsc2UpO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBSRVNPVVJDRVNcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICRyZXNvdXJjZVByb3ZpZGVyLmRlZmF1bHRzLmFjdGlvbnMgPSB7XG4gICAgICAgIGdldDogICAgeyBtZXRob2Q6ICdHRVQnIH0sXG4gICAgICAgIGxpc3Q6ICAgeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OnRydWUgfSxcbiAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BBVENIJyB9LFxuICAgICAgICBjcmVhdGU6IHsgbWV0aG9kOiAnUE9TVCd9LFxuICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJ31cbiAgICAgIH07XG5cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIFRFTVBMQVRFU1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAvLyBhc3NpZ24gZGVmYXVsdCBgdGVtcGxhdGVVcmxgIGZvciBzdGF0ZXNcbiAgICAgICRzdGF0ZVByb3ZpZGVyLmRlY29yYXRvcigndmlld3MnLCBmdW5jdGlvbihzdGF0ZSwgcGFyZW50KSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFzc2lnbnMgZGVmYXVsdCB0ZW1wbGF0ZSBVUkw6XG4gICAgICAgIC8vIC4vcGF0aC90by9zdGF0ZS9bdmlldy9dWy9uYW1lXS5odG1sXG4gICAgICAgIC8vXG4gICAgICAgIHZhciBuZXdWaWV3Q29uZmlnID0ge30sIHZpZXdzID0gcGFyZW50KHN0YXRlKTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbihjb25maWcsIHZpZXcpe1xuICAgICAgICAgIHZhciB2aWV3TWF0Y2ggPSB2aWV3Lm1hdGNoKC8oW15AXSspXFxALyk7IC8vIFtwYXJlbnRWaWV3L112aWV3QHN0YXRlLm5hbWVcbiAgICAgICAgICB2YXIgdmlld05hbWUgPSB2aWV3TWF0Y2ggPyAnLycgKyB2aWV3TWF0Y2hbMV0gOiAnJztcblxuICAgICAgICAgIHZhciBzdGF0ZU5hbWUgPSBzdGF0ZS5uYW1lLnJlcGxhY2UoL1xcLi9nLCAnLycpO1xuICAgICAgICAgIHZhciBiYXNlUGF0aCA9IFZJRVdTX1BBVEggKyAnLyc7XG5cbiAgICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBjb25maWcudGVtcGxhdGVVcmwgfHzCoFtcbiAgICAgICAgICAgIGJhc2VQYXRoLFxuICAgICAgICAgICAgc3RhdGVOYW1lLFxuICAgICAgICAgICAgdmlld05hbWUsXG4gICAgICAgICAgICAnLmh0bWwnXG4gICAgICAgICAgXS5qb2luKCcnKTtcblxuICAgICAgICAgIGNvbmZpZy50ZW1wbGF0ZVVybCA9IHRlbXBsYXRlVXJsO1xuICAgICAgICAgIG5ld1ZpZXdDb25maWdbdmlld10gPSBjb25maWc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXdWaWV3Q29uZmlnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGlnbm9yZSBKV1QgYXV0aG9yaXphdGlvbiBvbiB0ZW1wbGF0ZSByZXF1ZXN0c1xuICAgICAgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLmh0dHBPcHRpb25zKHtcbiAgICAgICAgc2tpcEF1dGhvcml6YXRpb246IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBTVEFURVNcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgLy8gbWFpbiAoaTE4bilcbiAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdtYWluJywge1xuICAgICAgICB1cmw6ICcnLFxuICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgIHRyYW5zbGF0aW9uczogWydpMThuJywgZnVuY3Rpb24oaTE4bil7XG4gICAgICAgICAgICByZXR1cm4gaTE4bi5sb2FkKCdkZScsIHtcbiAgICAgICAgICAgICAgc2tpcEF1dGhvcml6YXRpb246IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1dXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdiBkYXRhLXVpLXZpZXc9XCJcIj48L2Rpdj4nXG4gICAgICB9KTtcblxuICAgICAgLy8gZnJvbnRlbmRcbiAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdmcm9udGVuZCcsIHtcbiAgICAgICAgcGFyZW50OiAnbWFpbicsXG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgdXNlcjogWyd1c2VyJywgJyRzdGF0ZScsIGZ1bmN0aW9uKHVzZXIsICRzdGF0ZSl7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHVzZXIubG9hZCgpLiRwcm9taXNlO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UuY2F0Y2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1lFUycpO1xuICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luLmZyb250ZW5kJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XVxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcm9sZTogW1xuICAgICAgICAgICAgJ1JPTEVfVVNFUicsXG4gICAgICAgICAgICAnUk9MRV9BRE1JTicsXG4gICAgICAgICAgICAnUk9MRV9TVVBFUl9BRE1JTidcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ25hdmJhckBmcm9udGVuZCc6IHt9LFxuICAgICAgICAgICdob21lQGZyb250ZW5kJzoge30sXG4gICAgICAgICAgJ3RvcGljc0Bmcm9udGVuZCc6IHt9LFxuXG4gICAgICAgICAgJ2ZpbmFuY2lhbC1rbm93bGVkZ2VAZnJvbnRlbmQnOnt9LFxuICAgICAgICAgICdmaW5hbmNpYWwta25vd2xlZGdlL2ludGVyZXN0LXRhc2tAZnJvbnRlbmQnOnt9LFxuICAgICAgICAgICdmaW5hbmNpYWwta25vd2xlZGdlL2RpdmVyc2lmaWNhdGlvbi10YXNrQGZyb250ZW5kJzp7fSxcblxuICAgICAgICAgICdjb25zdW1lci1iZWhhdmlvdXJAZnJvbnRlbmQnOnt9LFxuICAgICAgICAgICdjb25zdW1lci1iZWhhdmlvdXIvYm9tYi10YXNrQGZyb250ZW5kJzp7fSxcbiAgICAgICAgICAnY29uc3VtZXItYmVoYXZpb3VyL2FuY2hvcmluZy10YXNrQGZyb250ZW5kJzp7fSxcbiAgICAgICAgICAnY29uc3VtZXItYmVoYXZpb3VyL21lbnRhbC1ib29ra2VlcGluZy10YXNrQGZyb250ZW5kJzp7fSxcbiAgICAgICAgICAnY29uc3VtZXItYmVoYXZpb3VyL2ZyYW1pbmctdGFza0Bmcm9udGVuZCc6e30sXG5cbiAgICAgICAgICAnc2VsZi1jb250cm9sQGZyb250ZW5kJzp7fSxcbiAgICAgICAgICAnc2VsZi1jb250cm9sL3NhdmluZ3MtdGFyZ2V0LXRhc2tAZnJvbnRlbmQnOnt9LFxuICAgICAgICAgICdzZWxmLWNvbnRyb2wvc2F2aW5ncy1zdXBwb3J0ZWQtdGFza0Bmcm9udGVuZCc6e30sXG4gICAgICAgICAgJ3NlbGYtY29udHJvbC9zZWxmLWNvbW1pdG1lbnQtdGFza0Bmcm9udGVuZCc6e30sXG4gICAgICAgICAgJ3NlbGYtY29udHJvbC9wcm9jcmFzdGluYXRpb24tdGFza0Bmcm9udGVuZCc6e30sXG5cbiAgICAgICAgICAnc3RhdHVzQGZyb250ZW5kJzoge30sXG4gICAgICAgICAgJ2NvbnRhY3RAZnJvbnRlbmQnOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29udGFjdENvbnRyb2xsZXInLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udGFjdENvbnRyb2xsZXInXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnZm9vdGVyQGZyb250ZW5kJzoge30sXG4gICAgICAgICAgJ29mZmNhbnZhc0Bmcm9udGVuZCc6IHt9LFxuICAgICAgICAgICdAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0Zyb250ZW5kQ29udHJvbGxlcicsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdmcm9udGVuZENvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gYmFja2VuZFxuICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2JhY2tlbmQnLCB7XG4gICAgICAgIHBhcmVudDogJ21haW4nLFxuICAgICAgICB1cmw6ICcvYWRtaW4nLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcm9sZTogJ1JPTEVfQURNSU4nXG4gICAgICAgIH0sXG4gICAgICAgIHJlZGlyZWN0VG86ICdiYWNrZW5kLndvcmtzaG9wcycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ21haW5AYmFja2VuZCc6IHt9LFxuICAgICAgICAgICduYXZiYXJAYmFja2VuZCc6IHt9LFxuICAgICAgICAgICdmb290ZXJAYmFja2VuZCc6IHt9LFxuICAgICAgICAgICdvZmZjYW52YXNAYmFja2VuZCc6IHt9LFxuICAgICAgICAgICdAJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0JhY2tlbmRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2JhY2tlbmRDb250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdiYWNrZW5kLndvcmtzaG9wcycsIHtcbiAgICAgICAgdXJsOiAnP3tleHBhbmQ6aW50fScsXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICB3b3Jrc2hvcHM6IFsnV29ya3Nob3AnLCBmdW5jdGlvbihXb3Jrc2hvcCl7XG4gICAgICAgICAgICByZXR1cm4gV29ya3Nob3AubGlzdCgpLiRwcm9taXNlO1xuICAgICAgICAgIH1dXG4gICAgICAgIH0sXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGV4cGFuZDoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBkeW5hbWljOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiAnV29ya3Nob3BDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAnd29ya3Nob3BDb250cm9sbGVyJ1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGxvZ2luXG4gICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgIHBhcmVudDogJ21haW4nLFxuICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgcmVkaXJlY3RUbzogJ2xvZ2luLmZyb250ZW5kLmluZGV4J1xuICAgICAgfSk7XG5cbiAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdsb2dpbi5mcm9udGVuZCcsIHtcbiAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICByZWRpcmVjdHM6IHtcbiAgICAgICAgICAgIFJPTEVfVVNFUjogJ2Zyb250ZW5kJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVkaXJlY3RUbzogJ2xvZ2luLmZyb250ZW5kLmluZGV4JyxcbiAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luRnJvbnRlbmRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAnbG9naW5Gcm9udGVuZENvbnRyb2xsZXInXG4gICAgICB9KTtcblxuICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xvZ2luLmZyb250ZW5kLmluZGV4Jywge1xuICAgICAgICB1cmw6ICcnXG4gICAgICB9KTtcblxuICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xvZ2luLmZyb250ZW5kLnNpZ251cCcsIHtcbiAgICAgICAgdXJsOiAnL3NjaHVsZSdcbiAgICAgIH0pO1xuXG4gICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnbG9naW4uZnJvbnRlbmQuc2lnbmluJywge1xuICAgICAgICB1cmw6ICcvenVoYXVzZSdcbiAgICAgIH0pO1xuXG4gICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnbG9naW4uYmFja2VuZCcsIHtcbiAgICAgICAgdXJsOiAnL2FkbWluJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHJlZGlyZWN0czoge1xuICAgICAgICAgICAgUk9MRV9BRE1JTjogJ2JhY2tlbmQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiAnTG9naW5CYWNrZW5kQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZ2luQmFja2VuZENvbnRyb2xsZXInXG4gICAgICB9KTtcblxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgIH1cbiAgXSk7XG5cbiAgLy9cbiAgLy8gUlVOXG4gIC8vXG4gIGFwcC5ydW4oWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICAgIHZhciAkdHJhbnNpdGlvbnMgPSAkaW5qZWN0b3IuZ2V0KCckdHJhbnNpdGlvbnMnKTtcbiAgICAgIHZhciAkcm9vdFNjb3BlID0gJGluamVjdG9yLmdldCgnJHJvb3RTY29wZScpO1xuICAgICAgdmFyIGFwcFN0YXRlID0gJGluamVjdG9yLmdldCgnYXBwU3RhdGUnKTtcbiAgICAgIHZhciAkc3RhdGUgPSAkaW5qZWN0b3IuZ2V0KCckc3RhdGUnKTtcbiAgICAgIHZhciBhdXRoID0gJGluamVjdG9yLmdldCgnYXV0aCcpO1xuXG4gICAgICB2YXIgJHRyYWNlID0gJGluamVjdG9yLmdldCgnJHRyYWNlJyk7XG4gICAgICAkdHJhY2UuZW5hYmxlKCdUUkFOU0lUSU9OJyk7XG5cbiAgICAgIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICAgICAgICBhcHBTdGF0ZS5yb3V0ZXJCdXN5ID0gdHJ1ZTtcblxuICAgICAgICB2YXIgc3RhdGUgPSB0cmFuc2l0aW9uLnRvKCk7XG4gICAgICAgIHZhciBkYXRhID0gc3RhdGUuZGF0YSB8fMKge307XG4gICAgICAgIHZhciByb2xlID0gZGF0YS5yb2xlIHx8wqBudWxsO1xuICAgICAgICB2YXIgcmVkaXJlY3RzID0gZGF0YS5yZWRpcmVjdHMgfHzCoHt9O1xuXG4gICAgICAgIC8vIG5vIGF1dGhlbnRpY2F0aW9uIGNoZWNrIGZvciBzdGF0ZXNcbiAgICAgICAgLy8gd2l0aG91dCBhbnkgYXV0aG9yaXphdGlvbiBzZXR0aW5nc1xuICAgICAgICBpZiAocm9sZSA9PT0gbnVsbCkge1xuXG4gICAgICAgICAgLy8gdHJ5IHRvIHJlZGlyZWN0IGF1dGhlbnRpY2F0ZWQgdXNlcnNcbiAgICAgICAgICAvLyB3aXRoIGF1dGggcm9sZXMgdG8gY29uZmlndXJlZCByb3V0ZVxuICAgICAgICAgIHZhciB1c2VyID0gYXV0aC5nZXRVc2VyKCk7XG4gICAgICAgICAgaWYgKHVzZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcm9sZXMgPSB1c2VyLnJvbGVzIHx8wqBbXTtcbiAgICAgICAgICBmb3IgKHJvbGUgaW4gcmVkaXJlY3RzKSB7XG4gICAgICAgICAgICBpZiAocm9sZXMuaW5kZXhPZihyb2xlKT49MCkge1xuICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVkaXJlY3RzW3JvbGVdO1xuICAgICAgICAgICAgICByZXR1cm4gJHN0YXRlLnRhcmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXNzZXJ0IHJvbGUgYW4gYXJyYXkgZm9yIGNhbGxiYWNrc1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShyb2xlKSkge1xuICAgICAgICAgIHJvbGUgPSBbcm9sZV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24oKVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgdmFyIGZhaWx1cmVDYWxsYmFjayA9IGZ1bmN0aW9uKClcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyByZWRpcmVjdCB0byBsb2dpbiBwYWdlIGRlcGVuZGluZyBvblxuICAgICAgICAgICAgLy8gZ2l2ZW4gcm9sZSB3aXRoIHVuc3VmZmljaWVudCByaWdodHNcbiAgICAgICAgICAgIHN3aXRjaChyb2xlWzBdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjYXNlICdST0xFX0FETUlOJzpcbiAgICAgICAgICAgICAgY2FzZSAnUk9MRV9TVVBFUl9BRE1JTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICRzdGF0ZS50YXJnZXQoJ2xvZ2luLmJhY2tlbmQnKTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJHN0YXRlLnRhcmdldCgnbG9naW4uZnJvbnRlbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBhdXRoLmhhc1JvbGUocm9sZSkudGhlbihcbiAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZmFpbHVyZUNhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uKC8qdHJhbnNpdGlvbiovKSB7XG4gICAgICAgIGFwcFN0YXRlLnJvdXRlckJ1c3kgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBvblN1Y2Nlc3MgPSBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gICAgICAgICRyb290U2NvcGUuc3RhdGUgPSB0cmFuc2l0aW9uLnRvKCk7XG4gICAgICAgIGFwcFN0YXRlLnJvdXRlckJ1c3kgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRyb290U2NvcGUuJHdhdGNoKFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXBwU3RhdGUuaXNCdXN5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGlzQnVzeSnCoHtcbiAgICAgICAgICAkcm9vdFNjb3BlLmlzQnVzeSA9IGlzQnVzeTtcbiAgICAgICAgICAkcm9vdFNjb3BlLmh0dHBCdXN5ID0gYXBwU3RhdGUuaHR0cEJ1c3k7XG4gICAgICAgICAgJHJvb3RTY29wZS5yb3V0ZXJCdXN5ID0gYXBwU3RhdGUucm91dGVyQnVzeTtcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgJHRyYW5zaXRpb25zLm9uRXJyb3Ioe30sIG9uRXJyb3IpO1xuICAgICAgJHRyYW5zaXRpb25zLm9uU3RhcnQoe30sIG9uU3RhcnQpO1xuICAgICAgJHRyYW5zaXRpb25zLm9uU3VjY2Vzcyh7fSwgb25TdWNjZXNzKTtcbiAgICB9XG4gIF0pO1xuXG4gIC8vXG4gIC8vIEVYUE9TRVxuICAvL1xuICBnbG9iYWwuQU5HVUxBUl9NT0RVTEUgPSBtb2R1bGU7XG5cbn0pKHdpbmRvdywgYW5ndWxhcik7XG4iXX0=
